require(['backbone', 'html-react-parser', 'bowser', 'semver', 'react', 'react-dom', 'libraries/mediaelement-and-player', 'libraries/rangeslider', 'handlebars'], (function (Backbone$1, HTMLReactParser, Bowser, semver, React, ReactDOM, mediaelementAndPlayer, rangeslider, Handlebars$1) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var Backbone__default = /*#__PURE__*/_interopDefaultLegacy(Backbone$1);
  var HTMLReactParser__default = /*#__PURE__*/_interopDefaultLegacy(HTMLReactParser);
  var Bowser__default = /*#__PURE__*/_interopDefaultLegacy(Bowser);
  var semver__default = /*#__PURE__*/_interopDefaultLegacy(semver);
  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
  var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);
  var Handlebars__default = /*#__PURE__*/_interopDefaultLegacy(Handlebars$1);

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get() {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(arguments.length < 3 ? target : receiver);
        }

        return desc.value;
      };
    }

    return _get.apply(this, arguments);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (!it) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = it.call(o);
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  var Wait = function (_Backbone$Controller) {
    _inherits(Wait, _Backbone$Controller);

    var _super = _createSuper(Wait);

    function Wait() {
      _classCallCheck(this, Wait);

      return _super.apply(this, arguments);
    }

    _createClass(Wait, [{
      key: "initialize",
      value: function initialize() {
        this._waitCount = 0;
        this._callbackHandle = null;
        this.being = this.begin.bind(this);
        this.end = this.end.bind(this);
      }
    }, {
      key: "isWaiting",
      value: function isWaiting() {
        return this._waitCount !== 0;
      }
    }, {
      key: "begin",
      value: function begin() {
        if (!this.isWaiting()) this.trigger('wait');
        this._waitCount++;

        if (this._callbackHandle) {
          clearTimeout(this._callbackHandle);
          this._callbackHandle = null;
        }

        return this;
      }
    }, {
      key: "end",
      value: function end() {
        if (!this.isWaiting()) return this;
        this._waitCount--;
        if (this.isWaiting() || this._callbackHandle) return this;
        this._callbackHandle = setTimeout(function () {
          this._callbackHandle = null;
          this.trigger('ready');
        }.bind(this), 0);
        return this;
      }
    }, {
      key: "queue",
      value: function queue(callback) {
        var _this = this;

        if (!callback) {
          this.begin();
          return new Promise(function (resolve) {
            _this.once('ready', resolve);

            _this.end();
          });
        }

        this.begin();
        this.once('ready', callback);
        this.end();
        return this;
      }
    }, {
      key: "for",
      value: function _for(callback) {
        var _this2 = this;

        this.begin();

        _.defer(function () {
          return callback(_.once(_this2.end));
        });

        return this;
      }
    }]);

    return Wait;
  }(Backbone.Controller);

  var wait = new Wait();
  var wait$1 = __AMD("core/js/wait", wait);

  var LockingModel = __AMD("core/js/models/lockingModel", function (_Backbone$Model) {
    _inherits(LockingModel, _Backbone$Model);

    var _super = _createSuper(LockingModel);

    function LockingModel() {
      _classCallCheck(this, LockingModel);

      return _super.apply(this, arguments);
    }

    _createClass(LockingModel, [{
      key: "set",
      value: function set(attrName, attrVal) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var stopProcessing = _typeof(attrName) === 'object' || typeof attrVal !== 'boolean' || !this.isLocking(attrName);
        if (stopProcessing) return _get(_getPrototypeOf(LockingModel.prototype), "set", this).apply(this, arguments);
        var isSettingValueForSpecificPlugin = options === null || options === void 0 ? void 0 : options.pluginName;

        if (!isSettingValueForSpecificPlugin) {
          console.error('Must supply a pluginName to change a locked attribute');
          options.pluginName = 'compatibility';
        }

        var pluginName = options.pluginName;

        if (this.defaults[attrName] !== undefined) {
          this._lockedAttributes[attrName] = !this.defaults[attrName];
        }

        var lockingValue = this._lockedAttributes[attrName];
        var isAttemptingToLock = lockingValue === attrVal;

        if (isAttemptingToLock) {
          this.setLockState(attrName, true, {
            pluginName: pluginName,
            skipcheck: true
          });
          return _get(_getPrototypeOf(LockingModel.prototype), "set", this).call(this, attrName, lockingValue);
        }

        this.setLockState(attrName, false, {
          pluginName: pluginName,
          skipcheck: true
        });
        var totalLockValue = this.getLockCount(attrName, {
          skipcheck: true
        });

        if (totalLockValue === 0) {
          return _get(_getPrototypeOf(LockingModel.prototype), "set", this).call(this, attrName, !lockingValue);
        }

        return this;
      }
    }, {
      key: "setLocking",
      value: function setLocking(attrName, defaultLockValue) {
        if (this.isLocking(attrName)) return;
        if (!this._lockedAttributes) this._lockedAttributes = {};
        this._lockedAttributes[attrName] = defaultLockValue;
      }
    }, {
      key: "unsetLocking",
      value: function unsetLocking(attrName) {
        if (!this.isLocking(attrName)) return;
        if (!this._lockedAttributes) return;
        delete this._lockedAttributes[attrName];
        delete this._lockedAttributesValues[attrName];

        if (Object.keys(this._lockedAttributes).length === 0) {
          delete this._lockedAttributes;
          delete this._lockedAttributesValues;
        }
      }
    }, {
      key: "isLocking",
      value: function isLocking(attrName) {
        var isCheckingGeneralLockingState = attrName === undefined;
        var isUsingLockedAttributes = Boolean(this.lockedAttributes || this._lockedAttributes);

        if (isCheckingGeneralLockingState) {
          return isUsingLockedAttributes;
        }

        if (!isUsingLockedAttributes) return false;

        if (!this._lockedAttributes) {
          this._lockedAttributes = _.result(this, 'lockedAttributes');
        }

        var isAttributeALockingAttribute = this._lockedAttributes.hasOwnProperty(attrName);

        if (!isAttributeALockingAttribute) return false;

        if (!this._lockedAttributesValues) {
          this._lockedAttributesValues = {};
        }

        if (!this._lockedAttributesValues[attrName]) {
          this._lockedAttributesValues[attrName] = {};
        }

        return true;
      }
    }, {
      key: "isLocked",
      value: function isLocked(attrName, options) {
        var shouldSkipCheck = options === null || options === void 0 ? void 0 : options.skipcheck;

        if (!shouldSkipCheck) {
          var stopProcessing = !this.isLocking(attrName);
          if (stopProcessing) return;
        }

        return this.getLockCount(attrName) > 0;
      }
    }, {
      key: "getLockCount",
      value: function getLockCount(attrName, options) {
        var shouldSkipCheck = options === null || options === void 0 ? void 0 : options.skipcheck;

        if (!shouldSkipCheck) {
          var stopProcessing = !this.isLocking(attrName);
          if (stopProcessing) return;
        }

        var isGettingValueForSpecificPlugin = options === null || options === void 0 ? void 0 : options.pluginName;

        if (isGettingValueForSpecificPlugin) {
          return this._lockedAttributesValues[attrName][options.pluginName] ? 1 : 0;
        }

        var lockingAttributeValues = Object.values(this._lockedAttributesValues[attrName]);
        var lockingAttributeValuesSum = lockingAttributeValues.reduce(function (sum, value) {
          return sum + (value ? 1 : 0);
        }, 0);
        return lockingAttributeValuesSum;
      }
    }, {
      key: "setLockState",
      value: function setLockState(attrName, value, options) {
        var shouldSkipCheck = options === null || options === void 0 ? void 0 : options.skipcheck;

        if (!shouldSkipCheck) {
          var stopProcessing = !this.isLocking(attrName);
          if (stopProcessing) return this;
        }

        var isSettingValueForSpecificPlugin = options === null || options === void 0 ? void 0 : options.pluginName;

        if (!isSettingValueForSpecificPlugin) {
          console.error('Must supply a pluginName to set a locked attribute lock value');
          options.pluginName = 'compatibility';
        }

        if (value) {
          this._lockedAttributesValues[attrName][options.pluginName] = value;
        } else {
          delete this._lockedAttributesValues[attrName][options.pluginName];
        }

        return this;
      }
    }]);

    return LockingModel;
  }(Backbone.Model));

  var AdaptSingleton = function (_LockingModel) {
    _inherits(AdaptSingleton, _LockingModel);

    var _super = _createSuper(AdaptSingleton);

    function AdaptSingleton() {
      _classCallCheck(this, AdaptSingleton);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptSingleton, [{
      key: "initialize",
      value: function initialize() {
        this.loadScript = window.__loadScript;
      }
    }, {
      key: "defaults",
      value: function defaults() {
        return {
          _canScroll: true,
          _outstandingCompletionChecks: 0,
          _pluginWaitCount: 0,
          _isStarted: false,
          _shouldDestroyContentObjects: true
        };
      }
    }, {
      key: "lockedAttributes",
      value: function lockedAttributes() {
        return {
          _canScroll: false
        };
      }
    }, {
      key: "init",
      value: function () {
        var _init = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          var _this = this;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  this.addDirection();
                  this.disableAnimation();
                  this.trigger('adapt:preInitialize');
                  _context2.next = 5;
                  return wait$1.queue();

                case 5:
                  this.deferUntilCompletionChecked(_asyncToGenerator(regeneratorRuntime.mark(function _callee() {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _this.trigger('adapt:start');

                            _context.next = 3;
                            return wait$1.queue();

                          case 3:
                            if (!Backbone.History.started) {
                              Backbone.history.start();
                            }

                            _this.set('_isStarted', true);

                            _this.trigger('adapt:initialize');

                            _context.next = 8;
                            return wait$1.queue();

                          case 8:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  })));

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function init() {
          return _init.apply(this, arguments);
        }

        return init;
      }()
    }, {
      key: "checkingCompletion",
      value: function checkingCompletion() {
        var outstandingChecks = this.get('_outstandingCompletionChecks');
        this.set('_outstandingCompletionChecks', outstandingChecks + 1);
      }
    }, {
      key: "checkedCompletion",
      value: function checkedCompletion() {
        var outstandingChecks = this.get('_outstandingCompletionChecks');
        this.set('_outstandingCompletionChecks', outstandingChecks - 1);
      }
    }, {
      key: "deferUntilCompletionChecked",
      value: function () {
        var _deferUntilCompletionChecked = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
          var _this2 = this;

          var callback,
              _args3 = arguments;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  callback = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : function () {};

                  if (!(this.get('_outstandingCompletionChecks') === 0)) {
                    _context3.next = 3;
                    break;
                  }

                  return _context3.abrupt("return", callback());

                case 3:
                  return _context3.abrupt("return", new Promise(function (resolve) {
                    var checkIfAnyChecksOutstanding = function (model, outstandingChecks) {
                      if (outstandingChecks !== 0) return;

                      _this2.off('change:_outstandingCompletionChecks', checkIfAnyChecksOutstanding);

                      callback();
                      resolve();
                    };

                    _this2.on('change:_outstandingCompletionChecks', checkIfAnyChecksOutstanding);
                  }));

                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function deferUntilCompletionChecked() {
          return _deferUntilCompletionChecked.apply(this, arguments);
        }

        return deferUntilCompletionChecked;
      }()
    }, {
      key: "isWaitingForPlugins",
      value: function isWaitingForPlugins() {
        this.log.deprecated('Use wait.isWaiting() as Adapt.isWaitingForPlugins() will be removed in the future');
        return wait$1.isWaiting();
      }
    }, {
      key: "checkPluginsReady",
      value: function checkPluginsReady() {
        this.log.deprecated('Use wait.isWaiting() as Adapt.checkPluginsReady() will be removed in the future');

        if (this.isWaitingForPlugins()) {
          return;
        }

        this.trigger('plugins:ready');
      }
    }, {
      key: "parseRelativeString",
      value: function parseRelativeString(relativeString) {
        var splitIndex = relativeString.search(/[ +\-\d]{1}/);
        if (splitIndex === -1) splitIndex = relativeString.length;
        var type = relativeString.slice(0, splitIndex).replace(/^@/, '');
        var offset = parseInt(relativeString.slice(splitIndex).trim() || 0);
        return {
          type: type,
          offset: offset
        };
      }
    }, {
      key: "addDirection",
      value: function addDirection() {
        var defaultDirection = this.config.get('_defaultDirection');
        $('html').addClass('dir-' + defaultDirection).attr('dir', defaultDirection);
      }
    }, {
      key: "disableAnimation",
      value: function disableAnimation() {
        var disableAnimationArray = this.config.get('_disableAnimationFor');
        var disableAnimation = this.config.get('_disableAnimation');

        if (disableAnimationArray) {
          for (var i = 0, l = disableAnimationArray.length; i < l; i++) {
            if (!$('html').is(disableAnimationArray[i])) continue;
            this.config.set('_disableAnimation', true);
            $('html').addClass('disable-animation');
            console.log('Animation disabled.');
          }

          return;
        }

        $('html').toggleClass('disable-animation', disableAnimation === true);
      }
    }, {
      key: "remove",
      value: function () {
        var _remove = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
          var currentView;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  currentView = this.parentView;

                  if (currentView) {
                    currentView.model.setOnChildren({
                      _isReady: false,
                      _isRendered: false
                    });
                  }

                  this.trigger('preRemove', currentView);
                  _context4.next = 5;
                  return wait$1.queue();

                case 5:
                  if (currentView && this.get('_shouldDestroyContentObjects')) {
                    currentView.destroy();
                  }

                  this.trigger('remove', currentView);

                  _.defer(this.trigger.bind(this), 'postRemove', currentView);

                case 8:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function remove() {
          return _remove.apply(this, arguments);
        }

        return remove;
      }()
    }, {
      key: "a11y",
      get: function () {}
    }, {
      key: "componentStore",
      get: function () {}
    }, {
      key: "data",
      get: function () {}
    }, {
      key: "device",
      get: function () {}
    }, {
      key: "drawer",
      get: function () {}
    }, {
      key: "location",
      get: function () {}
    }, {
      key: "notify",
      get: function () {}
    }, {
      key: "offlineStorage",
      get: function () {}
    }, {
      key: "router",
      get: function () {}
    }, {
      key: "scrolling",
      get: function () {}
    }, {
      key: "startController",
      get: function () {}
    }, {
      key: "store",
      get: function () {}
    }, {
      key: "tracking",
      get: function () {}
    }, {
      key: "wait",
      get: function () {}
    }, {
      key: "navigateToElement",
      value: function () {
        var _navigateToElement = _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5);
        }));

        function navigateToElement() {
          return _navigateToElement.apply(this, arguments);
        }

        return navigateToElement;
      }()
    }, {
      key: "scrollTo",
      value: function () {
        var _scrollTo = _asyncToGenerator(regeneratorRuntime.mark(function _callee6() {
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6);
        }));

        function scrollTo() {
          return _scrollTo.apply(this, arguments);
        }

        return scrollTo;
      }()
    }, {
      key: "register",
      value: function register(name, object) {}
    }, {
      key: "getViewName",
      value: function getViewName() {}
    }, {
      key: "getViewClass",
      value: function getViewClass() {}
    }, {
      key: "getModelName",
      value: function getModelName() {}
    }, {
      key: "getModelClass",
      value: function getModelClass() {}
    }, {
      key: "findById",
      value: function findById() {}
    }, {
      key: "findViewByModelId",
      value: function findViewByModelId() {}
    }, {
      key: "findByTrackingPosition",
      value: function findByTrackingPosition() {}
    }]);

    return AdaptSingleton;
  }(LockingModel);

  var Adapt = new AdaptSingleton();
  var Adapt$1 = __AMD("core/js/adapt", Adapt);

  var LOG_LEVEL = ENUM(['DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL']);
  var LOG_LEVEL$1 = __AMD("core/js/enums/logLevelEnum", LOG_LEVEL);

  var Logging = function (_Backbone$Controller) {
    _inherits(Logging, _Backbone$Controller);

    var _super = _createSuper(Logging);

    function Logging() {
      _classCallCheck(this, Logging);

      return _super.apply(this, arguments);
    }

    _createClass(Logging, [{
      key: "initialize",
      value: function initialize() {
        this._config = {
          _isEnabled: true,
          _level: LOG_LEVEL$1.INFO.asLowerCase,
          _console: true,
          _warnFirstOnly: true
        };
        this._warned = {};
        this.listenToOnce(Adapt$1, 'configModel:dataLoaded', this.onLoadConfigData);
      }
    }, {
      key: "onLoadConfigData",
      value: function onLoadConfigData() {
        this.loadConfig();
        this.debug('Logging config loaded');
        this.trigger('log:ready');
      }
    }, {
      key: "loadConfig",
      value: function loadConfig() {
        if (Adapt$1.config.has('_logging')) {
          this._config = Adapt$1.config.get('_logging');
        }

        this.checkQueryStringOverride();
      }
    }, {
      key: "checkQueryStringOverride",
      value: function checkQueryStringOverride() {
        var matches = window.location.search.match(/[?&]loglevel=([a-z]*)/i);
        if (!matches || matches.length < 2) return;
        var override = LOG_LEVEL$1(matches[1].toUpperCase());
        if (!override) return;
        this._config._level = override.asLowerCase;
        this.debug('Loglevel override in query string:', this._config._level);
      }
    }, {
      key: "debug",
      value: function debug() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        this._log(LOG_LEVEL$1.DEBUG, args);
      }
    }, {
      key: "info",
      value: function info() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        this._log(LOG_LEVEL$1.INFO, args);
      }
    }, {
      key: "warn",
      value: function warn() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        this._log(LOG_LEVEL$1.WARN, args);
      }
    }, {
      key: "error",
      value: function error() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        this._log(LOG_LEVEL$1.ERROR, args);
      }
    }, {
      key: "fatal",
      value: function fatal() {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }

        this._log(LOG_LEVEL$1.FATAL, args);
      }
    }, {
      key: "removed",
      value: function removed() {
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }

        args = ['REMOVED'].concat(args);
        this.warnOnce.apply(this, _toConsumableArray(args));
      }
    }, {
      key: "deprecated",
      value: function deprecated() {
        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          args[_key7] = arguments[_key7];
        }

        args = ['DEPRECATED'].concat(args);
        this.warnOnce.apply(this, _toConsumableArray(args));
      }
    }, {
      key: "warnOnce",
      value: function warnOnce() {
        for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
          args[_key8] = arguments[_key8];
        }

        if (this._hasWarned(args)) {
          return;
        }

        this._log(LOG_LEVEL$1.WARN, args);
      }
    }, {
      key: "_log",
      value: function _log(level, data) {
        var isEnabled = this._config._isEnabled;
        if (!isEnabled) return;
        var configLevel = LOG_LEVEL$1(this._config._level.toUpperCase());
        var isLogLevelAllowed = level >= configLevel;
        if (!isLogLevelAllowed) return;

        this._logToConsole(level, data);

        this.trigger('log', level, data);
        this.trigger('log:' + level.asLowerCase, level, data);
      }
    }, {
      key: "_logToConsole",
      value: function _logToConsole(level, data) {
        var shouldLogToConsole = this._config._console;
        if (!shouldLogToConsole) return;
        var log = [level.asUpperCase + ':'];
        data && log.push.apply(log, _toConsumableArray(data));

        if (console[level.asLowerCase]) {
          var _console;

          (_console = console)[level.asLowerCase].apply(_console, log);
        } else {
          var _console2;

          (_console2 = console).log.apply(_console2, log);
        }
      }
    }, {
      key: "_hasWarned",
      value: function _hasWarned(args) {
        if (!this._config._warnFirstOnly) {
          return false;
        }

        var hash = args.map(String).join(':');

        if (this._warned[hash]) {
          return true;
        }

        this._warned[hash] = true;
        return false;
      }
    }]);

    return Logging;
  }(Backbone.Controller);

  var logging = new Logging();
  Object.defineProperty(Adapt$1, 'log', {
    get: function () {
      logging.deprecated('Adapt.log, please use core/js/logging directly');
      return logging;
    }
  });
  var logging$1 = __AMD("core/js/logging", logging);

  Object.defineProperties(Adapt$1, {
    wait: {
      get: function () {
        logging$1.deprecated('Adapt.wait, please use src/core/wait instead');
        return wait$1;
      }
    }
  });

  var beginWait = function () {
    logging$1.deprecated('Use wait.begin() as Adapt.trigger(\'plugin:beginWait\') will be removed in the future');
    wait$1.begin();
  };

  var endWait = function () {
    logging$1.deprecated('Use wait.end() as Adapt.trigger(\'plugin:endWait\') will be removed in the future');
    wait$1.end();
  };

  var ready = function () {
    if (wait$1.isWaiting()) {
      return;
    }

    var isEventListening = Adapt$1._events['plugins:ready'];

    if (!isEventListening) {
      return;
    }

    logging$1.deprecated("Use wait.queue(callback) as Adapt.on('plugins:ready', callback) will be removed in the future");
    Adapt$1.trigger('plugins:ready');
  };

  Adapt$1.listenTo(wait$1, 'ready', ready);
  Adapt$1.on({
    'plugin:beginWait': beginWait,
    'plugin:endWait': endWait
  });

  var Components = function (_Backbone$Controller) {
    _inherits(Components, _Backbone$Controller);

    var _super = _createSuper(Components);

    function Components() {
      _classCallCheck(this, Components);

      return _super.apply(this, arguments);
    }

    _createClass(Components, [{
      key: "initialize",
      value: function initialize() {
        this._register = {};
      }
    }, {
      key: "register",
      value: function register(name, object) {
        var _this = this;

        if (Array.isArray(name)) {
          name.forEach(function (name) {
            return _this.register(name, object);
          });
          return object;
        }

        if (name.split(' ').length > 1) {
          this.register(name.split(' '), object);
          return object;
        }

        if (!object.view && !object.model || object instanceof Backbone__default["default"].View) {
          logging$1.deprecated('View-only registrations are no longer supported');
          object = {
            view: object
          };
        }

        if (object.view && !object.view.template) {
          object.view.template = name;
        }

        var isModelSetAndInvalid = object.model && !(object.model.prototype instanceof Backbone__default["default"].Model) && !(object.model instanceof Function);

        if (isModelSetAndInvalid) {
          throw new Error('The registered model is not a Backbone.Model or Function');
        }

        var isViewSetAndInvalid = object.view && !(object.view.prototype instanceof Backbone__default["default"].View) && !(object.view instanceof Function);

        if (isViewSetAndInvalid) {
          throw new Error('The registered view is not a Backbone.View or Function');
        }

        this._register[name] = Object.assign({}, this._register[name], object);
        return object;
      }
    }, {
      key: "getViewName",
      value: function getViewName(nameModelViewOrData) {
        var _this2 = this;

        if (typeof nameModelViewOrData === 'string') {
          return nameModelViewOrData;
        }

        if (nameModelViewOrData instanceof Backbone__default["default"].Model) {
          nameModelViewOrData = nameModelViewOrData.toJSON();
        }

        if (nameModelViewOrData instanceof Backbone__default["default"].View) {
          var foundName;
          Object.entries(this._register).forEach(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2),
                key = _ref2[0],
                entry = _ref2[1];

            if (!(entry !== null && entry !== void 0 && entry.view)) return;
            if (!(nameModelViewOrData instanceof entry.view)) return;
            foundName = key;
            return true;
          });
          return foundName;
        }

        if (nameModelViewOrData instanceof Object) {
          var names = [typeof nameModelViewOrData._view === 'string' && nameModelViewOrData._view, typeof nameModelViewOrData._component === 'string' && nameModelViewOrData._component, typeof nameModelViewOrData._type === 'string' && nameModelViewOrData._type].filter(Boolean);

          if (names.length) {
            var name = names.find(function (name) {
              var _this2$_register$name;

              return (_this2$_register$name = _this2._register[name]) === null || _this2$_register$name === void 0 ? void 0 : _this2$_register$name.view;
            });
            return name || names.pop();
          }
        }

        throw new Error('Cannot derive view class name from input');
      }
    }, {
      key: "getViewClass",
      value: function getViewClass(nameModelViewOrData) {
        var _object$view;

        var name = this.getViewName(nameModelViewOrData);
        var object = this._register[name];

        if (!object) {
          logging$1.warnOnce("A view for '".concat(name, "' isn't registered in your project"));
          return;
        }

        var isBackboneView = ((_object$view = object.view) === null || _object$view === void 0 ? void 0 : _object$view.prototype) instanceof Backbone__default["default"].View;

        if (!isBackboneView && object.view instanceof Function) {
          return object.view();
        }

        return object.view;
      }
    }, {
      key: "getModelName",
      value: function getModelName(nameModelOrData) {
        var _this3 = this;

        if (typeof nameModelOrData === 'string') {
          return nameModelOrData;
        }

        if (nameModelOrData instanceof Backbone__default["default"].Model) {
          nameModelOrData = nameModelOrData.toJSON();
        }

        if (nameModelOrData instanceof Object) {
          var _entry$view;

          var name = nameModelOrData._component;
          var entry = this._register[name];
          var isViewOnlyQuestion = entry && !entry.model && ((_entry$view = entry.view) === null || _entry$view === void 0 ? void 0 : _entry$view._isQuestionType);

          if (isViewOnlyQuestion) {
            logging$1.deprecated("Assuming a question model for a view-only question: ".concat(name));
            return 'question';
          }

          var names = [typeof nameModelOrData._model === 'string' && nameModelOrData._model, typeof nameModelOrData._component === 'string' && nameModelOrData._component, typeof nameModelOrData._type === 'string' && nameModelOrData._type].filter(Boolean);

          if (names.length) {
            var _name = names.find(function (name) {
              var _this3$_register$name;

              return (_this3$_register$name = _this3._register[name]) === null || _this3$_register$name === void 0 ? void 0 : _this3$_register$name.model;
            });

            return _name || names.pop();
          }
        }

        throw new Error('Cannot derive model class name from input');
      }
    }, {
      key: "getModelClass",
      value: function getModelClass(nameModelOrData) {
        var _object$model;

        var name = this.getModelName(nameModelOrData);
        var object = this._register[name];

        if (!object) {
          logging$1.warnOnce("A model for '".concat(name, "' isn't registered in your project"));
          return;
        }

        var isBackboneModel = ((_object$model = object.model) === null || _object$model === void 0 ? void 0 : _object$model.prototype) instanceof Backbone__default["default"].Model;

        if (!isBackboneModel && object.model instanceof Function) {
          return object.model();
        }

        return object.model;
      }
    }]);

    return Components;
  }(Backbone__default["default"].Controller);

  var components = new Components();
  components.register = components.register.bind(components);
  components.getViewName = components.getViewName.bind(components);
  components.getViewClass = components.getViewClass.bind(components);
  components.getModelName = components.getModelName.bind(components);
  components.getModelClass = components.getModelClass.bind(components);
  Object.defineProperties(Adapt$1, {
    store: {
      get: function () {
        logging$1.deprecated('Adapt.store, please use core/js/components directly');
        return components._register;
      }
    },
    componentStore: {
      get: function () {
        logging$1.deprecated('Adapt.componentStore, please use core/js/components directly');
        return components._register;
      }
    },
    register: {
      get: function () {
        logging$1.deprecated('Adapt.register, please use components.register instead');
        return components.register;
      }
    },
    getViewName: {
      get: function () {
        logging$1.deprecated('Adapt.getViewName, please use components.getViewName instead');
        return components.getViewName;
      }
    },
    getViewClass: {
      get: function () {
        logging$1.deprecated('Adapt.getViewClass, please use components.getViewClass instead');
        return components.getViewClass;
      }
    },
    getModelName: {
      get: function () {
        logging$1.deprecated('Adapt.getModelName, please use components.getModelName instead');
        return components.getModelName;
      }
    },
    getModelClass: {
      get: function () {
        logging$1.deprecated('Adapt.getModelClass, please use components.getModelClass instead');
        return components.getModelClass;
      }
    }
  });
  var components$1 = __AMD("core/js/components", components);

  var Location = function (_Backbone$Controller) {
    _inherits(Location, _Backbone$Controller);

    var _super = _createSuper(Location);

    function Location() {
      _classCallCheck(this, Location);

      return _super.apply(this, arguments);
    }

    _createClass(Location, [{
      key: "initialize",
      value: function initialize() {
        this._previousId = null;
        this._previousContentType = null;
        this._previousModel = null;
        this._previousClasses = null;
        this._lastVisitedType = null;
        this._lastVisitedMenu = null;
        this._lastVisitedPage = null;
        this._currentId = null;
        this._currentModel = null;
        this._currentLocation = null;
        this._contentType = null;
      }
    }]);

    return Location;
  }(Backbone__default["default"].Controller);

  var location = new Location();
  Object.defineProperties(Adapt$1, {
    location: {
      get: function () {
        logging$1.deprecated('Adapt.location, please use core/js/location directly');
        return location;
      }
    }
  });
  var location$1 = __AMD("core/js/location", location);

  var TemplateRenderEvent = __AMD("core/js/templateRenderEvent", function (_Backbone$Controller) {
    _inherits(TemplateRenderEvent, _Backbone$Controller);

    var _super = _createSuper(TemplateRenderEvent);

    function TemplateRenderEvent() {
      _classCallCheck(this, TemplateRenderEvent);

      return _super.apply(this, arguments);
    }

    _createClass(TemplateRenderEvent, [{
      key: "initialize",
      value: function initialize(type, name, mode, value, args) {
        this.type = type;
        this.name = name;
        this.mode = mode;
        this.value = value;
        this.args = args;
      }
    }]);

    return TemplateRenderEvent;
  }(Backbone.Controller));

  function onRender(cb) {
    var intercept = function (object, name, mode, cb) {
      return object[name] = cb.bind(object, object[name], name, mode);
    };

    Object.keys(Handlebars.templates).forEach(function (name) {
      intercept(Handlebars.templates, name, 'template', cb);
    });
    Object.keys(Handlebars.partials).forEach(function (name) {
      intercept(Handlebars.partials, name, 'partial', cb);
    });
  }

  onRender(function (template, name, mode) {
    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      args[_key - 3] = arguments[_key];
    }

    var preRenderEvent = new TemplateRenderEvent("".concat(mode, ":preRender"), name, mode, null, args);
    Adapt$1.trigger(preRenderEvent.type, preRenderEvent);
    var value = template.apply(void 0, _toConsumableArray(preRenderEvent.args));
    var postRenderEvent = new TemplateRenderEvent("".concat(mode, ":postRender"), name, mode, value, preRenderEvent.args);
    Adapt$1.trigger(postRenderEvent.type, postRenderEvent);
    return postRenderEvent.value;
  });

  Adapt$1.on('app:dataReady', function () {
    var config = Adapt$1.config.get('_fixes');
    if ((config === null || config === void 0 ? void 0 : config._imgLazyLoad) === false) return;
    applyImgLoadingFix();
  });

  function applyImgLoadingFix() {
    var findImgTag = /<img([^>]*)>/gi;
    var hasLoadingAttr = / loading=/gi;
    Adapt$1.on('template:postRender partial:postRender', function (event) {
      var imgTagsFound = event.value.match(findImgTag);

      if (!imgTagsFound) {
        return;
      }

      event.value = imgTagsFound.reduce(function (value, img) {
        if (hasLoadingAttr.test(img)) {
          return value;
        }

        return value.replace(img, img.replace(findImgTag, '<img loading="eager"$1>'));
      }, event.value);
    });
    Adapt$1.on('reactElement:preRender', function (event) {
      if (event.name !== 'img') return;
      var options = event.args[1] = event.args[1] || {};
      if (options && options.hasOwnProperty('loading')) return;
      options.loading = 'eager';
    });
  }

  Adapt$1.on('app:dataReady', function () {
    var config = Adapt$1.config.get('_fixes');
    if ((config === null || config === void 0 ? void 0 : config._jsxReactHelpersHTML) === false) return;
    applyReactHelpersHTML();
  });

  function applyReactHelpersHTML() {
    Adapt$1.on('reactElement:preRender', function (event) {
      var _event$args = _toArray(event.args),
          tagName = _event$args[0],
          props = _event$args[1],
          children = _event$args.slice(2);

      if (!children) return;
      if (!Array.isArray(children)) children = [children];
      children = children.filter(Boolean);
      var hasSomeUnsafeConversions = children.some(function (c) {
        return c === null || c === void 0 ? void 0 : c.__html;
      });
      if (!hasSomeUnsafeConversions) return;
      var hasManyChildren = children.length > 1;

      if (hasManyChildren) {
        event.args = event.args.map(function (child) {
          if (!child || !child.__html) return child;
          var attributes = Object.entries(props).map(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2),
                name = _ref2[0],
                value = _ref2[1];

            return "".concat(name, "=\"").concat(value, "\"");
          }).join(' ');
          logging$1.warnOnce("html() call should be the only child in its parent <".concat(tagName, " ").concat(attributes, ">"));
          return child.__html ? HTMLReactParser__default["default"](child.__html) : undefined;
        });
        return;
      }

      props = event.args[1] = event.args[1] || {};
      props.dangerouslySetInnerHTML = children[0];
      event.args.length = 2;
    });
  }

  var OfflineStorage = function (_Backbone$Controller) {
    _inherits(OfflineStorage, _Backbone$Controller);

    var _super = _createSuper(OfflineStorage);

    function OfflineStorage() {
      _classCallCheck(this, OfflineStorage);

      return _super.apply(this, arguments);
    }

    _createClass(OfflineStorage, [{
      key: "initialize",
      value: function initialize(handler) {
        this.ready = true;
        this._handler = undefined;

        if (!handler) {
          return;
        }

        this.ready = false;
        this._handler = handler;
      }
    }, {
      key: "hasHandler",
      value: function hasHandler() {
        return this._handler !== undefined;
      }
    }, {
      key: "save",
      value: function save() {
        var _this$_handler, _this$_handler$save;

        Adapt$1.trigger('tracking:save');
        return (_this$_handler = this._handler) === null || _this$_handler === void 0 ? void 0 : (_this$_handler$save = _this$_handler.save) === null || _this$_handler$save === void 0 ? void 0 : _this$_handler$save.apply(this._handler, arguments);
      }
    }, {
      key: "serialize",
      value: function serialize(value) {
        var _this$_handler2;

        if ((_this$_handler2 = this._handler) !== null && _this$_handler2 !== void 0 && _this$_handler2.serialize) {
          return this._handler.serialize.apply(this._handler, arguments);
        }

        return JSON.stringify(value);
      }
    }, {
      key: "deserialize",
      value: function deserialize(value) {
        var _this$_handler3;

        if ((_this$_handler3 = this._handler) !== null && _this$_handler3 !== void 0 && _this$_handler3.deserialize) {
          return this._handler.deserialize.apply(this._handler, arguments);
        }

        return JSON.parse(value);
      }
    }, {
      key: "set",
      value: function set(name, value) {
        var _this$_handler4;

        if ((_this$_handler4 = this._handler) !== null && _this$_handler4 !== void 0 && _this$_handler4.set) {
          return this._handler.set.apply(this._handler, arguments);
        }

        this[name] = value;
      }
    }, {
      key: "get",
      value: function get(name) {
        var _this$_handler5;

        if ((_this$_handler5 = this._handler) !== null && _this$_handler5 !== void 0 && _this$_handler5.get) {
          return this._handler.get.apply(this._handler, arguments);
        }

        return this[name];
      }
    }, {
      key: "setReadyStatus",
      value: function setReadyStatus() {
        this.ready = true;
        Adapt$1.trigger('offlineStorage:ready');
      }
    }]);

    return OfflineStorage;
  }(Backbone.Controller);

  var offlineStorage = new OfflineStorage();
  Object.defineProperty(Adapt$1, 'offlineStorage', {
    get: function () {
      logging$1.deprecated('offlineStorage, please use src/core/offlineStorage instead');
      return offlineStorage;
    }
  });
  var offlineStorage$1 = __AMD("core/js/offlineStorage", offlineStorage);

  var Device = function (_Backbone$Controller) {
    _inherits(Device, _Backbone$Controller);

    var _super = _createSuper(Device);

    function Device() {
      _classCallCheck(this, Device);

      return _super.apply(this, arguments);
    }

    _createClass(Device, [{
      key: "initialize",
      value: function initialize() {
        this.bowser = Bowser__default["default"].parse(window.navigator.userAgent);
        this.$html = $('html');
        this.$window = $(window);
        this.touch = Modernizr.touchevents;
        this.screenWidth = this.getScreenWidth();
        this.screenHeight = this.getScreenHeight();
        this.browser = (this.bowser.browser.name || '').toLowerCase();
        this.version = (this.bowser.browser.version || '').toLowerCase();
        this.OS = this.getOperatingSystem().toLowerCase();
        this.osVersion = this.bowser.os.version || '';
        this.renderingEngine = this.getRenderingEngine();
        this.onWindowResize = _.debounce(this.onWindowResize.bind(this), 100);
        this.listenTo(Adapt$1, {
          'configModel:dataLoaded': this.onConfigDataLoaded
        });
        var browser = this.browser.toLowerCase();
        var browserString = browser.replace(/msie|internet explorer/, 'ie');
        browserString += " version-".concat(this.version, " OS-").concat(this.OS, " ").concat(this.getAppleDeviceType());
        browserString += browserString.replace('.', '-').toLowerCase();
        browserString += " ".concat(browserString.replace(/\./g, '-').toLowerCase());
        browserString += " pixel-density-".concat(this.pixelDensity());
        this.$html.addClass(browserString);
      }
    }, {
      key: "orientation",
      get: function () {
        return this.screenWidth >= this.screenHeight ? 'landscape' : 'portrait';
      }
    }, {
      key: "aspectRatio",
      get: function () {
        return this.screenWidth / this.screenHeight;
      }
    }, {
      key: "onConfigDataLoaded",
      value: function onConfigDataLoaded() {
        this.screenSize = this.checkScreenSize();
        this.$html.addClass('size-' + this.screenSize);

        if (this.orientation) {
          this.$html.addClass('orientation-' + this.orientation);
        }

        this.$window.on('resize orientationchange', this.onWindowResize);
      }
    }, {
      key: "checkScreenSize",
      value: function checkScreenSize() {
        var screenSizeConfig = Adapt$1.config.get('screenSize');
        var screenSize;
        var screensizeEmThreshold = 300;
        var baseFontSize = 16;
        var mediumEmBreakpoint = screenSizeConfig.medium > screensizeEmThreshold ? screenSizeConfig.medium / baseFontSize : screenSizeConfig.medium;
        var smallEmBreakpoint = screenSizeConfig.small > screensizeEmThreshold ? screenSizeConfig.small / baseFontSize : screenSizeConfig.small;
        var fontSize = parseFloat($('html').css('font-size'));
        var screenSizeEmWidth = this.screenWidth / fontSize;

        if (screenSizeEmWidth >= mediumEmBreakpoint) {
          screenSize = 'large';
        } else if (screenSizeEmWidth >= smallEmBreakpoint) {
          screenSize = 'medium';
        } else {
          screenSize = 'small';
        }

        return screenSize;
      }
    }, {
      key: "getScreenWidth",
      value: function getScreenWidth() {
        return this.isAppleDevice() ? this.getAppleScreenWidth() : window.innerWidth || this.$window.width();
      }
    }, {
      key: "getScreenHeight",
      value: function getScreenHeight() {
        return this.isAppleDevice() ? this.getAppleScreenHeight() : window.innerHeight || this.$window.height();
      }
    }, {
      key: "getOperatingSystem",
      value: function getOperatingSystem() {
        var os = this.bowser.os.name.toLowerCase() || '';

        if (os === '') {
          var platform = navigator.platform.toLowerCase();
          var match = platform.match(/win|mac|linux/);
          if (match) os = match[0];
          if (os === 'win') os = 'windows';
          if (!os) os = '';
        }

        if (!os) os = 'platformunknown';
        return os;
      }
    }, {
      key: "getRenderingEngine",
      value: function getRenderingEngine() {
        return this.bowser.engine.name || '';
      }
    }, {
      key: "onWindowResize",
      value: function onWindowResize() {
        var previousWidth = this.screenWidth;
        var previousHeight = this.screenHeight;
        this.screenWidth = this.getScreenWidth();
        this.screenHeight = this.getScreenHeight();

        if (previousWidth === this.screenWidth && previousHeight === this.screenHeight) {
          return;
        }

        var newScreenSize = this.checkScreenSize();

        if (newScreenSize !== this.screenSize) {
          this.screenSize = newScreenSize;
          this.$html.removeClass('size-small size-medium size-large').addClass('size-' + this.screenSize);

          if (this.orientation) {
            this.$html.removeClass('orientation-landscape orientation-portrait').addClass('orientation-' + this.orientation);
          }

          Adapt$1.trigger('device:changed', this.screenSize);
        }

        Adapt$1.trigger('device:preResize device:resize device:postResize', this.screenWidth);
      }
    }, {
      key: "isAppleDevice",
      value: function isAppleDevice() {
        var _navigator;

        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream || navigator.userAgent.match(/Mac/) && ((_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.maxTouchPoints) > 2;
      }
    }, {
      key: "getAppleScreenWidth",
      value: function getAppleScreenWidth() {
        return Math.abs(window.orientation) === 90 ? window.screen.height : window.screen.width;
      }
    }, {
      key: "getAppleScreenHeight",
      value: function getAppleScreenHeight() {
        return Math.abs(window.orientation) === 90 ? window.screen.width : window.screen.height;
      }
    }, {
      key: "getAppleDeviceType",
      value: function getAppleDeviceType() {
        var _this$bowser$platform, _this$bowser$browser$;

        var platformType = ((_this$bowser$platform = this.bowser.platform.type) === null || _this$bowser$platform === void 0 ? void 0 : _this$bowser$platform.toLowerCase()) || '';
        var browserName = ((_this$bowser$browser$ = this.bowser.browser.name) === null || _this$bowser$browser$ === void 0 ? void 0 : _this$bowser$browser$.toLowerCase()) || '';
        var isIPhone = platformType === 'mobile' && browserName === 'safari';
        var isIPad = platformType === 'tablet' && browserName === 'safari';
        if (isIPhone) return 'iphone';
        if (isIPad) return 'ipad';
        return '';
      }
    }, {
      key: "pixelDensity",
      value: function pixelDensity() {
        var pixelDensity = window.devicePixelRatio || 1;

        if (pixelDensity >= 3) {
          return 'ultra-high';
        } else if (pixelDensity >= 2) {
          return 'high';
        } else if (pixelDensity >= 1.5) {
          return 'medium';
        } else {
          return 'low';
        }
      }
    }]);

    return Device;
  }(Backbone.Controller);

  var device = new Device();
  Object.defineProperty(Adapt$1, 'device', {
    get: function () {
      logging$1.deprecated('device, please use core/js/device directly');
      return device;
    }
  });
  var device$1 = __AMD("core/js/device", device);

  var BrowserFocus = __AMD("core/js/a11y/browserFocus", function (_Backbone$Controller) {
    _inherits(BrowserFocus, _Backbone$Controller);

    var _super = _createSuper(BrowserFocus);

    function BrowserFocus() {
      _classCallCheck(this, BrowserFocus);

      return _super.apply(this, arguments);
    }

    _createClass(BrowserFocus, [{
      key: "initialize",
      value: function initialize(_ref) {
        var a11y = _ref.a11y;
        this.a11y = a11y;
        this._onBlur = this._onBlur.bind(this);
        this._onClick = this._onClick.bind(this);
        this.$body = $('body');
        this.listenTo(Adapt$1, {
          'accessibility:ready': this._attachEventListeners
        });
      }
    }, {
      key: "_attachEventListeners",
      value: function _attachEventListeners() {
        this.$body.on('blur', '*', this._onBlur).on('blur', this._onBlur);
        this.$body[0].addEventListener('click', this._onClick, true);
      }
    }, {
      key: "_onBlur",
      value: function _onBlur(event) {
        var config = this.a11y.config;

        if (!config._isEnabled || !config._options._isFocusNextOnDisabled) {
          return;
        }

        var $element = $(event.target);

        if ($element.is('[data-a11y-force-focus]')) {
          $element.removeAttr('tabindex data-a11y-force-focus');
        }

        if (event.target !== event.currentTarget) {
          return;
        }

        if (!$element.is('[disabled]')) {
          return;
        }

        this.a11y.focusNext($element);
      }
    }, {
      key: "_onClick",
      value: function _onClick(event) {
        var $element = $(event.target);
        var isAriaDisabled = $element.closest('[aria-disabled=true]').length === 1;

        if (isAriaDisabled) {
          event.preventDefault();
          event.stopImmediatePropagation();
        }

        var config = this.a11y.config;

        if (!config._isEnabled || !config._options._isFocusOnClickEnabled) {
          return;
        }

        var $stack = $([].concat(_toConsumableArray($element.toArray()), _toConsumableArray($element.parents().toArray())));
        var $focusable = $stack.filter(config._options._tabbableElements);

        if (!$focusable.length) {
          return;
        }

        $focusable[0].focus();
      }
    }]);

    return BrowserFocus;
  }(Backbone.Controller));

  var FocusOptions = __AMD("core/js/a11y/focusOptions", _createClass(function FocusOptions() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$preventScroll = _ref.preventScroll,
        preventScroll = _ref$preventScroll === void 0 ? false : _ref$preventScroll,
        _ref$defer = _ref.defer,
        defer = _ref$defer === void 0 ? false : _ref$defer;

    _classCallCheck(this, FocusOptions);

    this.preventScroll = preventScroll;
    this.defer = defer;
  }));

  var KeyboardFocusOutline = __AMD("core/js/a11y/keyboardFocusOutline", function (_Backbone$Controller) {
    _inherits(KeyboardFocusOutline, _Backbone$Controller);

    var _super = _createSuper(KeyboardFocusOutline);

    function KeyboardFocusOutline() {
      _classCallCheck(this, KeyboardFocusOutline);

      return _super.apply(this, arguments);
    }

    _createClass(KeyboardFocusOutline, [{
      key: "initialize",
      value: function initialize(_ref) {
        var a11y = _ref.a11y;
        this.a11y = a11y;
        this._onKeyDown = this._onKeyDown.bind(this);
        this.$html = $('html');
        this.showOnKeys = {
          9: true,
          13: true,
          32: true,
          37: true,
          38: true,
          39: true,
          40: true
        };
        this.listenTo(Adapt$1, {
          'accessibility:ready': this._attachEventListeners
        });
      }
    }, {
      key: "_attachEventListeners",
      value: function _attachEventListeners() {
        document.addEventListener('keydown', this._onKeyDown);

        this._start();
      }
    }, {
      key: "_start",
      value: function _start() {
        var config = this.a11y.config;

        if (config._options._isFocusOutlineDisabled) {
          this.$html.addClass('a11y-disable-focusoutline');
          return;
        }

        if (!config._isEnabled || !config._options._isFocusOutlineKeyboardOnlyEnabled) {
          return;
        }

        this.$html.addClass('a11y-disable-focusoutline');
      }
    }, {
      key: "_onKeyDown",
      value: function _onKeyDown(event) {
        var config = this.a11y.config;

        if (config._options._isFocusOutlineDisabled) {
          this.$html.addClass('a11y-disable-focusoutline');
          return;
        }

        if (!config._isEnabled || !config._options._isFocusOutlineKeyboardOnlyEnabled || !this.showOnKeys[event.keyCode]) {
          return;
        }

        var $element = $(event.target);

        if (!$element.is(config._options._tabbableElements) || $element.is(config._options._focusOutlineKeyboardOnlyIgnore)) {
          return;
        }

        this.$html.removeClass('a11y-disable-focusoutline');
      }
    }]);

    return KeyboardFocusOutline;
  }(Backbone.Controller));

  var Log = __AMD("core/js/a11y/log", function (_Backbone$Controller) {
    _inherits(Log, _Backbone$Controller);

    var _super = _createSuper(Log);

    function Log() {
      _classCallCheck(this, Log);

      return _super.apply(this, arguments);
    }

    _createClass(Log, [{
      key: "initialize",
      value: function initialize(_ref) {
        var a11y = _ref.a11y;
        this.a11y = a11y;
        this._warned = {};
      }
    }, {
      key: "_hasWarned",
      value: function _hasWarned(args) {
        var config = this.a11y.config;

        if (!config._options._warnFirstOnly) {
          return false;
        }

        var hash = args.map(String).join(':');

        if (this._warned[hash]) {
          return true;
        }

        this._warned[hash] = true;
        return false;
      }
    }, {
      key: "_canWarn",
      value: function _canWarn() {
        var config = this.a11y.config;
        return Boolean(config._options._warn);
      }
    }, {
      key: "removed",
      value: function removed() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (!this._canWarn) {
          return;
        }

        args = ['A11Y'].concat(args);

        if (this._hasWarned(args)) {
          return;
        }

        logging$1.removed.apply(logging$1, _toConsumableArray(args));
        return this;
      }
    }, {
      key: "deprecated",
      value: function deprecated() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        if (!this._canWarn) {
          return;
        }

        args = ['A11Y'].concat(args);

        if (this._hasWarned(args)) {
          return;
        }

        logging$1.deprecated.apply(logging$1, _toConsumableArray(args));
        return this;
      }
    }]);

    return Log;
  }(Backbone.Controller));

  var Scroll = __AMD("core/js/a11y/scroll", function (_Backbone$Controller) {
    _inherits(Scroll, _Backbone$Controller);

    var _super = _createSuper(Scroll);

    function Scroll() {
      _classCallCheck(this, Scroll);

      return _super.apply(this, arguments);
    }

    _createClass(Scroll, [{
      key: "initialize",
      value: function initialize() {
        this._onTouchStart = this._onTouchStart.bind(this);
        this._onTouchEnd = this._onTouchEnd.bind(this);
        this._onScrollEvent = this._onScrollEvent.bind(this);
        this._onKeyDown = this._onKeyDown.bind(this);
        this._scrollDisabledElements = $([]);
        this.$window = $(window);
        this.$body = $('body');
        this._preventScrollOnKeys = {
          37: true,
          38: true,
          39: true,
          40: true
        };
        this._ignoreKeysOnElementsMatching = 'textarea, input, select';
        this._isRunning = false;
        this._touchStartEventObject = null;
      }
    }, {
      key: "disable",
      value: function disable($elements) {
        $elements = $($elements);
        this._scrollDisabledElements = this._scrollDisabledElements.add($elements);

        this._checkRunning();

        return this;
      }
    }, {
      key: "enable",
      value: function enable($elements) {
        $elements = $($elements);

        if (!$elements.length) {
          this.clear();
          return this;
        }

        this._scrollDisabledElements = this._scrollDisabledElements.not($elements);

        this._checkRunning();

        return this;
      }
    }, {
      key: "clear",
      value: function clear() {
        this._scrollDisabledElements = $([]);

        this._checkRunning();

        return this;
      }
    }, {
      key: "_checkRunning",
      value: function _checkRunning() {
        if (!this._scrollDisabledElements.length) {
          this._stop();

          return;
        }

        this._start();
      }
    }, {
      key: "_start",
      value: function _start() {
        if (this._isRunning) {
          return;
        }

        this._isRunning = true;
        window.addEventListener('touchstart', this._onTouchStart);
        window.addEventListener('touchend', this._onTouchEnd);
        window.addEventListener('touchmove', this._onScrollEvent, {
          passive: false
        });
        window.addEventListener('wheel', this._onScrollEvent, {
          passive: false
        });
        document.addEventListener('wheel', this._onScrollEvent, {
          passive: false
        });
        document.addEventListener('keydown', this._onKeyDown);
      }
    }, {
      key: "_onTouchStart",
      value: function _onTouchStart(event) {
        event = $.event.fix(event);
        this._touchStartEventObject = event;
        return true;
      }
    }, {
      key: "_onTouchEnd",
      value: function _onTouchEnd() {
        this._touchStartEventObject = null;
        return true;
      }
    }, {
      key: "_onScrollEvent",
      value: function _onScrollEvent(event) {
        event = $.event.fix(event);
        return this._preventScroll(event);
      }
    }, {
      key: "_onKeyDown",
      value: function _onKeyDown(event) {
        event = $.event.fix(event);

        if (!this._preventScrollOnKeys[event.keyCode]) {
          return;
        }

        var $target = $(event.target);

        if ($target.is(this._ignoreKeysOnElementsMatching)) {
          return;
        }

        return this._preventScroll(event);
      }
    }, {
      key: "_preventScroll",
      value: function _preventScroll(event) {
        var _event$touches;

        var isGesture = ((_event$touches = event.touches) === null || _event$touches === void 0 ? void 0 : _event$touches.length) > 1;

        if (isGesture) {
          return;
        }

        var $target = $(event.target);

        if (this._scrollDisabledElements.length) {
          var scrollingParent = this._getScrollingParent(event, $target);

          if (scrollingParent.filter(this._scrollDisabledElements).length === 0) {
            this.$window.scroll();
            return;
          }
        }

        event.preventDefault();
        return false;
      }
    }, {
      key: "_getScrollingParent",
      value: function _getScrollingParent(event, $target) {
        var _this$_touchStartEven;

        var isTouchEvent = event.type === 'touchmove';
        var hasTouchStartEvent = (_this$_touchStartEven = this._touchStartEventObject) === null || _this$_touchStartEven === void 0 ? void 0 : _this$_touchStartEven.originalEvent;

        if (isTouchEvent && !hasTouchStartEvent) {
          return $target;
        }

        var directionY = this._getScrollDirection(event);

        if (directionY === 'none') {
          return this.$body;
        }

        var parents = [$target[0]].concat(_toConsumableArray($target.parents()));

        for (var i = 0, l = parents.length; i < l; i++) {
          var $parent = $(parents[i]);

          if ($parent.is('body')) {
            return this.$body;
          }

          if (!this._isScrollable($parent)) {
            continue;
          }

          if (!this._isScrolling($parent, directionY)) {
            continue;
          }

          return $parent;
        }

        return this.$body;
      }
    }, {
      key: "_isScrollable",
      value: function _isScrollable($target) {
        var scrollType = $target.css('overflow-y');

        if (scrollType !== 'auto' && scrollType !== 'scroll') {
          return false;
        }

        var pointerEvents = $target.css('pointer-events');

        if (pointerEvents === 'none') {
          return false;
        }

        return true;
      }
    }, {
      key: "_isScrolling",
      value: function _isScrolling($target, directionY) {
        var scrollTop = Math.ceil($target.scrollTop());
        var innerHeight = $target.outerHeight();
        var scrollHeight = $target[0].scrollHeight;
        var hasScrollingSpace = false;

        switch (directionY) {
          case 'down':
            hasScrollingSpace = scrollTop + innerHeight < scrollHeight;

            if (hasScrollingSpace) {
              return true;
            }

            break;

          case 'up':
            hasScrollingSpace = scrollTop > 0;

            if (hasScrollingSpace) {
              return true;
            }

            break;
        }

        return false;
      }
    }, {
      key: "_getScrollDirection",
      value: function _getScrollDirection(event) {
        var deltaY = this._getScrollDelta(event);

        if (deltaY === 0) {
          return 'none';
        }

        return deltaY > 0 ? 'up' : 'down';
      }
    }, {
      key: "_getScrollDelta",
      value: function _getScrollDelta(event) {
        var deltaY = 0;
        var isTouchEvent = event.type === 'touchmove';
        var originalEvent = event.originalEvent;

        if (isTouchEvent) {
          var startOriginalEvent = this._touchStartEventObject.originalEvent;
          var currentY = originalEvent.pageY;
          var previousY = startOriginalEvent.pageY;

          if (currentY === 0 || currentY === previousY) {
            currentY = originalEvent.touches[0].pageY;
            previousY = startOriginalEvent.touches[0].pageY;
          }

          deltaY = currentY - previousY;
        } else {
          var hasDeltaY = originalEvent.wheelDeltaY || originalEvent.deltaY !== undefined;

          if (hasDeltaY) {
            deltaY = -originalEvent.deltaY;
          } else {
            deltaY = originalEvent.wheelDelta || 0;
          }
        }

        return deltaY;
      }
    }, {
      key: "_stop",
      value: function _stop() {
        if (!this._isRunning) {
          return;
        }

        this._isRunning = false;
        window.removeEventListener('touchstart', this._onTouchStart);
        window.removeEventListener('touchend', this._onTouchEnd);
        window.removeEventListener('touchmove', this._onScrollEvent, {
          passive: false
        });
        window.removeEventListener('wheel', this._onScrollEvent, {
          passive: false
        });
        document.removeEventListener('wheel', this._onScrollEvent, {
          passive: false
        });
        document.removeEventListener('keydown', this._onKeyDown);
      }
    }]);

    return Scroll;
  }(Backbone.Controller));

  var WrapFocus = __AMD("core/js/a11y/wrapFocus", function (_Backbone$Controller) {
    _inherits(WrapFocus, _Backbone$Controller);

    var _super = _createSuper(WrapFocus);

    function WrapFocus() {
      _classCallCheck(this, WrapFocus);

      return _super.apply(this, arguments);
    }

    _createClass(WrapFocus, [{
      key: "initialize",
      value: function initialize(_ref) {
        var a11y = _ref.a11y;
        this.a11y = a11y;

        _.bindAll(this, '_onWrapAround');

        this.listenTo(Adapt$1, {
          'accessibility:ready': this._attachEventListeners
        });
      }
    }, {
      key: "_attachEventListeners",
      value: function _attachEventListeners() {
        var config = this.a11y.config;
        $('body').on('click focus', config._options._focusguard, this._onWrapAround);
      }
    }, {
      key: "_onWrapAround",
      value: function _onWrapAround(event) {
        var config = this.a11y.config;

        if (!config._isEnabled || !config._options._isPopupWrapFocusEnabled) {
          return;
        }

        event.preventDefault();
        event.stopPropagation();
        this.a11y.focusFirst('body', {
          defer: false
        });
      }
    }]);

    return WrapFocus;
  }(Backbone.Controller));

  var Popup = __AMD("core/js/a11y/popup", function (_Backbone$Controller) {
    _inherits(Popup, _Backbone$Controller);

    var _super = _createSuper(Popup);

    function Popup() {
      _classCallCheck(this, Popup);

      return _super.apply(this, arguments);
    }

    _createClass(Popup, [{
      key: "initialize",
      value: function initialize(_ref) {
        var a11y = _ref.a11y;
        this.a11y = a11y;
        this._floorStack = [$('body')];
        this._focusStack = [];
        this._tabIndexes = {};
        this._ariaHiddens = {};
        this._elementUIDIndex = 0;
        this.listenTo(Adapt$1, {
          'popup:opened': function ($element, ignoreInternalTrigger) {
            if (ignoreInternalTrigger) {
              return;
            }

            this.a11y.log.deprecated('Adapt.trigger("popup:opened", $element) is replaced with a11y.popupOpened($element);');
            this.opened($element, true);
          },
          'popup:closed': function ($target, ignoreInternalTrigger) {
            if (ignoreInternalTrigger) {
              return;
            }

            this.a11y.log.deprecated('Adapt.trigger("popup:closed", $target) is replaced with a11y.popupClosed($target);');
            this.closed($target, true);
          }
        });
      }
    }, {
      key: "opened",
      value: function opened($popupElement, silent) {
        $popupElement = $popupElement || $(document.activeElement);

        this._addPopupLayer($popupElement);

        if (!silent) {
          Adapt$1.trigger('popup:opened', $popupElement, true);
        }

        return this;
      }
    }, {
      key: "_addPopupLayer",
      value: function _addPopupLayer($popupElement) {
        var _this = this;

        $popupElement = $($popupElement);
        var config = this.a11y.config;

        if (!config._isEnabled || !config._options._isPopupManagementEnabled || $popupElement.length === 0) {
          return $popupElement;
        }

        this._floorStack.push($popupElement);

        this._focusStack.push($(document.activeElement));

        var $elements = $(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes);
        var $branch = $popupElement.add($popupElement.parents());
        var $siblings = $branch.siblings().filter(config._options._tabbableElementsExcludes);
        $elements = $elements.add($siblings);
        $elements.each(function (index, item) {
          var $item = $(item);

          if (typeof item.a11y_uid === 'undefined') {
            item.a11y_uid = 'UID' + ++_this._elementUIDIndex;
          }

          var elementUID = item.a11y_uid;

          if (_this._tabIndexes[elementUID] === undefined) {
            _this._tabIndexes[elementUID] = [];
          }

          if (_this._ariaHiddens[elementUID] === undefined) {
            _this._ariaHiddens[elementUID] = [];
          }

          var tabindex = $item.attr('tabindex');
          var ariaHidden = $item.attr('aria-hidden');

          _this._tabIndexes[elementUID].push(tabindex === undefined ? '' : tabindex);

          _this._ariaHiddens[elementUID].push(ariaHidden === undefined ? '' : ariaHidden);

          if (config._options._isPopupTabIndexManagementEnabled) {
            $item.attr('tabindex', -1);
          }

          if (config._options._isPopupAriaHiddenManagementEnabled) {
            $item.attr('aria-hidden', true);
          }
        });
        var $items = $popupElement.find(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes);

        if (config._options._isPopupTabIndexManagementEnabled) {
          $items.attr('tabindex', 0);
        }

        if (config._options._isPopupAriaHiddenManagementEnabled) {
          $items.removeAttr('aria-hidden').removeClass('aria-hidden').parents(config._options._ariaHiddenExcludes).removeAttr('aria-hidden').removeClass('aria-hidden');
        }
      }
    }, {
      key: "closed",
      value: function closed($focusElement, silent) {
        var $previousFocusElement = this._removeLastPopupLayer();

        $focusElement = $focusElement || $previousFocusElement || $('body');

        if (!silent) {
          Adapt$1.trigger('popup:closed', $focusElement, true);
        }

        this.a11y.focusFirst($($focusElement), {
          preventScroll: true
        });
        return this;
      }
    }, {
      key: "_removeLastPopupLayer",
      value: function _removeLastPopupLayer() {
        var _this2 = this;

        var config = this.a11y.config;

        if (!config._isEnabled || !config._options._isPopupManagementEnabled) {
          return $(document.activeElement);
        }

        if (this._floorStack.length <= 1) {
          return;
        }

        this._floorStack.pop();

        $(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes).each(function (index, item) {
          var _this2$_tabIndexes$el, _this2$_tabIndexes$el2;

          var $item = $(item);
          var previousTabIndex = '';
          var previousAriaHidden = '';

          if (typeof item.a11y_uid === 'undefined') {
            item.a11y_uid = 'UID' + ++_this2._elementUIDIndex;
          }

          var elementUID = item.a11y_uid;

          if ((_this2$_tabIndexes$el = _this2._tabIndexes[elementUID]) !== null && _this2$_tabIndexes$el !== void 0 && _this2$_tabIndexes$el.length) {
            previousTabIndex = _this2._tabIndexes[elementUID].pop();
            previousAriaHidden = _this2._ariaHiddens[elementUID].pop();
          }

          if ((_this2$_tabIndexes$el2 = _this2._tabIndexes[elementUID]) !== null && _this2$_tabIndexes$el2 !== void 0 && _this2$_tabIndexes$el2.length) {
            delete _this2._tabIndexes[elementUID];
            delete _this2._ariaHiddens[elementUID];
          }

          if (config._options._isPopupTabIndexManagementEnabled) {
            if (previousTabIndex === '') {
              $item.removeAttr('tabindex');
            } else {
              $item.attr({
                tabindex: previousTabIndex
              });
            }
          }

          if (config._options._isPopupAriaHiddenManagementEnabled) {
            if (previousAriaHidden === '') {
              $item.removeAttr('aria-hidden');
            } else {
              $item.attr({
                'aria-hidden': previousAriaHidden
              });
            }
          }
        });
        return this._focusStack.pop();
      }
    }, {
      key: "setCloseTo",
      value: function setCloseTo($focusElement) {
        var $original = this._focusStack.pop();

        this._focusStack.push($focusElement);

        return $original;
      }
    }]);

    return Popup;
  }(Backbone.Controller));

  var defaultAriaLevels = __AMD("core/js/enums/defaultAriaLevels", {
    _menu: 1,
    _menuGroup: 2,
    _menuItem: 2,
    _page: 1,
    _article: 2,
    _block: 3,
    _component: 4,
    _componentItem: 5,
    _notify: 1
  });

  var deprecated = __AMD("core/js/a11y/deprecated", function (a11y) {
    Object.assign($.fn, {
      isFixedPostion: function () {
        a11y.log.removed('$("..").isFixedPostion was unneeded and has been removed, let us know if you need it back.');
        return false;
      },
      a11y_aria_label: function () {
        a11y.log.removed('$("..").a11y_aria_label was incorrect behaviour.');
        return this;
      },
      limitedScrollTo: function () {
        a11y.log.removed('$.limitedScrollTo had no impact on the screen reader cursor.');
        return this;
      },
      a11y_text: function () {
        a11y.log.removed('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
        return this;
      },
      a11y_selected: function () {
        a11y.log.removed('$("..").a11y_selected is removed. Please use aria-live instead.');
        return this;
      },
      a11y_on: function (isOn) {
        a11y.log.deprecated('$("..").a11y_on, use a11y.findTabbable($element); and a11y.toggleAccessible($elements, isAccessible); instead.');
        var $tabbable = a11y.findTabbable(this);
        a11y.toggleAccessible($tabbable, isOn);
        return this;
      },
      a11y_only: function () {
        a11y.log.removed('$("..").a11y_only, use a11y.popupOpened($popupElement); instead.');
        return this;
      },
      scrollDisable: function () {
        if (a11y.config._options._isScrollDisableEnabled === false) {
          return this;
        }

        a11y.log.deprecated('$("..").scrollDisable, use a11y.scrollDisable($elements); instead.');
        a11y.scrollDisable(this);
        return this;
      },
      scrollEnable: function () {
        if (a11y.config._options._isScrollDisableEnabled === false) {
          return this;
        }

        a11y.log.deprecated('$("..").scrollEnable, use a11y.scrollEnable($elements); instead.');
        a11y.scrollEnable(this);
        return this;
      },
      a11y_popup: function () {
        a11y.log.deprecated('$("..").a11y_popup, use a11y.popupOpened($popupElement); instead.');
        return a11y.popupOpened(this);
      },
      a11y_cntrl: function (isOn, withDisabled) {
        a11y.log.deprecated('$("..").a11y_cntrl, use a11y.toggleAccessible($elements, isAccessible); and if needed a11y.toggleEnabled($elements, isEnabled); instead.');
        a11y.toggleAccessible(this, isOn);
        if (withDisabled) a11y.toggleEnabled(this, isOn);
        return this;
      },
      a11y_cntrl_enabled: function (isOn) {
        a11y.log.deprecated('$("..").a11y_cntrl_enabled, use a11y.toggleAccessibleEnabled($elements, isAccessibleEnabled); instead.');
        a11y.toggleAccessibleEnabled(this, isOn);
        return this;
      },
      isReadable: function () {
        a11y.log.deprecated('$("..").isReadable, use a11y.isReadable($element); instead.');
        return a11y.isReadable(this);
      },
      findForward: function (selector) {
        a11y.log.removed('$("..").findForward has been removed as the use cases are very small, let us know if you need it back.');
        return a11y._findFirstForward(this, selector);
      },
      findWalk: function (selector) {
        a11y.log.removed('$("..").findWalk has been removed as the use cases are very small, let us know if you need it back.');
        return a11y._findFindForwardDescendant(this, selector);
      },
      focusNoScroll: function () {
        a11y.log.deprecated('$("..").focusNoScroll, use a11y.focus($element); instead.');
        return a11y.focus(this);
      },
      focusNext: function (returnOnly) {
        a11y.log.deprecated('$("..").focusNext, use a11y.focusNext($element); or if needed a11y.findFirstReadable($element); instead.');

        if (returnOnly) {
          return a11y.findFirstReadable(this);
        }

        return a11y.focusNext(this);
      },
      focusOrNext: function (returnOnly) {
        a11y.log.deprecated('$("..").focusOrNext, use a11y.focusFirst($element); or if needed a11y.findFirstReadable($element); or a11y.isReadable($element); instead.');

        if (returnOnly) {
          if (a11y.isReadable(this)) return this;
          return a11y.findFirstReadable(this);
        }

        return a11y.focusFirst(this);
      },
      a11y_focus: function (dontDefer) {
        a11y.log.deprecated('$("..").a11y_focus, use a11y.focusFirst($element, { defer: true }); instead.');
        a11y.focusFirst(this, {
          defer: !dontDefer
        });
        return this;
      }
    });
    Object.assign($, {
      a11y_alert: function () {
        a11y.log.removed('$.a11y_alert is removed. Please use aria-live instead.');
        return this;
      },
      a11y_update: function () {
        a11y.log.removed('a11y_update is no longer required.');
        return this;
      },
      a11y_text: function (text) {
        a11y.log.removed('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
        return text;
      },
      a11y_on: function (isOn, selector) {
        a11y.log.deprecated('$("..").a11y_on, use a11y.toggleHidden($elements, isHidden); instead.');
        return a11y.toggleHidden(selector, !isOn);
      },
      a11y_popdown: function ($focusTarget) {
        a11y.log.removed('$.a11y_popdown, use a11y.popupClosed($focusTarget); instead.');
        return a11y.popupClosed($focusTarget);
      },
      a11y_focus: function (dontDefer) {
        a11y.log.deprecated('$.a11y_focus, use a11y.focusFirst("body", { defer: true }); instead.');
        a11y.focusFirst('body', {
          defer: !dontDefer
        });
        return this;
      },
      a11y_normalize: function (html) {
        a11y.log.deprecated('$.a11y_normalize, use a11y.normalize("html"); instead.');
        return a11y.normalize(html);
      },
      a11y_remove_breaks: function (html) {
        a11y.log.deprecated('$.a11y_remove_breaks, use a11y.removeBreaks("html"); instead.');
        return a11y.removeBreaks(html);
      }
    });
  });

  var A11y = function (_Backbone$Controller) {
    _inherits(A11y, _Backbone$Controller);

    var _super = _createSuper(A11y);

    function A11y() {
      _classCallCheck(this, A11y);

      return _super.apply(this, arguments);
    }

    _createClass(A11y, [{
      key: "defaults",
      value: function defaults() {
        return {
          _isFocusOutlineKeyboardOnlyEnabled: true,
          _isFocusOutlineDisabled: false,
          _isFocusAssignmentEnabled: true,
          _isFocusOnClickEnabled: true,
          _isFocusNextOnDisabled: true,
          _isScrollDisableEnabled: true,
          _isAriaHiddenManagementEnabled: true,
          _isPopupManagementEnabled: true,
          _isPopupWrapFocusEnabled: true,
          _isPopupAriaHiddenManagementEnabled: true,
          _isPopupTabIndexManagementEnabled: true,
          _ariaHiddenExcludes: ':not(#wrapper):not(body)',
          _tabbableElements: 'a,button,input,select,textarea,[tabindex]:not([data-a11y-force-focus])',
          _focusOutlineKeyboardOnlyIgnore: 'input,textarea',
          _tabbableElementsExcludes: ':not(.a11y-ignore):not([data-a11y-force-focus])',
          _focusableElements: 'a,button,input,select,textarea,[tabindex],label',
          _readableElements: '[role=heading],[aria-label],[aria-labelledby],[alt]',
          _focusForwardElementsExcludes: ':not([aria-labelledby][role=dialog],[aria-labelledby][role=main],[aria-labelledby][role=region],[aria-labelledby][role=radiogroup],[aria-labelledby][role=group],[aria-labelledby][role=tablist],[aria-labelledby][role=list],[aria-labelledby][role=tree],[aria-labelledby][role=treegrid],[aria-labelledby][role=table],[aria-labelledby][role=grid][aria-labelledby],[role=menu],[aria-labelledby][role=rowgroup])',
          _focusguard: '.a11y-focusguard',
          _wrapStyleElements: 'b,i,abbr,strong,em,small,sub,sup,ins,del,mark,zw,nb',
          _warnFirstOnly: true,
          _warn: true
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.isFocusable = this.isFocusable.bind(this);
        this.isReadable = this.isReadable.bind(this);
        this.isTabbable = this.isTabbable.bind(this);
        this.$html = $('html');
        this._htmlCharRegex = /&.*;/g;
        this.config = null;
        this._browserFocus = new BrowserFocus({
          a11y: this
        });
        this._keyboardFocusOutline = new KeyboardFocusOutline({
          a11y: this
        });
        this._wrapFocus = new WrapFocus({
          a11y: this
        });
        this._popup = new Popup({
          a11y: this
        });
        this._scroll = new Scroll({
          a11y: this
        });
        this.log = new Log({
          a11y: this
        });
        deprecated(this);

        this._removeLegacyElements();

        this.listenToOnce(Adapt$1, {
          'configModel:dataLoaded': this._onConfigDataLoaded,
          'navigationView:postRender': this._removeLegacyElements
        }, this);
        Adapt$1.on('device:changed', this._setupNoSelect);
        this.listenTo(Adapt$1, {
          'router:location': this._onNavigationStart,
          'contentObjectView:ready router:plugin': this._onNavigationEnd
        });
      }
    }, {
      key: "_onConfigDataLoaded",
      value: function _onConfigDataLoaded() {
        this.config = Adapt$1.config.get('_accessibility');
        this.config._isActive = false;
        this.config._options = _.defaults(this.config._options || {}, this.defaults());
        offlineStorage$1.set('a11y', false);
        this.$html.toggleClass('has-accessibility', this.isEnabled());

        this._setupNoSelect();

        this._addFocuserDiv();

        if (this._isReady) {
          return;
        }

        this._isReady = true;
        Adapt$1.trigger('accessibility:ready');
      }
    }, {
      key: "_setupNoSelect",
      value: function _setupNoSelect() {
        var _this$config,
            _this = this;

        if (!((_this$config = this.config) !== null && _this$config !== void 0 && _this$config._disableTextSelectOnClasses)) {
          return;
        }

        var classes = this.config._disableTextSelectOnClasses.split(' ');

        var isMatch = classes.some(function (className) {
          return _this.$html.is(className);
        });
        this.$html.toggleClass('u-no-select', isMatch);
      }
    }, {
      key: "_addFocuserDiv",
      value: function _addFocuserDiv() {
        if ($('#a11y-focuser').length) {
          return;
        }

        $('body').append($('<div id="a11y-focuser" class="a11y-ignore" tabindex="-1">&nbsp;</div>'));
      }
    }, {
      key: "_removeLegacyElements",
      value: function _removeLegacyElements() {
        var $legacyElements = $('body').children('#accessibility-toggle, #accessibility-instructions');
        var $navigationElements = $('.nav').find('#accessibility-toggle, #accessibility-instructions');

        if (!$legacyElements.length && !$navigationElements.length) {
          return;
        }

        logging$1.warn('REMOVED: #accessibility-toggle and #accessibility-instructions have been removed. Please remove them from all of your .html files.');
        $legacyElements.remove();
        $navigationElements.remove();
      }
    }, {
      key: "_onNavigationStart",
      value: function _onNavigationStart() {
        var _this2 = this;

        if (!this.isEnabled()) {
          return;
        }

        _.defer(function () {
          return _this2.toggleHidden('.contentobject', true);
        });
      }
    }, {
      key: "_onNavigationEnd",
      value: function _onNavigationEnd(view) {
        var _view$model;

        if ((view === null || view === void 0 ? void 0 : (_view$model = view.model) === null || _view$model === void 0 ? void 0 : _view$model.get('_id')) !== location$1._currentId || !this.isEnabled()) {
          return;
        }

        this.toggleHidden('.contentobject', false);
      }
    }, {
      key: "isActive",
      value: function isActive() {
        this.log.removed('Accessibility is now always active when enabled. Please unify your user experiences.');
        return false;
      }
    }, {
      key: "isEnabled",
      value: function isEnabled() {
        var _this$config2;

        return (_this$config2 = this.config) === null || _this$config2 === void 0 ? void 0 : _this$config2._isEnabled;
      }
    }, {
      key: "ariaLevel",
      value: function ariaLevel() {
        var defaultLevelOrType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var overrideLevelOrType = arguments.length > 1 ? arguments[1] : undefined;
        var cfg = Adapt$1.config.get('_accessibility');

        if (overrideLevelOrType) {
          defaultLevelOrType = overrideLevelOrType;
        }

        if (!isNaN(defaultLevelOrType)) {
          return defaultLevelOrType;
        }

        if (_.isString(defaultLevelOrType)) {
          var _cfg$_ariaLevels, _ariaLevels;

          var ariaLevels = (_cfg$_ariaLevels = cfg._ariaLevels) !== null && _cfg$_ariaLevels !== void 0 ? _cfg$_ariaLevels : defaultAriaLevels;
          return (_ariaLevels = ariaLevels === null || ariaLevels === void 0 ? void 0 : ariaLevels['_' + defaultLevelOrType]) !== null && _ariaLevels !== void 0 ? _ariaLevels : defaultLevelOrType;
        }

        return defaultLevelOrType;
      }
    }, {
      key: "toggleHidden",
      value: function toggleHidden($elements) {
        var isHidden = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        $elements = $($elements);
        var config = this.config;

        if (!config._isEnabled || !config._options._isAriaHiddenManagementEnabled) {
          return this;
        }

        if (isHidden === true) {
          $elements.attr('aria-hidden', true);
        } else {
          $elements.removeAttr('aria-hidden');
        }

        return this;
      }
    }, {
      key: "toggleAccessibleEnabled",
      value: function toggleAccessibleEnabled($elements, isAccessibleEnabled) {
        this.toggleAccessible($elements, isAccessibleEnabled);
        this.toggleEnabled($elements, isAccessibleEnabled);
        return this;
      }
    }, {
      key: "toggleAccessible",
      value: function toggleAccessible($elements) {
        var isReadable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        $elements = $($elements);
        var config = this.config;

        if (!config._isEnabled || !config._options._isAriaHiddenManagementEnabled || $elements.length === 0) {
          return this;
        }

        if (!isReadable) {
          $elements.attr({
            tabindex: '-1',
            'aria-hidden': 'true'
          }).addClass('aria-hidden');
        } else {
          $elements.removeAttr('aria-hidden tabindex').removeClass('aria-hidden');
          $elements.parents(config._options._ariaHiddenExcludes).removeAttr('aria-hidden').removeClass('aria-hidden');
        }

        return this;
      }
    }, {
      key: "toggleEnabled",
      value: function toggleEnabled($elements) {
        var isEnabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        $elements = $($elements);

        if ($elements.length === 0) {
          return this;
        }

        if (!isEnabled) {
          $elements.attr({
            tabindex: '-1',
            'aria-disabled': 'true'
          }).addClass('is-disabled');
        } else {
          $elements.removeAttr('aria-disabled tabindex').removeClass('is-disabled');
        }

        return this;
      }
    }, {
      key: "findFirstTabbable",
      value: function findFirstTabbable($element) {
        $element = $($element).first();
        return this._findFirstForward($element, this.isTabbable);
      }
    }, {
      key: "findFirstReadable",
      value: function findFirstReadable($element) {
        $element = $($element).first();
        return this._findFirstForward($element, this.isReadable);
      }
    }, {
      key: "findFirstFocusable",
      value: function findFirstFocusable($element) {
        $element = $($element).first();
        return this._findFirstForward($element, this.isFocusable);
      }
    }, {
      key: "findTabbable",
      value: function findTabbable($element) {
        var config = this.config;
        return $($element).find(config._options._tabbableElements).filter(config._options._tabbableElementsExcludes);
      }
    }, {
      key: "findReadable",
      value: function findReadable($element) {
        var _this3 = this;

        return $($element).find('*').filter(function (index, element) {
          return _this3.isReadable(element);
        });
      }
    }, {
      key: "findFocusable",
      value: function findFocusable($element) {
        var _this4 = this;

        return $($element).find('*').filter(function (index, element) {
          return _this4.isFocusable(element);
        });
      }
    }, {
      key: "isTabbable",
      value: function isTabbable($element) {
        var config = this.config;
        var value = $($element).is(config._options._tabbableElements).is(config._options._tabbableElementsExcludes);

        if (!value) {
          return null;
        }

        return value;
      }
    }, {
      key: "isReadable",
      value: function isReadable($element) {
        var checkParents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var config = this.config;
        $element = $($element).first();
        var $branch = checkParents ? $element.add($element.parents()) : $element;
        var isNotVisible = $branch.toArray().some(function (item) {
          var $item = $(item);
          return $item.css('display') === 'none' || $item.css('visibility') === 'hidden' || $item.attr('aria-hidden') === 'true';
        });

        if (isNotVisible) {
          return false;
        }

        var hasNativeFocusOrIsScreenReadable = $element.is(config._options._focusableElements) || $element.is(config._options._readableElements);

        if (hasNativeFocusOrIsScreenReadable) {
          return true;
        }

        var childNodes = $element[0].childNodes;

        for (var c = 0, cl = childNodes.length; c < cl; c++) {
          var childNode = childNodes[c];
          var isTextNode = childNode.nodeType === 3;

          if (!isTextNode) {
            continue;
          }

          var isOnlyWhiteSpace = /^\s*$/.test(childNode.nodeValue);

          if (isOnlyWhiteSpace) {
            continue;
          }

          return true;
        }

        return null;
      }
    }, {
      key: "isFocusable",
      value: function isFocusable($element) {
        var checkParents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var config = this.config;
        $element = $($element).first();
        if (!$element.is(config._options._focusForwardElementsExcludes)) return null;
        return this.isReadable($element, checkParents);
      }
    }, {
      key: "_findFirstForward",
      value: function _findFirstForward($element, selector) {
        var _this5 = this;

        $element = $($element).first();
        var iterator;

        switch (_typeof(selector)) {
          case 'string':
            iterator = function ($tag) {
              return $tag.is(selector) || undefined;
            };

            break;

          case 'function':
            iterator = selector;
            break;

          case 'undefined':
            iterator = Boolean;
        }

        if ($element.length === 0) {
          return $element.not('*');
        }

        var $found = this._findFirstForwardDescendant($element, iterator);

        if ($found.length) {
          return $found;
        }

        $element.nextAll().toArray().some(function (sibling) {
          var $sibling = $(sibling);
          var value = iterator($sibling);

          if (value === false) {
            return false;
          }

          if (value) {
            $found = $sibling;
            return true;
          }

          $found = _this5._findFirstForwardDescendant($sibling, iterator);
          return Boolean($found.length);
        });

        if ($found.length) {
          return $found;
        }

        $element.add($element.parents()).toArray().reverse().some(function (parent) {
          var $parent = $(parent);

          if (iterator($parent) === false) {
            return false;
          }

          return $parent.nextAll().toArray().some(function (sibling) {
            var $sibling = $(sibling);
            var value = iterator($sibling);

            if (value === false) {
              return false;
            }

            if (value) {
              $found = $sibling;
              return true;
            }

            $found = _this5._findFirstForwardDescendant($sibling, iterator);
            return Boolean($found.length);
          });
        });

        if (!$found.length) {
          return $element.not('*');
        }

        return $found;
      }
    }, {
      key: "_findFirstForwardDescendant",
      value: function _findFirstForwardDescendant($element, selector) {
        $element = $($element).first();
        var iterator;

        switch (_typeof(selector)) {
          case 'string':
            iterator = function ($tag) {
              return $tag.is(selector) || undefined;
            };

            break;

          case 'function':
            iterator = selector;
            break;

          case 'undefined':
            iterator = Boolean;
        }

        var $notFound = $element.not('*');

        if ($element.length === 0) {
          return $notFound;
        }

        var stack = [{
          item: $element[0],
          value: undefined
        }];
        var stackIndexPosition = 0;
        var childIndexPosition = stackIndexPosition + 1;

        do {
          var stackEntry = stack[stackIndexPosition];
          var $stackItem = $(stackEntry.item);

          switch (stackEntry.value) {
            case true:
              return $stackItem;

            case false:
              return $notFound;
          }

          $stackItem.children().toArray().forEach(function (item) {
            var $item = $(item);
            var value = iterator($item);

            if (value === false) {
              return;
            }

            stack.splice(childIndexPosition++, 0, {
              item: item,
              value: value
            });
          });
          stackIndexPosition++;
          childIndexPosition = stackIndexPosition + 1;
        } while (stackIndexPosition < stack.length);

        return $notFound;
      }
    }, {
      key: "focusNext",
      value: function focusNext($element, options) {
        options = new FocusOptions(options);
        $element = $($element).first();
        $element = this.findFirstFocusable($element);
        this.focus($element, options);
        return this;
      }
    }, {
      key: "focusFirst",
      value: function focusFirst($element, options) {
        options = new FocusOptions(options);
        $element = $($element).first();

        if (this.isReadable($element)) {
          this.focus($element, options);
          return $element;
        }

        $element = this.findFirstFocusable($element);
        this.focus($element, options);
        return $element;
      }
    }, {
      key: "focus",
      value: function focus($element, options) {
        options = new FocusOptions(options);
        $element = $($element).first();
        var config = this.config;

        if (!config._isEnabled || !config._options._isFocusAssignmentEnabled || $element.length === 0) {
          return this;
        }

        function perform() {
          if ($element.attr('tabindex') === undefined) {
            $element.attr({
              tabindex: '0',
              'data-a11y-force-focus': 'true'
            });
          }

          if (options.preventScroll) {
            var y = $(window).scrollTop();

            try {
              $element[0].focus({
                preventScroll: true
              });
            } catch (e) {}

            switch (device$1.browser) {
              case 'internet explorer':
              case 'microsoft edge':
              case 'safari':
                window.scrollTo(null, y);
            }
          } else {
            $element[0].focus();
          }
        }

        if (options.defer) {
          _.defer(perform);
        } else {
          perform();
        }

        return this;
      }
    }, {
      key: "normalize",
      value: function normalize(htmls) {
        htmls = Array.prototype.slice.call(arguments).filter(Boolean).filter(_.isString).join(' ');
        var text = $('<div>' + htmls + '</div>').text();
        return text.replace(this._htmlCharRegex, '');
      }
    }, {
      key: "removeBreaks",
      value: function removeBreaks(htmls) {
        var _this6 = this;

        htmls = Array.prototype.slice.call(arguments).filter(Boolean).filter(_.isString).join(' ');
        var $div = $('<div>' + htmls + '</div>');
        var stack = [$div[0]];
        var stackIndex = 0;
        var outputs = [];

        do {
          if (stack[stackIndex].childNodes.length) {
            var nodes = stack[stackIndex].childNodes;
            var usable = nodes.filter(function (node) {
              var isTextNode = node.nodeType === 3;

              if (isTextNode) {
                return true;
              }

              var isStyleElement = $(node).is(_this6.config._options._wrapStyleElements);

              if (isStyleElement) {
                return true;
              }

              return false;
            });
            outputs.push.apply(outputs, usable);
            stack.push.apply(stack, nodes);
          }

          stackIndex++;
        } while (stackIndex < stack.length);

        var rtnText = '';
        outputs.forEach(function (item) {
          rtnText += item.outerHTML || item.textContent;
        });
        return rtnText;
      }
    }, {
      key: "scrollEnable",
      value: function scrollEnable($elements) {
        this._scroll.enable($elements);

        return this;
      }
    }, {
      key: "scrollDisable",
      value: function scrollDisable($elements) {
        this._scroll.disable($elements);

        return this;
      }
    }, {
      key: "popupOpened",
      value: function popupOpened($popupElement) {
        this._popup.opened($popupElement);

        return this;
      }
    }, {
      key: "popupClosed",
      value: function popupClosed($focusElement) {
        this._popup.closed($focusElement);

        return this;
      }
    }, {
      key: "setPopupCloseTo",
      value: function setPopupCloseTo($focusElement) {
        return this._popup.setCloseTo($focusElement);
      }
    }]);

    return A11y;
  }(Backbone.Controller);

  var a11y = new A11y();
  Object.defineProperty(Adapt$1, 'a11y', {
    get: function () {
      logging$1.deprecated('Adapt.a11y, please use core/js/a11y directly');
      return a11y;
    }
  });
  var a11y$1 = __AMD("core/js/a11y", a11y);

  Object.defineProperty(Adapt$1, 'accessibility', {
    get: function () {
      a11y$1.log.deprecated('Adapt.accessibility has moved to a11y');
      return a11y$1;
    }
  });

  var AdaptCollection = __AMD("core/js/collections/adaptCollection", function (_Backbone$Collection) {
    _inherits(AdaptCollection, _Backbone$Collection);

    var _super = _createSuper(AdaptCollection);

    function AdaptCollection() {
      _classCallCheck(this, AdaptCollection);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptCollection, [{
      key: "initialize",
      value: function initialize(models, options) {
        this.once('reset', this.loadedData, this);
      }
    }, {
      key: "loadedData",
      value: function loadedData() {
        Adapt$1.trigger('adaptCollection:dataLoaded');
      }
    }]);

    return AdaptCollection;
  }(Backbone.Collection));

  var BuildModel = __AMD("core/js/models/buildModel", function (_LockingModel) {
    _inherits(BuildModel, _LockingModel);

    var _super = _createSuper(BuildModel);

    function BuildModel() {
      _classCallCheck(this, BuildModel);

      return _super.apply(this, arguments);
    }

    _createClass(BuildModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          jsonext: 'json'
        };
      }
    }, {
      key: "initialize",
      value: function initialize(attrs, options) {
        var _this = this;

        this.url = options.url;
        this.fetch({
          success: function () {
            _this.isLoaded = true;
            Adapt$1.trigger('buildModel:dataLoaded');
          },
          error: function () {
            console.log('Unable to load adapt/js/build.js');
            Adapt$1.trigger('buildModel:dataLoaded');
          }
        });
      }
    }, {
      key: "isFrameworkVersion",
      value: function isFrameworkVersion(version) {
        return semver__default["default"].satisfies(this.get('package').version, version, {
          includePrerelease: true
        });
      }
    }, {
      key: "isPluginInstalled",
      value: function isPluginInstalled(name) {
        var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '*';
        var plugin = this.get('plugins').find(function (plugin) {
          if (plugin.name !== name) return false;
          return semver__default["default"].satisfies(plugin.version, version, {
            includePrerelease: true
          });
        });
        return Boolean(plugin);
      }
    }, {
      key: "whenReady",
      value: function whenReady() {
        if (this.isLoaded) return Promise.resolve();
        return new Promise(function (resolve) {
          Adapt$1.once('buildModel:dataLoaded', resolve);
        });
      }
    }]);

    return BuildModel;
  }(LockingModel));

  var ConfigModel = __AMD("core/js/models/configModel", function (_LockingModel) {
    _inherits(ConfigModel, _LockingModel);

    var _super = _createSuper(ConfigModel);

    function ConfigModel() {
      _classCallCheck(this, ConfigModel);

      return _super.apply(this, arguments);
    }

    _createClass(ConfigModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          screenSize: {
            large: 900,
            medium: 760,
            small: 520
          },
          _forceRouteLocking: false,
          _canLoadData: true,
          _disableAnimation: false
        };
      }
    }, {
      key: "setValuesFromURLParams",
      value: function setValuesFromURLParams() {
        var _this = this;

        var paramMappings = {
          dir: '_defaultDirection',
          lang: '_defaultLanguage'
        };
        var params = new URLSearchParams(window.location.search);
        Object.entries(paramMappings).forEach(function (_ref) {
          var _Adapt$build$get;

          var _ref2 = _slicedToArray(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];

          var passedVal = params.get(key);
          if (!passedVal) return;
          if (key === 'lang' && ((_Adapt$build$get = Adapt$1.build.get('availableLanguageNames')) === null || _Adapt$build$get === void 0 ? void 0 : _Adapt$build$get.includes(passedVal)) === false) return;

          _this.set(value, passedVal);
        });
      }
    }, {
      key: "initialize",
      value: function initialize(attrs, options) {
        var _this2 = this;

        this.url = options.url;
        this.fetch({
          success: function () {
            _this2.setValuesFromURLParams();

            Adapt$1.trigger('offlineStorage:prepare');
            wait$1.queue(function () {
              Adapt$1.trigger('configModel:dataLoaded');
              if (!_this2.get('_canLoadData')) return;
              Adapt$1.trigger('configModel:loadCourseData');
            });
          },
          error: function () {
            return console.log('Unable to load course/config.json');
          }
        });
      }
    }, {
      key: "loadData",
      value: function loadData() {}
    }]);

    return ConfigModel;
  }(LockingModel));

  var Data = function (_AdaptCollection) {
    _inherits(Data, _AdaptCollection);

    var _super = _createSuper(Data);

    function Data() {
      _classCallCheck(this, Data);

      return _super.apply(this, arguments);
    }

    _createClass(Data, [{
      key: "model",
      value: function model(json) {
        var ModelClass = components$1.getModelClass(json);

        if (!ModelClass) {
          return new LockingModel(json);
        }

        return new ModelClass(json, {
          parse: true
        });
      }
    }, {
      key: "initialize",
      value: function initialize() {
        _get(_getPrototypeOf(Data.prototype), "initialize", this).call(this);

        this.on({
          add: this.onAdded,
          remove: this.onRemoved
        });
      }
    }, {
      key: "init",
      value: function () {
        var _init = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.reset();
                  this._byAdaptID = {};
                  Adapt$1.build = new BuildModel(null, {
                    url: 'adapt/js/build.min.js',
                    reset: true
                  });
                  _context.next = 5;
                  return Adapt$1.build.whenReady();

                case 5:
                  $('html').attr('data-adapt-framework-version', Adapt$1.build.get('package').version);
                  this.loadConfigData();

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function init() {
          return _init.apply(this, arguments);
        }

        return init;
      }()
    }, {
      key: "onAdded",
      value: function onAdded(model) {
        this._byAdaptID[model.get('_id')] = model;
      }
    }, {
      key: "onRemoved",
      value: function onRemoved(model) {
        delete this._byAdaptID[model.get('_id')];
      }
    }, {
      key: "loadConfigData",
      value: function loadConfigData() {
        Adapt$1.config = new ConfigModel(null, {
          url: 'course/config.' + Adapt$1.build.get('jsonext'),
          reset: true
        });
        this.listenToOnce(Adapt$1, 'configModel:loadCourseData', this.onLoadCourseData);
        this.listenTo(Adapt$1.config, {
          'change:_activeLanguage': this.onLanguageChange,
          'change:_defaultDirection': this.onDirectionChange
        });
      }
    }, {
      key: "onDirectionChange",
      value: function onDirectionChange(model, direction) {
        if (direction === 'rtl') {
          $('html').removeClass('dir-ltr').addClass('dir-rtl').attr('dir', 'rtl');
        } else {
          $('html').removeClass('dir-rtl').addClass('dir-ltr').attr('dir', 'ltr');
        }
      }
    }, {
      key: "onLoadCourseData",
      value: function onLoadCourseData() {
        if (!Adapt$1.config.get('_activeLanguage')) {
          Adapt$1.config.set('_activeLanguage', Adapt$1.config.get('_defaultLanguage'));
          return;
        }

        this.loadCourseData();
      }
    }, {
      key: "onLanguageChange",
      value: function onLanguageChange(model, language) {
        offlineStorage$1.set('lang', language);

        if (Adapt$1.get('_isStarted')) {
          Adapt$1.set('_isStarted', false);
        }

        this.loadCourseData(language);
      }
    }, {
      key: "loadCourseData",
      value: function () {
        var _loadCourseData = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(newLanguage) {
          var language, courseFolder;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  language = Adapt$1.config.get('_activeLanguage');
                  courseFolder = 'course/' + language + '/';
                  $('html').attr('lang', language);
                  _context2.next = 5;
                  return this.loadManifestFiles(courseFolder);

                case 5:
                  _context2.next = 7;
                  return this.triggerDataLoaded();

                case 7:
                  _context2.next = 9;
                  return this.triggerDataReady(newLanguage);

                case 9:
                  this.triggerInit();

                case 10:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function loadCourseData(_x) {
          return _loadCourseData.apply(this, arguments);
        }

        return loadCourseData;
      }()
    }, {
      key: "getJSON",
      value: function getJSON(path) {
        return new Promise(function (resolve, reject) {
          $.getJSON(path, function (data) {
            data.__path__ = path;
            resolve(data);
          }).fail(reject);
        });
      }
    }, {
      key: "loadManifestFiles",
      value: function () {
        var _loadManifestFiles = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(languagePath) {
          var _this = this;

          var manifestPath, manifest, allFileData, allModelData, course;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  this.trigger('loading');
                  this.reset();
                  manifestPath = languagePath + 'language_data_manifest.js';
                  _context3.prev = 3;
                  _context3.next = 6;
                  return this.getJSON(manifestPath);

                case 6:
                  manifest = _context3.sent;
                  _context3.next = 13;
                  break;

                case 9:
                  _context3.prev = 9;
                  _context3.t0 = _context3["catch"](3);
                  manifest = ['course.json', 'contentObjects.json', 'articles.json', 'blocks.json', 'components.json'];
                  logging$1.warnOnce("Manifest path '".concat(manifestPath, " not found. Using traditional files: ").concat(manifest.join(', ')));

                case 13:
                  _context3.next = 15;
                  return Promise.all(manifest.map(function (filePath) {
                    return _this.getJSON("".concat(languagePath).concat(filePath));
                  }));

                case 15:
                  allFileData = _context3.sent;
                  allModelData = allFileData.reduce(function (result, fileData) {
                    if (Array.isArray(fileData)) {
                      result.push.apply(result, _toConsumableArray(fileData));
                    } else if (fileData instanceof Object) {
                      result.push(fileData);
                    } else {
                      logging$1.warnOnce("File data isn't an array or object: ".concat(fileData.__path__));
                    }

                    return result;
                  }, []);
                  course = allModelData.find(function (modelData) {
                    return modelData._type === 'course';
                  });

                  if (course) {
                    _context3.next = 20;
                    break;
                  }

                  throw new Error('Expected a model data with "_type": "course", none found.');

                case 20:
                  Adapt$1.trigger('courseModel:dataLoading');
                  Adapt$1.course = this.push(course);
                  Adapt$1.trigger('courseModel:dataLoaded');
                  allModelData.forEach(function (modelData) {
                    if (modelData._type === 'course') {
                      return;
                    }

                    _this.push(modelData);
                  });
                  this.trigger('reset');
                  this.trigger('loaded');
                  _context3.next = 28;
                  return wait$1.queue();

                case 28:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this, [[3, 9]]);
        }));

        function loadManifestFiles(_x2) {
          return _loadManifestFiles.apply(this, arguments);
        }

        return loadManifestFiles;
      }()
    }, {
      key: "triggerDataLoaded",
      value: function () {
        var _triggerDataLoaded = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  logging$1.debug('Firing app:dataLoaded');

                  try {
                    this.forEach(function (model) {
                      var _model$setupModel;

                      return (_model$setupModel = model.setupModel) === null || _model$setupModel === void 0 ? void 0 : _model$setupModel.call(model);
                    });
                    Adapt$1.trigger('app:dataLoaded');
                  } catch (e) {
                    logging$1.error('Error during app:dataLoading trigger', e);
                  }

                  _context4.next = 4;
                  return wait$1.queue();

                case 4:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function triggerDataLoaded() {
          return _triggerDataLoaded.apply(this, arguments);
        }

        return triggerDataLoaded;
      }()
    }, {
      key: "triggerDataReady",
      value: function () {
        var _triggerDataReady = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(newLanguage) {
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  if (!newLanguage) {
                    _context5.next = 4;
                    break;
                  }

                  Adapt$1.trigger('app:languageChanged', newLanguage);
                  _context5.next = 4;
                  return wait$1.queue();

                case 4:
                  logging$1.debug('Firing app:dataReady');

                  try {
                    Adapt$1.trigger('app:dataReady');
                  } catch (e) {
                    logging$1.error('Error during app:dataReady trigger', e);
                  }

                  _context5.next = 8;
                  return wait$1.queue();

                case 8:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5);
        }));

        function triggerDataReady(_x3) {
          return _triggerDataReady.apply(this, arguments);
        }

        return triggerDataReady;
      }()
    }, {
      key: "triggerInit",
      value: function triggerInit() {
        this.isReady = true;
        this.trigger('ready');
      }
    }, {
      key: "whenReady",
      value: function whenReady() {
        var _this2 = this;

        if (this.isReady) return Promise.resolve();
        return new Promise(function (resolve) {
          _this2.once('ready', resolve);
        });
      }
    }, {
      key: "findById",
      value: function findById(id) {
        var model = this._byAdaptID[id];

        if (!model) {
          console.warn("data.findById() unable to find id: ".concat(id));
          return;
        }

        return model;
      }
    }, {
      key: "findViewByModelId",
      value: function findViewByModelId(id) {
        var model = this.findById(id);
        if (!model) return;
        if (model === Adapt$1.parentView.model) return Adapt$1.parentView;
        var idPathToView = [id];
        var currentLocationId = location$1._currentId;
        var currentLocationModel = model.getAncestorModels().find(function (model) {
          var modelId = model.get('_id');
          if (modelId === currentLocationId) return true;
          idPathToView.unshift(modelId);
          return false;
        });

        if (!currentLocationModel) {
          return console.warn("data.findViewByModelId() unable to find view for model id: ".concat(id));
        }

        var foundView = idPathToView.reduce(function (view, currentId) {
          if (!view) return null;
          var childViews = view.getChildViews();
          return childViews === null || childViews === void 0 ? void 0 : childViews.find(function (view) {
            return view.model.get('_id') === currentId;
          });
        }, Adapt$1.parentView);
        return foundView;
      }
    }, {
      key: "findByTrackingPosition",
      value: function findByTrackingPosition(trackingPosition) {
        var _trackingPosition = _slicedToArray(trackingPosition, 2),
            trackingId = _trackingPosition[0],
            indexInTrackingIdDescendants = _trackingPosition[1];

        var trackingIdModel = this.find(function (model) {
          return model.get('_trackingId') === trackingId;
        });

        if (!trackingIdModel) {
          console.warn("data.findByTrackingPosition() unable to find trackingPosition: ".concat(trackingPosition));
          return;
        }

        if (indexInTrackingIdDescendants >= 0) {
          var trackingIdDescendants = [trackingIdModel].concat(trackingIdModel.getAllDescendantModels(true));
          return trackingIdDescendants[indexInTrackingIdDescendants];
        }

        var trackingIdAncestors = trackingIdModel.getAncestorModels();
        var ancestorDistance = Math.abs(indexInTrackingIdDescendants) - 1;
        return trackingIdAncestors[ancestorDistance];
      }
    }]);

    return Data;
  }(AdaptCollection);

  var data = new Data();
  data.findById = data.findById.bind(data);
  data.findViewByModelId = data.findViewByModelId.bind(data);
  data.findByTrackingPosition = data.findByTrackingPosition.bind(data);
  Object.defineProperties(Adapt$1, {
    data: {
      get: function () {
        logging$1.deprecated('Adapt.data, please use core/js/data directly');
        return data;
      }
    },
    findById: {
      get: function () {
        logging$1.deprecated('Adapt.findById, please use data.findById directly');
        return data.findById;
      }
    },
    findViewByModelId: {
      get: function () {
        logging$1.deprecated('Adapt.findViewByModelId, please use data.findViewByModelId directly');
        return data.findViewByModelId;
      }
    },
    findByTrackingPosition: {
      get: function () {
        logging$1.deprecated('Adapt.findByTrackingPosition, please use data.findByTrackingPosition directly');
        return data.findByTrackingPosition;
      }
    }
  });
  var data$1 = __AMD("core/js/data", data);

  var COMPLETION_STATE = ENUM(['INCOMPLETE', 'COMPLETED', 'PASSED', 'FAILED']);
  var COMPLETION_STATE$1 = __AMD("core/js/enums/completionStateEnum", COMPLETION_STATE);

  var Tracking = function (_Backbone$Controller) {
    _inherits(Tracking, _Backbone$Controller);

    var _super = _createSuper(Tracking);

    function Tracking() {
      _classCallCheck(this, Tracking);

      return _super.apply(this, arguments);
    }

    _createClass(Tracking, [{
      key: "initialize",
      value: function initialize() {
        this._config = {
          _requireContentCompleted: true,
          _requireAssessmentCompleted: false,
          _shouldSubmitScore: false
        };
        this._assessmentState = null;
        Adapt$1.once('configModel:dataLoaded', this.loadConfig.bind(this));
        Adapt$1.on('app:dataReady', this.setupEventListeners.bind(this));
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(Adapt$1, {
          'assessment:complete': this.onAssessmentComplete,
          'assessment:restored': this.onAssessmentRestored
        });

        if (this._config._requireContentCompleted) {
          this.listenTo(Adapt$1.course, 'change:_isComplete', this.checkCompletion);
        }
      }
    }, {
      key: "onAssessmentComplete",
      value: function onAssessmentComplete(assessmentState) {
        this._assessmentState = assessmentState;
        this.submitScore();

        if (this._config._requireAssessmentCompleted) {
          this.checkCompletion();
        }
      }
    }, {
      key: "submitScore",
      value: function submitScore() {
        if (!this._config._shouldSubmitScore) return;

        if (this._assessmentState.isPercentageBased) {
          offlineStorage$1.set('score', this._assessmentState.scoreAsPercent, 0, 100);
          return;
        }

        offlineStorage$1.set('score', this._assessmentState.score, this._assessmentState.minScore, this._assessmentState.maxScore);
      }
    }, {
      key: "onAssessmentRestored",
      value: function onAssessmentRestored(assessmentState) {
        this._assessmentState = assessmentState;
      }
    }, {
      key: "checkCompletion",
      value: function checkCompletion() {
        var completionData = this.getCompletionData();

        if (completionData.status === COMPLETION_STATE$1.INCOMPLETE) {
          return;
        }

        Adapt$1.trigger('tracking:complete', completionData);
        logging$1.debug('tracking:complete', completionData);
      }
    }, {
      key: "getCompletionData",
      value: function getCompletionData() {
        var completionData = {
          status: COMPLETION_STATE$1.INCOMPLETE,
          assessment: null
        };

        if (this._config._requireContentCompleted && !Adapt$1.course.get('_isComplete')) {
          return completionData;
        }

        if (this._config._requireAssessmentCompleted) {
          if (!this._assessmentState) {
            return completionData;
          }

          completionData.status = this._assessmentState.isPass ? COMPLETION_STATE$1.PASSED : COMPLETION_STATE$1.FAILED;
          completionData.assessment = this._assessmentState;
          return completionData;
        }

        completionData.status = COMPLETION_STATE$1.COMPLETED;
        return completionData;
      }
    }, {
      key: "loadConfig",
      value: function loadConfig() {
        var _Adapt$config$get, _Adapt$config$get2, _Adapt$config$get2$_t, _ref;

        this._config = (_Adapt$config$get = Adapt$1.config.get('_completionCriteria')) !== null && _Adapt$config$get !== void 0 ? _Adapt$config$get : this._config;
        var newShouldSubmitScore = this._config._shouldSubmitScore;
        var legacyShouldSubmitScore = (_Adapt$config$get2 = Adapt$1.config.get('_spoor')) === null || _Adapt$config$get2 === void 0 ? void 0 : (_Adapt$config$get2$_t = _Adapt$config$get2._tracking) === null || _Adapt$config$get2$_t === void 0 ? void 0 : _Adapt$config$get2$_t._shouldSubmitScore;
        if (legacyShouldSubmitScore !== undefined) logging$1.deprecated('config.json:_spoor._tracking._shouldSubmitScore, please use only config.json:_completionCriteria._shouldSubmitScore');
        this._config._shouldSubmitScore = (_ref = legacyShouldSubmitScore !== null && legacyShouldSubmitScore !== void 0 ? legacyShouldSubmitScore : newShouldSubmitScore) !== null && _ref !== void 0 ? _ref : true;
      }
    }]);

    return Tracking;
  }(Backbone.Controller);

  var tracking = new Tracking();
  Object.defineProperty(Adapt$1, 'tracking', {
    get: function () {
      logging$1.deprecated('Adapt.tracking, please use core/js/tracking directly');
      return tracking;
    }
  });
  __AMD("core/js/tracking", tracking);

  var DrawerItemView = function (_Backbone$View) {
    _inherits(DrawerItemView, _Backbone$View);

    var _super = _createSuper(DrawerItemView);

    function DrawerItemView() {
      _classCallCheck(this, DrawerItemView);

      return _super.apply(this, arguments);
    }

    _createClass(DrawerItemView, [{
      key: "className",
      value: function className() {
        return 'drawer__menu drawer__item';
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          role: 'list'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt$1, 'drawer:empty', this.remove);
        this.render();
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .drawer__item-btn': 'onDrawerItemClicked'
        };
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates['drawerItem'];
        $(this.el).html(template(data)).appendTo('.drawer__holder');
        return this;
      }
    }, {
      key: "onDrawerItemClicked",
      value: function onDrawerItemClicked(event) {
        event.preventDefault();
        var eventCallback = this.model.get('eventCallback');
        Adapt$1.trigger(eventCallback);
      }
    }]);

    return DrawerItemView;
  }(Backbone.View);

  DrawerItemView.type = 'drawerItem';
  var DrawerItemView$1 = __AMD("core/js/views/drawerItemView", DrawerItemView);

  var DrawerView = function (_Backbone$View) {
    _inherits(DrawerView, _Backbone$View);

    var _super = _createSuper(DrawerView);

    function DrawerView() {
      _classCallCheck(this, DrawerView);

      return _super.apply(this, arguments);
    }

    _createClass(DrawerView, [{
      key: "className",
      value: function className() {
        return 'drawer u-display-none';
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          role: 'dialog',
          'aria-modal': 'true',
          'aria-labelledby': 'drawer-heading',
          'aria-hidden': 'true'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _Adapt$config$get$_du, _Adapt$config$get;

        this._isVisible = false;
        this.disableAnimation = Adapt$1.config.has('_disableAnimation') ? Adapt$1.config.get('_disableAnimation') : false;
        this.drawerDir = Adapt$1.config.get('_defaultDirection') === 'rtl' ? 'left' : 'right';
        this.drawerDuration = (_Adapt$config$get$_du = (_Adapt$config$get = Adapt$1.config.get('_drawer')) === null || _Adapt$config$get === void 0 ? void 0 : _Adapt$config$get._duration) !== null && _Adapt$config$get$_du !== void 0 ? _Adapt$config$get$_du : 400;
        this.setupEventListeners();
        this.render();
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(Adapt$1, {
          'navigation:toggleDrawer': this.toggleDrawer,
          'drawer:triggerCustomView': this.openCustomView,
          'drawer:closeDrawer': this.onCloseDrawer,
          remove: this.onRemove,
          'drawer:remove': this.remove
        });
        this.onKeyUp = this.onKeyUp.bind(this);
        this.setupEscapeKey();
      }
    }, {
      key: "setupEscapeKey",
      value: function setupEscapeKey() {
        $(window).on('keyup', this.onKeyUp);
      }
    }, {
      key: "onKeyUp",
      value: function onKeyUp(event) {
        if (event.which !== 27) return;
        event.preventDefault();
        this.onCloseDrawer();
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .drawer__back': 'onBackButtonClicked',
          'click .drawer__close': 'onCloseClicked'
        };
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates.drawer;
        $(this.el).html(template({
          _globals: Adapt$1.course.get('_globals')
        })).prependTo('body');
        var shadowTemplate = Handlebars.templates.shadow;
        $(shadowTemplate()).prependTo('body');

        _.defer(this.postRender.bind(this));

        return this;
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.$('a, button, input, select, textarea').attr('tabindex', -1);
        this.checkIfDrawerIsAvailable();
      }
    }, {
      key: "openCustomView",
      value: function openCustomView(view, hasBackButton) {
        this._hasBackButton = hasBackButton;
        this._isCustomViewVisible = true;
        Adapt$1.trigger('drawer:empty');
        this.showDrawer();
        this.$('.drawer__holder').html(view);
      }
    }, {
      key: "checkIfDrawerIsAvailable",
      value: function checkIfDrawerIsAvailable() {
        var isEmptyDrawer = this.collection.length === 0;
        $('.js-nav-drawer-btn').toggleClass('u-display-none', isEmptyDrawer);

        if (isEmptyDrawer) {
          Adapt$1.trigger('drawer:noItems');
        }
      }
    }, {
      key: "onBackButtonClicked",
      value: function onBackButtonClicked(event) {
        event.preventDefault();
        this.showDrawer(true);
      }
    }, {
      key: "onCloseClicked",
      value: function onCloseClicked(event) {
        event.preventDefault();
        this.hideDrawer();
      }
    }, {
      key: "onCloseDrawer",
      value: function onCloseDrawer($toElement) {
        this.hideDrawer($toElement);
      }
    }, {
      key: "onRemove",
      value: function onRemove() {
        this.hideDrawer();
      }
    }, {
      key: "toggleDrawer",
      value: function toggleDrawer() {
        if (this._isVisible && this._isCustomViewVisible === false) {
          this.hideDrawer();
          return;
        }

        this.showDrawer(true);
      }
    }, {
      key: "showDrawer",
      value: function showDrawer(emptyDrawer) {
        var _this = this;

        this.$el.removeClass('u-display-none').removeAttr('aria-hidden');

        if (!this._isVisible) {
          a11y$1.popupOpened(this.$el);
          a11y$1.scrollDisable('body');
          this._isVisible = true;
        }

        this.$('a, button, input, select, textarea').attr('tabindex', 0);

        if (emptyDrawer) {
          this.$('.drawer__back').addClass('u-display-none');
          this._isCustomViewVisible = false;
          this.emptyDrawer();

          if (this.collection.models.length === 1) {
            Adapt$1.trigger(this.collection.models[0].get('eventCallback'));
            this._isCustomViewVisible = false;
          } else {
            this.renderItems();
            Adapt$1.trigger('drawer:openedItemView');
          }
        } else {
          var hideDrawerBackButton = !this._hasBackButton || this.collection.models.length <= 1;
          this.$('.drawer__back').toggleClass('u-display-none', hideDrawerBackButton);
          Adapt$1.trigger('drawer:openedCustomView');
        }

        var complete = function () {
          _this.addShadowEvent();

          Adapt$1.trigger('drawer:opened');
          a11y$1.focusFirst(_this.$el, {
            defer: true
          });
        };

        var direction = {};

        if (this.disableAnimation) {
          $('.js-shadow').removeClass('u-display-none');
          $('.js-drawer-holder').scrollTop(0);
          direction[this.drawerDir] = 0;
          this.$el.css(direction);
          complete();
        } else {
          var _Adapt$config$get2;

          $('.js-shadow').velocity({
            opacity: 1
          }, {
            duration: this.drawerDuration,
            begin: function () {
              $('.js-shadow').removeClass('u-display-none');
              $('.js-drawer-holder').scrollTop(0);
              complete();
            }
          });
          var easing = ((_Adapt$config$get2 = Adapt$1.config.get('_drawer')) === null || _Adapt$config$get2 === void 0 ? void 0 : _Adapt$config$get2._showEasing) || 'easeOutQuart';
          direction[this.drawerDir] = 0;
          this.$el.velocity(direction, this.drawerDuration, easing);
        }
      }
    }, {
      key: "emptyDrawer",
      value: function emptyDrawer() {
        this.$('.drawer__holder').empty();
      }
    }, {
      key: "renderItems",
      value: function renderItems() {
        Adapt$1.trigger('drawer:empty');
        this.emptyDrawer();
        this.collection.forEach(function (model) {
          return new DrawerItemView$1({
            model: model
          });
        });
      }
    }, {
      key: "hideDrawer",
      value: function hideDrawer($toElement) {
        var _this2 = this;

        if (!this._isVisible) return;
        var direction = {};
        a11y$1.popupClosed($toElement);
        this._isVisible = false;
        a11y$1.scrollEnable('body');

        if (this.disableAnimation) {
          direction[this.drawerDir] = -this.$el.width();
          this.$el.css(direction).addClass('u-display-none').attr('aria-hidden', 'true');
          $('.js-shadow').addClass('u-display-none');
          Adapt$1.trigger('drawer:closed');
        } else {
          var _Adapt$config$get3;

          var easing = ((_Adapt$config$get3 = Adapt$1.config.get('_drawer')) === null || _Adapt$config$get3 === void 0 ? void 0 : _Adapt$config$get3._hideEasing) || 'easeInQuart';
          direction[this.drawerDir] = -this.$el.width();
          this.$el.velocity(direction, this.drawerDuration, easing, function () {
            _this2.$el.addClass('u-display-none').attr('aria-hidden', 'true');

            Adapt$1.trigger('drawer:closed');
          });
          $('.js-shadow').velocity({
            opacity: 0
          }, {
            duration: this.drawerDuration,
            complete: function () {
              $('.js-shadow').addClass('u-display-none');
            }
          });
        }

        this._isCustomViewVisible = false;
        this.removeShadowEvent();
      }
    }, {
      key: "addShadowEvent",
      value: function addShadowEvent() {
        var _this3 = this;

        $('.js-shadow').one('click touchstart', function () {
          return _this3.onCloseDrawer();
        });
      }
    }, {
      key: "removeShadowEvent",
      value: function removeShadowEvent() {
        $('.js-shadow').off('click touchstart');
      }
    }, {
      key: "remove",
      value: function remove() {
        _get(_getPrototypeOf(DrawerView.prototype), "remove", this).call(this);

        $(window).off('keyup', this.onKeyUp);
        Adapt$1.trigger('drawer:empty');
        this.collection.reset();
        $('.js-shadow').remove();
      }
    }]);

    return DrawerView;
  }(Backbone.View);

  Object.assign(DrawerView, {
    childContainer: '.js-drawer-holder',
    childView: DrawerItemView$1
  });
  var DrawerView$1 = __AMD("core/js/views/drawerView", DrawerView);

  var DrawerCollection = new Backbone.Collection(null, {
    comparator: 'drawerOrder'
  });
  var Drawer = {};

  Drawer.addItem = function (drawerObject, eventCallback) {
    drawerObject.eventCallback = eventCallback;
    DrawerCollection.add(drawerObject);
  };

  Drawer.triggerCustomView = function (view, hasBackButton) {
    if (hasBackButton !== false) {
      hasBackButton = true;
    }

    Adapt$1.trigger('drawer:triggerCustomView', view, hasBackButton);
  };

  Adapt$1.on({
    'adapt:start': function () {
      new DrawerView$1({
        collection: DrawerCollection
      });
    },
    'app:languageChanged': function () {
      Adapt$1.trigger('drawer:remove');
    }
  });
  Object.defineProperty(Adapt$1, 'drawer', {
    get: function () {
      logging$1.deprecated('Adapt.drawer, please use core/js/drawer directly');
      return Drawer;
    }
  });
  var drawer = __AMD("core/js/drawer", Drawer);

  var NotifyPushView = __AMD("core/js/views/notifyPushView", function (_Backbone$View) {
    _inherits(NotifyPushView, _Backbone$View);

    var _super = _createSuper(NotifyPushView);

    function NotifyPushView() {
      _classCallCheck(this, NotifyPushView);

      return _super.apply(this, arguments);
    }

    _createClass(NotifyPushView, [{
      key: "className",
      value: function className() {
        var classes = 'notify-push ';
        classes += this.model.get('_classes') || '';
        return classes;
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          role: 'dialog',
          'aria-labelledby': 'notify-push-heading',
          'aria-modal': 'false'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt$1, {
          'notify:pushShown notify:pushRemoved': this.updateIndexPosition,
          remove: this.remove
        });
        this.listenTo(this.model.collection, {
          remove: this.updateIndexPosition,
          'change:_index': this.updatePushPosition
        });
        this.preRender();
        this.render();
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-notify-push-close-btn': 'closePush',
          'click .js-notify-push-inner': 'triggerEvent'
        };
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.hasBeenRemoved = false;
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates.notifyPush;
        this.$el.html(template(data)).appendTo('.notify__push-container');

        _.defer(this.postRender.bind(this));

        return this;
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.$el.addClass('is-active');

        _.delay(this.closePush.bind(this), this.model.get('_timeout'));

        Adapt$1.trigger('notify:pushShown');
      }
    }, {
      key: "closePush",
      value: function closePush(event) {
        var _this = this;

        if (event) {
          event.preventDefault();
        }

        if (this.hasBeenRemoved === false) {
          this.hasBeenRemoved = true;
          this.$el.removeClass('is-active');

          _.delay(function () {
            _this.model.collection.remove(_this.model);

            Adapt$1.trigger('notify:pushRemoved', _this);

            _this.remove();
          }, 600);
        }
      }
    }, {
      key: "triggerEvent",
      value: function triggerEvent(event) {
        Adapt$1.trigger(this.model.get('_callbackEvent'));
        this.closePush();
      }
    }, {
      key: "updateIndexPosition",
      value: function updateIndexPosition() {
        var _this2 = this;

        if (this.hasBeenRemoved) return;
        var models = this.model.collection.models;
        models.forEach(function (model, index) {
          if (!model.get('_isActive')) return;
          model.set('_index', index);

          _this2.updatePushPosition();
        });
      }
    }, {
      key: "updatePushPosition",
      value: function updatePushPosition() {
        if (this.hasBeenRemoved) {
          return;
        }

        if (typeof this.model.get('_index') !== 'undefined') {
          var elementHeight = this.$el.height();
          var offset = 20;
          var navigationHeight = $('.nav').height();
          var currentIndex = this.model.get('_index');
          var flippedIndex = currentIndex === 0 ? 1 : 0;

          if (this.model.collection.where({
            _isActive: true
          }).length === 1) {
            flippedIndex = 0;
          }

          var positionLowerPush = (elementHeight + offset) * flippedIndex + navigationHeight + offset;
          this.$el.css('top', positionLowerPush);
        }
      }
    }]);

    return NotifyPushView;
  }(Backbone.View));

  var NotifyModel = __AMD("core/js/models/notifyModel", function (_LockingModel) {
    _inherits(NotifyModel, _LockingModel);

    var _super = _createSuper(NotifyModel);

    function NotifyModel() {
      _classCallCheck(this, NotifyModel);

      return _super.apply(this, arguments);
    }

    _createClass(NotifyModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _isActive: false,
          _showIcon: false,
          _timeout: 3000
        };
      }
    }]);

    return NotifyModel;
  }(LockingModel));

  var NotifyPushCollection = __AMD("core/js/collections/notifyPushCollection", function (_Backbone$Collection) {
    _inherits(NotifyPushCollection, _Backbone$Collection);

    var _super = _createSuper(NotifyPushCollection);

    function NotifyPushCollection() {
      _classCallCheck(this, NotifyPushCollection);

      return _super.apply(this, arguments);
    }

    _createClass(NotifyPushCollection, [{
      key: "initialize",
      value: function initialize() {
        this.model = NotifyModel;
        this.listenTo(this, 'add', this.onPushAdded);
        this.listenTo(Adapt$1, 'notify:pushRemoved', this.onRemovePush);
      }
    }, {
      key: "onPushAdded",
      value: function onPushAdded(model) {
        this.checkPushCanShow(model);
      }
    }, {
      key: "checkPushCanShow",
      value: function checkPushCanShow(model) {
        if (!this.canShowPush()) return;
        model.set('_isActive', true);
        this.showPush(model);
      }
    }, {
      key: "canShowPush",
      value: function canShowPush() {
        var availablePushNotifications = this.where({
          _isActive: true
        });
        return availablePushNotifications.length < 2;
      }
    }, {
      key: "showPush",
      value: function showPush(model) {
        new NotifyPushView({
          model: model
        });
      }
    }, {
      key: "onRemovePush",
      value: function onRemovePush(view) {
        var inactivePushNotifications = this.where({
          _isActive: false
        });

        if (inactivePushNotifications.length > 0) {
          this.checkPushCanShow(inactivePushNotifications[0]);
        }
      }
    }]);

    return NotifyPushCollection;
  }(Backbone.Collection));

  var ChildEvent = __AMD("core/js/childEvent", function (_Backbone$Controller) {
    _inherits(ChildEvent, _Backbone$Controller);

    var _super = _createSuper(ChildEvent);

    function ChildEvent() {
      _classCallCheck(this, ChildEvent);

      return _super.apply(this, arguments);
    }

    _createClass(ChildEvent, [{
      key: "initialize",
      value: function initialize(type, target, model) {
        this.type = type;
        this.target = target;
        this.isForced = false;
        this.isStoppedImmediate = false;
        this.isStoppedNext = false;
        this.hasRequestChild = false;
        this._model = model;
      }
    }, {
      key: "model",
      get: function () {
        return this._model;
      },
      set: function (model) {
        if (this.type !== 'requestChild') {
          logging$1.warn("Cannot change model in ".concat(this.type, " event."));
          return;
        }

        if (this._model) {
          logging$1.warn("Cannot inject two models in one sitting. ".concat(model.get('_id'), " attempts to overwrite ").concat(this._model.get('_id')));
          return;
        }

        this._model = model;
        this.hasRequestChild = true;
      }
    }, {
      key: "reset",
      value: function reset() {
        this.isStoppedImmediate = false;
        this.isStoppedNext = false;
      }
    }, {
      key: "force",
      value: function force() {
        this.isForced = true;
      }
    }, {
      key: "stop",
      value: function stop() {
        var immediate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (!immediate) {
          return this.stopNext();
        }

        this.isStoppedImmediate = true;
      }
    }, {
      key: "stopNext",
      value: function stopNext() {
        this.isStoppedNext = true;
      }
    }, {
      key: "close",
      value: function close() {
        this.trigger('closed');
      }
    }]);

    return ChildEvent;
  }(Backbone.Controller));

  var register = __AMD("core/js/reactHelpers", function register(name, component) {
    templates[name] = function () {
      var mode = 'reactTemplate';

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var preRenderEvent = new TemplateRenderEvent("".concat(mode, ":preRender"), name, mode, null, args);
      Adapt$1.trigger(preRenderEvent.type, preRenderEvent);
      var value = component.apply(void 0, _toConsumableArray(preRenderEvent.args));
      var postRenderEvent = new TemplateRenderEvent("".concat(mode, ":postRender"), name, mode, value, preRenderEvent.args);
      Adapt$1.trigger(postRenderEvent.type, postRenderEvent);
      return postRenderEvent.value;
    };
  });

  (function () {
    var original = React__default["default"].createElement;

    React__default["default"].createElement = function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var name = args[0];
      var mode = 'reactElement';
      var preRenderEvent = new TemplateRenderEvent("".concat(mode, ":preRender"), name, mode, null, args);
      Adapt$1.trigger(preRenderEvent.type, preRenderEvent);
      var value = original.apply(void 0, _toConsumableArray(preRenderEvent.args));
      var postRenderEvent = new TemplateRenderEvent("".concat(mode, ":postRender"), name, mode, value, preRenderEvent.args);
      Adapt$1.trigger(postRenderEvent.type, postRenderEvent);
      return postRenderEvent.value;
    };
  })();

  var templates = {};
  function html$1(html) {
    if (!html) return;
    logging$1.deprecated('reactHelpers.html please use react dangerouslySetInnerHTML instead: https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml');
    return {
      __html: html
    };
  }
  function compile(template) {
    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    var output = Handlebars.compile(template).apply(void 0, args);
    return output;
  }
  function classes() {
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }

    return _.uniq(_.flatten(args).filter(Boolean).join(' ').split(' ')).join(' ');
  }
  function prefixClasses(prefixes) {
    for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
      args[_key6 - 1] = arguments[_key6];
    }

    var classes = _.flatten(args).filter(Boolean);

    var prefixed = _.flatten(prefixes.map(function (prefix) {
      return classes.map(function (className) {
        return "".concat(prefix).concat(className);
      });
    }));

    return _.uniq(prefixed.join(' ').split(' ')).join(' ');
  }

  var AdaptView = function (_Backbone$View) {
    _inherits(AdaptView, _Backbone$View);

    var _super = _createSuper(AdaptView);

    function AdaptView() {
      _classCallCheck(this, AdaptView);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptView, [{
      key: "attributes",
      value: function attributes() {
        return {
          'data-adapt-id': this.model.get('_id')
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(this.model, {
          'change:_isVisible': this.toggleVisibility,
          'change:_isHidden': this.toggleHidden,
          'change:_isComplete': this.onIsCompleteChange
        });
        this.isJSX = (this.constructor.template || '').includes('.jsx');

        if (this.isJSX) {
          var _this$model, _this$model$getChildr;

          this._classSet = new Set(_.result(this, 'className').trim().split(/\s+/));
          this.listenTo(this.model, 'all', this.changed);
          var children = (_this$model = this.model) === null || _this$model === void 0 ? void 0 : (_this$model$getChildr = _this$model.getChildren) === null || _this$model$getChildr === void 0 ? void 0 : _this$model$getChildr.call(_this$model);
          children && this.listenTo(children, 'all', this.changed);
          this.listenTo(Adapt$1, 'device:changed', this.changed);
        }

        this.model.set({
          _globals: Adapt$1.course.get('_globals'),
          _isReady: false
        });
        this._isRemoved = false;

        if (location$1._currentId === this.model.get('_id')) {
          Adapt$1.parentView = this;
        }

        this.preRender();
        this.render();
        this.setupOnScreenHandler();
      }
    }, {
      key: "preRender",
      value: function preRender() {}
    }, {
      key: "postRender",
      value: function () {
        var _postRender = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.addChildren();

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function postRender() {
          return _postRender.apply(this, arguments);
        }

        return postRender;
      }()
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var type = this.constructor.type;
        Adapt$1.trigger("".concat(type, "View:preRender view:preRender"), this);

        if (this.isJSX) {
          this.changed();
        } else {
          var data = this.model.toJSON();
          data.view = this;
          var template = Handlebars.templates[this.constructor.template];
          this.$el.html(template(data));
        }

        Adapt$1.trigger("".concat(type, "View:render view:render"), this);

        _.defer(_asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!_this._isRemoved) {
                    _context2.next = 2;
                    break;
                  }

                  return _context2.abrupt("return");

                case 2:
                  _context2.next = 4;
                  return _this.postRender();

                case 4:
                  Adapt$1.trigger("".concat(type, "View:postRender view:postRender"), _this);

                case 5:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        })));

        return this;
      }
    }, {
      key: "changed",
      value: function changed() {
        var eventName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        if (!this.isJSX) {
          throw new Error('Cannot call changed on a non-react view');
        }

        if (typeof eventName === 'string' && eventName.startsWith('bubble')) {
          return;
        }

        var props = _objectSpread2(_objectSpread2(_objectSpread2({}, this), this.model.toJSON()), {}, {
          _globals: Adapt$1.course.get('_globals')
        });

        var Template = templates[this.constructor.template.replace('.jsx', '')];
        this.updateViewProperties();
        ReactDOM__default["default"].render(React__default["default"].createElement(Template, props), this.el);
      }
    }, {
      key: "updateViewProperties",
      value: function updateViewProperties() {
        var _this2 = this;

        var classesToAdd = _.result(this, 'className').trim().split(/\s+/);

        classesToAdd.forEach(function (i) {
          return _this2._classSet.add(i);
        });

        var classesToRemove = _toConsumableArray(this._classSet).filter(function (i) {
          return !classesToAdd.includes(i);
        });

        classesToRemove.forEach(function (i) {
          return _this2._classSet.delete(i);
        });

        this._setAttributes(_objectSpread2(_objectSpread2({}, _.result(this, 'attributes')), {}, {
          id: _.result(this, 'id')
        }));

        this.$el.removeClass(classesToRemove).addClass(classesToAdd);
      }
    }, {
      key: "setupOnScreenHandler",
      value: function setupOnScreenHandler() {
        var _this3 = this;

        var onscreen = this.model.get('_onScreen');
        if (!(onscreen !== null && onscreen !== void 0 && onscreen._isEnabled)) return;
        this.$el.addClass("has-animation ".concat(onscreen._classes, "-before"));
        this.$el.on('onscreen.adaptView', function (e, m) {
          if (!m.onscreen) return;
          var minVerticalInview = onscreen._percentInviewVertical || 33;
          if (m.percentInviewVertical < minVerticalInview) return;

          _this3.$el.addClass("".concat(onscreen._classes, "-after")).off('onscreen.adaptView');
        });
      }
    }, {
      key: "addChildren",
      value: function () {
        var _addChildren = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
          var addedCount, models, event, subsequentModels, model, ChildView, childView;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  this.nthChild = this.nthChild || 0;
                  _context3.next = 3;
                  return this.addDescendants(false);

                case 3:
                  addedCount = _context3.sent;

                case 4:

                  models = this.model.getAvailableChildModels();
                  event = this._getAddChildEvent(models[this.nthChild]);

                  if (event) {
                    _context3.next = 9;
                    break;
                  }

                  return _context3.abrupt("break", 26);

                case 9:
                  if (event.isForced) {
                    event.reset();
                  }

                  if (!(event.isStoppedImmediate || !event.model)) {
                    _context3.next = 14;
                    break;
                  }

                  subsequentModels = models.slice(this.nthChild);
                  subsequentModels.forEach(function (model) {
                    return model.setOnChildren('_isRendered', false);
                  });
                  return _context3.abrupt("break", 26);

                case 14:
                  model = event.model;
                  model.set({
                    _isRendered: true,
                    _nthChild: ++this.nthChild
                  });
                  ChildView = this.constructor.childView || components$1.getViewClass(model);

                  if (ChildView) {
                    _context3.next = 19;
                    break;
                  }

                  throw new Error("The component '".concat(model.attributes._id, "' ('").concat(model.attributes._component, "') has not been installed, and so is not available in your project."));

                case 19:
                  childView = new ChildView({
                    model: model
                  });
                  this.addChildView(childView);
                  addedCount++;

                  if (!event.isStoppedNext) {
                    _context3.next = 24;
                    break;
                  }

                  return _context3.abrupt("break", 26);

                case 24:
                  _context3.next = 4;
                  break;

                case 26:
                  if (addedCount) {
                    _context3.next = 28;
                    break;
                  }

                  return _context3.abrupt("return", addedCount);

                case 28:
                  this.model.set('_isReady', false);
                  return _context3.abrupt("return", addedCount);

                case 30:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function addChildren() {
          return _addChildren.apply(this, arguments);
        }

        return addChildren;
      }()
    }, {
      key: "addChildView",
      value: function addChildView(childView) {
        var childViews = this.getChildViews() || [];
        childViews.push(childView);
        this.setChildViews(childViews);
        var $parentContainer = this.$(this.constructor.childContainer);

        switch (childView.model.get('_renderPosition')) {
          case 'outer-append':
            this.$el.append(childView.$el);
            break;

          case 'inner-append':
          default:
            $parentContainer.append(childView.$el);
            break;
        }

        Adapt$1.trigger('view:childAdded', this, childView);
        return childView;
      }
    }, {
      key: "addDescendants",
      value: function () {
        var _addDescendants = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
          var addedDescendantCount, childViews, i, l, view;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  addedDescendantCount = 0;
                  childViews = this.getChildViews();

                  if (childViews) {
                    _context4.next = 4;
                    break;
                  }

                  return _context4.abrupt("return", addedDescendantCount);

                case 4:
                  i = 0, l = childViews.length;

                case 5:
                  if (!(i < l)) {
                    _context4.next = 20;
                    break;
                  }

                  view = childViews[i];

                  if (!view.addChildren) {
                    _context4.next = 13;
                    break;
                  }

                  _context4.next = 10;
                  return view.addChildren();

                case 10:
                  _context4.t0 = _context4.sent;
                  _context4.next = 14;
                  break;

                case 13:
                  _context4.t0 = 0;

                case 14:
                  addedDescendantCount = _context4.t0;

                  if (!addedDescendantCount) {
                    _context4.next = 17;
                    break;
                  }

                  return _context4.abrupt("break", 20);

                case 17:
                  i++;
                  _context4.next = 5;
                  break;

                case 20:
                  if (addedDescendantCount) {
                    _context4.next = 23;
                    break;
                  }

                  this.model.checkReadyStatus();
                  return _context4.abrupt("return", addedDescendantCount);

                case 23:
                  this.model.set('_isReady', false);
                  return _context4.abrupt("return", addedDescendantCount);

                case 25:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function addDescendants() {
          return _addDescendants.apply(this, arguments);
        }

        return addDescendants;
      }()
    }, {
      key: "whenReady",
      value: function () {
        var _whenReady = _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {
          var _this4 = this;

          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  if (!this.model.get('_isReady')) {
                    _context5.next = 2;
                    break;
                  }

                  return _context5.abrupt("return");

                case 2:
                  return _context5.abrupt("return", new Promise(function (resolve) {
                    var onReadyChange = function (model, value) {
                      if (!value) return;

                      _this4.stopListening(_this4.model, 'change:_isReady', onReadyChange);

                      resolve();
                    };

                    _this4.listenTo(_this4.model, 'change:_isReady', onReadyChange);

                    _this4.model.checkReadyStatus();
                  }));

                case 3:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function whenReady() {
          return _whenReady.apply(this, arguments);
        }

        return whenReady;
      }()
    }, {
      key: "_getAddChildEvent",
      value: function _getAddChildEvent(model) {
        var isRequestChild = !model;
        var event = new ChildEvent(null, this, model);

        if (isRequestChild) {
          var canRequestChild = this.model.get('_canRequestChild');

          if (!canRequestChild) {
            return;
          }

          event.type = 'requestChild';
          Adapt$1.trigger('view:requestChild', event);

          if (!event.hasRequestChild) {
            event.close();
            return;
          }
        }

        event.type = 'addChild';
        Adapt$1.trigger('view:addChild', event);
        event.close();
        return event;
      }
    }, {
      key: "findDescendantViews",
      value: function findDescendantViews(isParentFirst) {
        var descendants = [];
        var childViews = this.getChildViews();
        childViews === null || childViews === void 0 ? void 0 : childViews.forEach(function (view) {
          var _view$findDescendantV;

          if (isParentFirst) descendants.push(view);
          var children = (_view$findDescendantV = view.findDescendantViews) === null || _view$findDescendantV === void 0 ? void 0 : _view$findDescendantV.call(view, isParentFirst);
          if (children) descendants.push.apply(descendants, _toConsumableArray(children));
          if (!isParentFirst) descendants.push(view);
        });
        return descendants;
      }
    }, {
      key: "setReadyStatus",
      value: function setReadyStatus() {
        this.model.set('_isReady', true);
      }
    }, {
      key: "setCompletionStatus",
      value: function setCompletionStatus() {
        if (!this.model.get('_isVisible')) return;
        this.model.set({
          _isComplete: true,
          _isInteractionComplete: true
        });
      }
    }, {
      key: "resetCompletionStatus",
      value: function resetCompletionStatus(type) {
        if (!this.model.get('_canReset')) return;
        var descendantComponents = this.model.findDescendantModels('component');

        if (descendantComponents.length === 0) {
          this.model.reset(type);
        } else {
          descendantComponents.forEach(function (model) {
            return model.reset(type);
          });
        }
      }
    }, {
      key: "preRemove",
      value: function preRemove() {
        var type = this.constructor.type;
        Adapt$1.trigger("".concat(type, "View:preRemove view:preRemove"), this);
      }
    }, {
      key: "remove",
      value: function remove() {
        var _this5 = this;

        var type = this.constructor.type;
        this.preRemove();
        Adapt$1.trigger("".concat(type, "View:remove view:remove"), this);
        this._isRemoved = true;
        this.stopListening();
        wait$1.for(function (end) {
          if (_this5.isJSX) {
            ReactDOM__default["default"].unmountComponentAtNode(_this5.el);
          }

          _this5.$el.off('onscreen.adaptView');

          _get(_getPrototypeOf(AdaptView.prototype), "remove", _this5).call(_this5);

          _.defer(function () {
            Adapt$1.trigger("".concat(type, "View:postRemove view:postRemove"), _this5);
          });

          end();
        });
        return this;
      }
    }, {
      key: "setVisibility",
      value: function setVisibility() {
        return this.model.get('_isVisible') ? '' : 'u-visibility-hidden';
      }
    }, {
      key: "toggleVisibility",
      value: function toggleVisibility() {
        this.$el.toggleClass('u-visibility-hidden', !this.model.get('_isVisible'));
      }
    }, {
      key: "setHidden",
      value: function setHidden() {
        return this.model.get('_isHidden') ? 'u-display-none' : '';
      }
    }, {
      key: "toggleHidden",
      value: function toggleHidden() {
        this.$el.toggleClass('u-display-none', this.model.get('_isHidden'));
      }
    }, {
      key: "onIsCompleteChange",
      value: function onIsCompleteChange(model, isComplete) {
        this.$el.toggleClass('is-complete', isComplete);
      }
    }, {
      key: "getChildViews",
      value: function getChildViews() {
        if (!this._childViews) return this._childViews;
        return Object.entries(this._childViews).map(function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2);
              _ref3[0];
              var value = _ref3[1];

          return value;
        });
      }
    }, {
      key: "setChildViews",
      value: function setChildViews(value) {
        this._childViews = value;
      }
    }, {
      key: "childViews",
      get: function () {
        logging$1.deprecated('view.childViews use view.getChildViews() and view.setChildViews([])');

        if (Array.isArray(this._childViews)) {
          return _.indexBy(this._childViews, function (view) {
            return view.model.get('_id');
          });
        }

        return this._childViews;
      },
      set: function (value) {
        logging$1.deprecated('view.childViews use view.getChildViews() and view.setChildViews([])');
        this.setChildViews(value);
      }
    }]);

    return AdaptView;
  }(Backbone.View);

  AdaptView.className = '';
  var AdaptView$1 = __AMD("core/js/views/adaptView", AdaptView);

  var NotifyPopupView = __AMD("core/js/views/notifyPopupView", function (_Backbone$View) {
    _inherits(NotifyPopupView, _Backbone$View);

    var _super = _createSuper(NotifyPopupView);

    function NotifyPopupView() {
      _classCallCheck(this, NotifyPopupView);

      return _super.apply(this, arguments);
    }

    _createClass(NotifyPopupView, [{
      key: "className",
      value: function className() {
        return "notify ".concat(this.model.get('_classes') || '');
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return Object.assign({
          role: 'dialog',
          'aria-labelledby': 'notify-heading',
          'aria-modal': 'true'
        }, this.model.get('_attributes'));
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-notify-btn-alert': 'onAlertButtonClicked',
          'click .js-notify-btn-prompt': 'onPromptButtonClicked',
          'click .js-notify-close-btn': 'onCloseButtonClicked',
          'click .js-notify-shadow-click': 'onShadowClicked'
        };
      }
    }, {
      key: "initialize",
      value: function initialize(_ref) {
        var notify = _ref.notify;
        this.notify = notify;

        _.bindAll(this, 'resetNotifySize', 'onKeyUp');

        this.disableAnimation = Adapt$1.config.get('_disableAnimation') || false;
        this.isOpen = false;
        this.hasOpened = false;
        this.setupEventListeners();
        this.render();
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.listenTo(Adapt$1, {
          remove: this.closeNotify,
          'notify:resize': this.resetNotifySize,
          'notify:cancel': this.cancelNotify,
          'notify:close': this.closeNotify,
          'device:resize': this.resetNotifySize
        });
        this.setupEscapeKey();
      }
    }, {
      key: "setupEscapeKey",
      value: function setupEscapeKey() {
        $(window).on('keyup', this.onKeyUp);
      }
    }, {
      key: "onKeyUp",
      value: function onKeyUp(event) {
        if (event.which !== 27) return;
        event.preventDefault();
        this.cancelNotify();
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates.notifyPopup;
        this.$el.css('visibility', 'hidden');
        this.$el.html(template(data)).appendTo('.notify__popup-container');
        this.$('.notify__popup').css('visibility', 'hidden');
        this.$el.css('visibility', 'visible');
        this.showNotify();
        return this;
      }
    }, {
      key: "onAlertButtonClicked",
      value: function onAlertButtonClicked(event) {
        event.preventDefault();
        this.closeNotify();
        Adapt$1.trigger(this.model.get('_callbackEvent'), this);
      }
    }, {
      key: "onPromptButtonClicked",
      value: function onPromptButtonClicked(event) {
        event.preventDefault();
        this.closeNotify();
        Adapt$1.trigger($(event.currentTarget).attr('data-event'), this);
      }
    }, {
      key: "onCloseButtonClicked",
      value: function onCloseButtonClicked(event) {
        event.preventDefault();
        this.cancelNotify();
      }
    }, {
      key: "onShadowClicked",
      value: function onShadowClicked(event) {
        event.preventDefault();
        if (this.model.get('_closeOnShadowClick') === false) return;
        this.cancelNotify();
      }
    }, {
      key: "cancelNotify",
      value: function cancelNotify() {
        if (this.model.get('_isCancellable') === false) return;
        this.closeNotify();
        Adapt$1.trigger('notify:cancelled', this);
      }
    }, {
      key: "resetNotifySize",
      value: function resetNotifySize() {
        if (!this.hasOpened) return;
        this.resizeNotify();
      }
    }, {
      key: "resizeNotify",
      value: function resizeNotify() {
        var windowHeight = $(window).height();
        var notifyHeight = this.$('.notify__popup-inner').outerHeight();
        var isFullWindow = notifyHeight >= windowHeight;
        this.$('.notify__popup').css({
          height: isFullWindow ? '100%' : 'auto',
          top: isFullWindow ? 0 : '',
          'margin-top': isFullWindow ? '' : -(notifyHeight / 2),
          'overflow-y': isFullWindow ? 'scroll' : '',
          '-webkit-overflow-scrolling': isFullWindow ? 'touch' : ''
        });
      }
    }, {
      key: "showNotify",
      value: function () {
        var _showNotify = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.isOpen = true;
                  _context.next = 3;
                  return this.addSubView();

                case 3:
                  this.notify.stack.push(this);
                  this.$previousActiveElement = $(document.activeElement);
                  Adapt$1.trigger('notify:opened', this);
                  this.$el.imageready(this.onLoaded.bind(this));

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function showNotify() {
          return _showNotify.apply(this, arguments);
        }

        return showNotify;
      }()
    }, {
      key: "onLoaded",
      value: function onLoaded() {
        var _this = this;

        if (this.disableAnimation) {
          this.$('.notify__shadow').css('display', 'block');
        } else {
          this.$('.notify__shadow').velocity({
            opacity: 0
          }, {
            duration: 0
          }).velocity({
            opacity: 1
          }, {
            duration: 400,
            begin: function () {
              _this.$('.notify__shadow').css('display', 'block');
            }
          });
        }

        this.resizeNotify();

        if (this.disableAnimation) {
          this.$('.notify__popup').css('visibility', 'visible');
          this.onOpened();
        } else {
          this.$('.notify__popup').velocity({
            opacity: 0
          }, {
            duration: 0
          }).velocity({
            opacity: 1
          }, {
            duration: 400,
            begin: function () {
              _this.$('.notify__popup').css('visibility', 'visible');

              _this.onOpened();
            }
          });
        }
      }
    }, {
      key: "onOpened",
      value: function onOpened() {
        $.inview();
        this.hasOpened = true;
        a11y$1.popupOpened(this.$('.notify__popup'));
        a11y$1.scrollDisable('body');
        $('html').addClass('notify');
        a11y$1.focusFirst(this.$('.notify__popup'), {
          defer: false
        });
      }
    }, {
      key: "addSubView",
      value: function () {
        var _addSubView = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          var _this2 = this;

          var model, View;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  this.subView = this.model.get('_view');

                  if (this.model.get('_id')) {
                    model = data$1.findById(this.model.get('_id'));
                    View = components$1.getViewClass(model);
                    this.subView = new View({
                      model: model
                    });
                  }

                  if (this.subView) {
                    _context2.next = 4;
                    break;
                  }

                  return _context2.abrupt("return");

                case 4:
                  this.subView.$el.on('resize', this.resetNotifySize);
                  this.$('.notify__content-inner').prepend(this.subView.$el);

                  if (!(!(this.subView instanceof AdaptView$1) || this.subView.model.get('_isReady'))) {
                    _context2.next = 8;
                    break;
                  }

                  return _context2.abrupt("return");

                case 8:
                  return _context2.abrupt("return", new Promise(function (resolve) {
                    var check = function (model, value) {
                      if (!value) return;

                      _this2.subView.model.off('change:_isReady', check);

                      resolve();
                    };

                    _this2.subView.model.on('change:_isReady', check);
                  }));

                case 9:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function addSubView() {
          return _addSubView.apply(this, arguments);
        }

        return addSubView;
      }()
    }, {
      key: "closeNotify",
      value: function closeNotify() {
        var _this3 = this;

        var stackItem = this.notify.stack[this.notify.stack.length - 1];
        if (this !== stackItem) return;
        this.notify.stack.pop();
        if (!this.isOpen) return;
        this.isOpen = false;

        if (this.hasOpened) {
          this.onCloseReady();
          return;
        }

        this.listenToOnce(Adapt$1, 'popup:opened', function () {
          _.defer(_this3.onCloseReady.bind(_this3));
        });
      }
    }, {
      key: "onCloseReady",
      value: function onCloseReady() {
        var _this4 = this;

        if (this.disableAnimation) {
          this.$('.notify__popup').css('visibility', 'hidden');
          this.$el.css('visibility', 'hidden');
          this.remove();
        } else {
          this.$('.notify__popup').velocity({
            opacity: 0
          }, {
            duration: 400,
            complete: function () {
              _this4.$('.notify__popup').css('visibility', 'hidden');
            }
          });
          this.$('.notify__shadow').velocity({
            opacity: 0
          }, {
            duration: 400,
            complete: function () {
              _this4.$el.css('visibility', 'hidden');

              _this4.remove();
            }
          });
        }

        a11y$1.scrollEnable('body');
        $('html').removeClass('notify');
        a11y$1.popupClosed(this.$previousActiveElement);
        Adapt$1.trigger('notify:closed', this);
      }
    }, {
      key: "remove",
      value: function remove() {
        var _get2;

        this.removeSubView();
        $(window).off('keyup', this.onKeyUp);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(NotifyPopupView.prototype), "remove", this)).call.apply(_get2, [this].concat(args));
      }
    }, {
      key: "removeSubView",
      value: function removeSubView() {
        if (!this.subView) return;
        this.subView.$el.off('resize', this.resetNotifySize);

        if (this.subView instanceof AdaptView$1) {
          var views = [].concat(_toConsumableArray(this.subView.findDescendantViews()), [this.subView]);
          views.forEach(function (view) {
            view.model.set('_isReady', false);
            view.remove();
          });
        } else {
          this.subView.remove();
        }

        this.subView = null;
      }
    }]);

    return NotifyPopupView;
  }(Backbone__default["default"].View));

  var NotifyView = __AMD("core/js/views/notifyView", function (_Backbone$View) {
    _inherits(NotifyView, _Backbone$View);

    var _super = _createSuper(NotifyView);

    function NotifyView() {
      _classCallCheck(this, NotifyView);

      return _super.apply(this, arguments);
    }

    _createClass(NotifyView, [{
      key: "className",
      value: function className() {
        return 'notify__container';
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this._stack = [];
        this.notifyPushes = new NotifyPushCollection();
        this.listenTo(Adapt$1, {
          'notify:popup': this._deprecated.bind(this, 'popup'),
          'notify:alert': this._deprecated.bind(this, 'alert'),
          'notify:prompt': this._deprecated.bind(this, 'prompt'),
          'notify:push': this._deprecated.bind(this, 'push')
        });
        this.render();
      }
    }, {
      key: "stack",
      get: function () {
        return this._stack;
      }
    }, {
      key: "_deprecated",
      value: function _deprecated(type, notifyObject) {
        logging$1.deprecated("NOTIFY DEPRECATED: Adapt.trigger('notify:".concat(type, "', notifyObject); is no longer supported, please use notify.").concat(type, "(notifyObject);"));
        return this.create(notifyObject, {
          _type: type
        });
      }
    }, {
      key: "render",
      value: function render() {
        var notifyTemplate = Handlebars.templates.notify;
        this.$el.html(notifyTemplate());
        this.$el.appendTo('body');
      }
    }, {
      key: "create",
      value: function create(notifyObject, defaults) {
        notifyObject = _.defaults({}, notifyObject, defaults, {
          _type: 'popup',
          _isCancellable: true,
          _showCloseButton: true,
          _closeOnShadowClick: true
        });

        if (notifyObject._type === 'push') {
          this.notifyPushes.push(notifyObject);
          return;
        }

        return new NotifyPopupView({
          model: new NotifyModel(notifyObject),
          notify: this
        });
      }
    }, {
      key: "popup",
      value: function popup(notifyObject) {
        return this.create(notifyObject, {
          _type: 'popup'
        });
      }
    }, {
      key: "alert",
      value: function alert(notifyObject) {
        return this.create(notifyObject, {
          _type: 'alert'
        });
      }
    }, {
      key: "prompt",
      value: function prompt(notifyObject) {
        return this.create(notifyObject, {
          _type: 'prompt'
        });
      }
    }, {
      key: "push",
      value: function push(notifyObject) {
        return this.create(notifyObject, {
          _type: 'push'
        });
      }
    }]);

    return NotifyView;
  }(Backbone.View));

  var notify = new NotifyView();
  Object.defineProperty(Adapt$1, 'notify', {
    get: function () {
      logging$1.deprecated('Adapt.notify, please use core/js/notify directly');
      return notify;
    }
  });
  var notify$1 = __AMD("core/js/notify", notify);

  var RouterModel = __AMD("core/js/models/routerModel", function (_LockingModel) {
    _inherits(RouterModel, _LockingModel);

    var _super = _createSuper(RouterModel);

    function RouterModel() {
      _classCallCheck(this, RouterModel);

      return _super.apply(this, arguments);
    }

    _createClass(RouterModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _canNavigate: true,
          _shouldNavigateFocus: true
        };
      }
    }, {
      key: "lockedAttributes",
      value: function lockedAttributes() {
        return {
          _canNavigate: false,
          _shouldNavigateFocus: false
        };
      }
    }]);

    return RouterModel;
  }(LockingModel));

  var Router = function (_Backbone$Router) {
    _inherits(Router, _Backbone$Router);

    var _super = _createSuper(Router);

    function Router() {
      _classCallCheck(this, Router);

      return _super.apply(this, arguments);
    }

    _createClass(Router, [{
      key: "routes",
      value: function routes() {
        return {
          '': 'handleRoute',
          'id/:id': 'handleRoute',
          ':pluginName(/*location)(/*action)': 'handleRoute'
        };
      }
    }, {
      key: "initialize",
      value: function initialize(_ref) {
        var model = _ref.model;
        this._isBackward = false;
        this.model = model;
        this._navigationRoot = null;
        this._isCircularNavigationInProgress = false;
        this.showLoading();
        this.$wrapper = $('#wrapper');
        this.$html = $('html');
        this.listenToOnce(Adapt$1, 'app:dataReady', this.setDocumentTitle);
        this.listenTo(Adapt$1, 'router:navigateTo', this.navigateToArguments);
      }
    }, {
      key: "rootModel",
      get: function () {
        return this._navigationRoot || Adapt$1.course;
      },
      set: function (model) {
        this._navigationRoot = model;
      }
    }, {
      key: "showLoading",
      value: function showLoading() {
        $('.js-loading').show();
      }
    }, {
      key: "hideLoading",
      value: function hideLoading() {
        $('.js-loading').hide();
      }
    }, {
      key: "setDocumentTitle",
      value: function setDocumentTitle() {
        var currentModel = location$1._currentModel;
        var hasSubTitle = currentModel && currentModel !== router.rootModel && currentModel.get('title');
        var title = [this.rootModel.get('title'), hasSubTitle && currentModel.get('title')].filter(Boolean).join(' | ');
        this.listenToOnce(Adapt$1, 'contentObjectView:preRender', function () {
          var escapedTitle = $("<div>".concat(title, "</div>")).text();
          document.title = escapedTitle;
        });
      }
    }, {
      key: "navigateToArguments",
      value: function navigateToArguments(args) {
        args = args.filter(function (v) {
          return v !== null;
        });
        var options = {
          trigger: false,
          replace: false
        };

        if (args.length === 1 && data$1.findById(args[0])) {
          this.navigate('#/id/' + args[0], options);
          return;
        }

        if (args.length <= 3) {
          this.navigate('#/' + args.join('/'), options);
          return;
        }

        logging$1.deprecated('Use Backbone.history.navigate or window.location.href instead of Adapt.trigger(\'router:navigateTo\')');
        this.handleRoute.apply(this, _toConsumableArray(args));
      }
    }, {
      key: "handleRoute",
      value: function handleRoute() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        args = args.filter(function (v) {
          return v !== null;
        });

        if (this.model.get('_canNavigate')) {
          this._isCircularNavigationInProgress = false;
        }

        if (this._isCircularNavigationInProgress === false) {
          Adapt$1.trigger('router:navigate', args);
        }

        if (this.model.get('_canNavigate')) {
          this.model.set('_canNavigate', false, {
            pluginName: 'adapt'
          });
          this._isBackward = false;

          if (args.length <= 1) {
            return this.handleId.apply(this, _toConsumableArray(args));
          }

          return this.handlePluginRouter.apply(this, _toConsumableArray(args));
        }

        if (this._isCircularNavigationInProgress) {
          this._isCircularNavigationInProgress = false;
          return;
        }

        this._isCircularNavigationInProgress = true;
        Adapt$1.trigger('router:navigationCancelled', args);
        Backbone.history.history[this._isBackward ? 'forward' : 'back']();
        this._isBackward = false;
      }
    }, {
      key: "handlePluginRouter",
      value: function () {
        var _handlePluginRouter = _asyncToGenerator(regeneratorRuntime.mark(function _callee(pluginName, location, action) {
          var pluginLocation;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  pluginLocation = [pluginName, location && "-".concat(location), action && "-".concat(action)].filter(Boolean).join('');
                  _context.next = 3;
                  return this.updateLocation(pluginLocation, null, null, null);

                case 3:
                  Adapt$1.trigger('router:plugin:' + pluginName, pluginName, location, action);
                  Adapt$1.trigger('router:plugin', pluginName, location, action);
                  this.model.set('_canNavigate', true, {
                    pluginName: 'adapt'
                  });

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function handlePluginRouter(_x, _x2, _x3) {
          return _handlePluginRouter.apply(this, arguments);
        }

        return handlePluginRouter;
      }()
    }, {
      key: "handleId",
      value: function () {
        var _handleId = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(id) {
          var _model$isTypeGroup,
              _model,
              _model$isTypeGroup2,
              _model2,
              _this = this,
              _model$isTypeGroup3,
              _model3;

          var rootModel, model, isContentObject, navigateToId, isRoot, startController, isCourse, type, newLocation, ViewClass, isMenu;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  rootModel = router.rootModel;
                  model = !id ? rootModel : data$1.findById(id);

                  if (model) {
                    _context2.next = 5;
                    break;
                  }

                  this.model.set('_canNavigate', true, {
                    pluginName: 'adapt'
                  });
                  return _context2.abrupt("return");

                case 5:
                  isContentObject = (_model$isTypeGroup = (_model = model).isTypeGroup) === null || _model$isTypeGroup === void 0 ? void 0 : _model$isTypeGroup.call(_model, 'contentobject');
                  navigateToId = model.get('_id');
                  model = isContentObject ? model : model.findAncestor('contentobject');
                  id = model.get('_id');
                  isRoot = model === rootModel;

                  if (!(isRoot && Adapt$1.course.has('_start'))) {
                    _context2.next = 14;
                    break;
                  }

                  startController = Adapt$1.course.get('_start');

                  if (!(startController._isEnabled === true && startController._isMenuDisabled === true)) {
                    _context2.next = 14;
                    break;
                  }

                  return _context2.abrupt("return");

                case 14:
                  if (!(model.get('_isLocked') && Adapt$1.config.get('_forceRouteLocking'))) {
                    _context2.next = 20;
                    break;
                  }

                  logging$1.warn('Unable to navigate to locked id: ' + id);
                  this.model.set('_canNavigate', true, {
                    pluginName: 'adapt'
                  });

                  if (!(location$1._previousId === undefined)) {
                    _context2.next = 19;
                    break;
                  }

                  return _context2.abrupt("return", this.navigate('#/', {
                    trigger: true,
                    replace: true
                  }));

                case 19:
                  return _context2.abrupt("return", this.navigateBack());

                case 20:
                  this.showLoading();
                  _context2.next = 23;
                  return Adapt$1.remove();

                case 23:
                  isCourse = (_model$isTypeGroup2 = (_model2 = model).isTypeGroup) === null || _model$isTypeGroup2 === void 0 ? void 0 : _model$isTypeGroup2.call(_model2, 'course');
                  type = isCourse ? 'menu' : model.get('_type');
                  newLocation = isCourse ? 'course' : "".concat(type, "-").concat(id);
                  model.set('_isVisited', true);
                  _context2.next = 29;
                  return this.updateLocation(newLocation, type, id, model);

                case 29:
                  Adapt$1.once('contentObjectView:ready', function () {
                    _this.model.set('_canNavigate', true, {
                      pluginName: 'adapt'
                    });

                    _this.handleNavigationFocus();
                  });
                  Adapt$1.trigger("router:".concat(type, " router:contentObject"), model);
                  ViewClass = components$1.getViewClass(model);
                  isMenu = (_model$isTypeGroup3 = (_model3 = model).isTypeGroup) === null || _model$isTypeGroup3 === void 0 ? void 0 : _model$isTypeGroup3.call(_model3, 'menu');

                  if (!(!ViewClass && isMenu)) {
                    _context2.next = 36;
                    break;
                  }

                  logging$1.deprecated("Using event based menu view instantiation for '".concat(components$1.getViewName(model), "'"));
                  return _context2.abrupt("return");

                case 36:
                  if (isMenu) {
                    _context2.next = 40;
                    break;
                  }

                  _.invoke(model.getAllDescendantModels(), 'checkIfResetOnRevisit');

                  _context2.next = 40;
                  return Adapt$1.deferUntilCompletionChecked();

                case 40:
                  this.$wrapper.append(new ViewClass({
                    model: model
                  }).$el);

                  if (!(!isContentObject && !this.isScrolling)) {
                    _context2.next = 44;
                    break;
                  }

                  _context2.next = 44;
                  return this.navigateToElement('.' + navigateToId, {
                    replace: true,
                    duration: 400
                  });

                case 44:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function handleId(_x4) {
          return _handleId.apply(this, arguments);
        }

        return handleId;
      }()
    }, {
      key: "updateLocation",
      value: function () {
        var _updateLocation = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(currentLocation, type, id, currentModel) {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  location$1._previousModel = location$1._currentModel;
                  location$1._previousId = location$1._currentId;
                  location$1._previousContentType = location$1._contentType;
                  location$1._currentModel = currentModel;
                  location$1._currentId = id;
                  location$1._contentType = type;
                  location$1._currentLocation = currentLocation;

                  if (type === 'menu') {
                    location$1._lastVisitedType = 'menu';
                    location$1._lastVisitedMenu = id;
                  } else if (type === 'page') {
                    location$1._lastVisitedType = 'page';
                    location$1._lastVisitedPage = id;
                  }

                  this.setDocumentTitle();
                  this.setGlobalClasses();
                  Adapt$1.trigger('router:location', location$1);
                  _context3.next = 13;
                  return wait$1.queue();

                case 13:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function updateLocation(_x5, _x6, _x7, _x8) {
          return _updateLocation.apply(this, arguments);
        }

        return updateLocation;
      }()
    }, {
      key: "setGlobalClasses",
      value: function setGlobalClasses() {
        var currentModel = location$1._currentModel;
        var htmlClasses = (currentModel === null || currentModel === void 0 ? void 0 : currentModel.get('_htmlClasses')) || '';
        var classes = location$1._currentId ? "location-".concat(location$1._contentType, " location-id-").concat(location$1._currentId) : "location-".concat(location$1._currentLocation);
        var currentClasses = "".concat(classes, " ").concat(htmlClasses);
        this.$html.removeClass(location$1._previousClasses).addClass(currentClasses).attr('data-location', location$1._currentLocation);
        this.$wrapper.removeClass().addClass(classes).attr('data-location', location$1._currentLocation);
        location$1._previousClasses = currentClasses;
      }
    }, {
      key: "handleNavigationFocus",
      value: function handleNavigationFocus() {
        if (!this.model.get('_shouldNavigateFocus')) return;
        a11y$1.focus('body');
      }
    }, {
      key: "navigateBack",
      value: function navigateBack() {
        this._isBackward = true;
        Backbone.history.history.back();
      }
    }, {
      key: "navigateToCurrentRoute",
      value: function navigateToCurrentRoute(force) {
        if (!this.model.get('_canNavigate') && !force) {
          return;
        }

        if (!location$1._currentId) {
          return;
        }

        var currentId = location$1._currentModel.get('_id');

        var isRoot = location$1._currentModel === this.rootModel;
        var route = isRoot ? '#/' : '#/id/' + currentId;
        this.navigate(route, {
          trigger: true,
          replace: true
        });
      }
    }, {
      key: "navigateToPreviousRoute",
      value: function navigateToPreviousRoute(force) {
        var _location$_currentMod;

        if (!this.model.get('_canNavigate') && !force) {
          return;
        }

        var currentModel = location$1._currentModel;
        var previousModel = location$1._previousModel;

        if (!currentModel) {
          return this.navigateBack();
        }

        if ((_location$_currentMod = location$1._currentModel) !== null && _location$_currentMod !== void 0 && _location$_currentMod.isTypeGroup('menu')) {
          return this.navigateToParent();
        }

        if (previousModel) {
          return this.navigateBack();
        }

        this.navigateToParent();
      }
    }, {
      key: "navigateToParent",
      value: function navigateToParent(force) {
        if (!this.model.get('_canNavigate') && !force) {
          return;
        }

        var parentId = location$1._currentModel.get('_parentId');

        var parentModel = data$1.findById(parentId);
        var isRoot = parentModel === this.rootModel;
        var route = isRoot ? '#/' : '#/id/' + parentId;
        this.navigate(route, {
          trigger: true
        });
      }
    }, {
      key: "navigateToHomeRoute",
      value: function navigateToHomeRoute(force) {
        if (!this.model.get('_canNavigate') && !force) {
          return;
        }

        this.navigate('#/', {
          trigger: true
        });
      }
    }, {
      key: "navigateToElement",
      value: function () {
        var _navigateToElement = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(selector) {
          var _currentModel$isTypeG,
              _this2 = this;

          var settings,
              currentModelId,
              currentModel,
              contentObject,
              contentObjectId,
              isNotInCurrentContentObject,
              shouldReplace,
              newLocation,
              disableScrollToAnimation,
              $wrapper,
              offsetTop,
              _args4 = arguments;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  settings = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
                  currentModelId = selector.replace(/\./g, '').split(' ')[0];
                  currentModel = data$1.findById(currentModelId);
                  contentObject = (_currentModel$isTypeG = currentModel.isTypeGroup) !== null && _currentModel$isTypeG !== void 0 && _currentModel$isTypeG.call(currentModel, 'contentobject') ? currentModel : currentModel.findAncestor('contentobject');
                  contentObjectId = contentObject.get('_id');
                  isNotInCurrentContentObject = contentObjectId !== location$1._currentId;

                  if (!(currentModel && (!currentModel.get('_isRendered') || !currentModel.get('_isReady') || isNotInCurrentContentObject))) {
                    _context4.next = 17;
                    break;
                  }

                  shouldReplace = settings.replace || false;

                  if (!isNotInCurrentContentObject) {
                    _context4.next = 15;
                    break;
                  }

                  this.isScrolling = true;
                  this.navigate("#/id/".concat(currentModelId), {
                    trigger: true,
                    replace: shouldReplace
                  });
                  this.model.set('_shouldNavigateFocus', false, {
                    pluginName: 'adapt'
                  });
                  _context4.next = 14;
                  return new Promise(function (resolve) {
                    return Adapt$1.once('contentObjectView:ready', _.debounce(function () {
                      _this2.model.set('_shouldNavigateFocus', true, {
                        pluginName: 'adapt'
                      });

                      resolve();
                    }, 1));
                  });

                case 14:
                  this.isScrolling = false;

                case 15:
                  _context4.next = 17;
                  return Adapt$1.parentView.renderTo(currentModelId);

                case 17:
                  if (currentModel && selector === currentModel.get('_id')) {
                    selector = ".".concat(selector);
                  }

                  newLocation = location$1._contentType ? location$1._contentType : location$1._currentLocation;
                  Adapt$1.trigger("".concat(newLocation, ":scrollTo"), selector);
                  disableScrollToAnimation = Adapt$1.config.has('_disableAnimation') ? Adapt$1.config.get('_disableAnimation') : false;

                  if (disableScrollToAnimation) {
                    settings.duration = 0;
                  } else if (!settings.duration) {
                    settings.duration = $.scrollTo.defaults.duration;
                  }

                  $wrapper = $('#wrapper');
                  offsetTop = -parseInt($wrapper.css('padding-top'));

                  if ($(selector).hasClass('component')) {
                    offsetTop -= $(selector).find('.aria-label').height() || 0;
                  }

                  if (!settings.offset) settings.offset = {
                    top: offsetTop,
                    left: 0
                  };
                  if (settings.offset.top === undefined) settings.offset.top = offsetTop;
                  if (settings.offset.left === undefined) settings.offset.left = 0;
                  if (settings.offset.left === 0) settings.axis = 'y';

                  if (Adapt$1.get('_canScroll') !== false) {
                    $.scrollTo(selector, settings);
                  }

                  _context4.next = 32;
                  return new Promise(function (resolve) {
                    _.delay(function () {
                      a11y$1.focusNext(selector);
                      Adapt$1.trigger("".concat(location$1, ":scrolledTo"), selector);
                      resolve();
                    }, settings.duration + 300);
                  });

                case 32:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function navigateToElement(_x9) {
          return _navigateToElement.apply(this, arguments);
        }

        return navigateToElement;
      }()
    }, {
      key: "get",
      value: function get() {
        var _this$model;

        logging$1.deprecated('router.get, please use router.model.get');
        return (_this$model = this.model).get.apply(_this$model, arguments);
      }
    }, {
      key: "set",
      value: function set() {
        var _this$model2;

        logging$1.deprecated('router.set, please use router.model.set');
        return (_this$model2 = this.model).set.apply(_this$model2, arguments);
      }
    }]);

    return Router;
  }(Backbone.Router);

  var router = new Router({
    model: new RouterModel(null, {
      reset: true
    })
  });
  router.navigateToElement = router.navigateToElement.bind(router);
  Object.defineProperties(Adapt$1, {
    navigateToElement: {
      get: function () {
        logging$1.deprecated('Adapt.navigateToElement, please use router.navigateToElement');
        return router.navigateToElement;
      }
    },
    router: {
      get: function () {
        logging$1.deprecated('Adapt.router, please use core/js/router directly');
        return router;
      }
    }
  });
  var router$1 = __AMD("core/js/router", router);

  var AdaptSubsetCollection = __AMD("core/js/collections/adaptSubsetCollection", function (_AdaptCollection) {
    _inherits(AdaptSubsetCollection, _AdaptCollection);

    var _super = _createSuper(AdaptSubsetCollection);

    function AdaptSubsetCollection() {
      _classCallCheck(this, AdaptSubsetCollection);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptSubsetCollection, [{
      key: "initialize",
      value: function initialize(models, options) {
        _get(_getPrototypeOf(AdaptSubsetCollection.prototype), "initialize", this).call(this, models, options);

        this.parent = options.parent;
        this.listenTo(this.parent, 'reset', this.loadSubset);
      }
    }, {
      key: "loadSubset",
      value: function loadSubset() {
        var _this = this;

        this.set(this.parent.filter(function (model) {
          return model instanceof _this.model;
        }));
        this._byAdaptID = this.groupBy('_id');
      }
    }]);

    return AdaptSubsetCollection;
  }(AdaptCollection));

  var ModelEvent = __AMD("core/js/modelEvent", function (_Backbone$Controller) {
    _inherits(ModelEvent, _Backbone$Controller);

    var _super = _createSuper(ModelEvent);

    function ModelEvent() {
      _classCallCheck(this, ModelEvent);

      return _super.apply(this, arguments);
    }

    _createClass(ModelEvent, [{
      key: "initialize",
      value: function initialize(type, target, value) {
        this.type = type;
        this.target = target;
        this.value = value;
        this.canBubble = true;
        this.deepPath = [target];
        this.timeStamp = null;
      }
    }, {
      key: "stopPropagation",
      value: function stopPropagation() {
        this.canBubble = false;
      }
    }, {
      key: "addPath",
      value: function addPath(target) {
        this.deepPath.unshift(target);
      }
    }]);

    return ModelEvent;
  }(Backbone.Controller));

  var AdaptModel = __AMD("core/js/models/adaptModel", function (_LockingModel) {
    _inherits(AdaptModel, _LockingModel);

    var _super = _createSuper(AdaptModel);

    function AdaptModel() {
      _classCallCheck(this, AdaptModel);

      return _super.apply(this, arguments);
    }

    _createClass(AdaptModel, [{
      key: "toJSON",
      value: function toJSON() {
        var json = _objectSpread2({}, this.attributes);

        delete json._children;
        delete json._parent;
        return $.extend(true, {}, json);
      }
    }, {
      key: "get",
      value: function get(name) {
        switch (name) {
          case '_parent':
          case '_children':
            logging$1.deprecated('Use model.getChildren() or model.getParent() instead of model.get(\'_children\') or model.get(\'_parent\')');
        }

        return _get(_getPrototypeOf(AdaptModel.prototype), "get", this).call(this, name);
      }
    }, {
      key: "defaults",
      value: function defaults() {
        return {
          _canShowFeedback: true,
          _classes: '',
          _canReset: true,
          _canRequestChild: false,
          _isComplete: false,
          _isInteractionComplete: false,
          _isA11yRegionEnabled: false,
          _isA11yCompletionDescriptionEnabled: true,
          _requireCompletionOf: -1,
          _isEnabled: true,
          _isResetOnRevisit: false,
          _isAvailable: true,
          _isOptional: false,
          _isRendered: false,
          _isReady: false,
          _isVisible: true,
          _isLocked: false,
          _isHidden: false
        };
      }
    }, {
      key: "trackingPosition",
      get: function () {
        var _this = this;

        var firstDescendant = this.getAllDescendantModels(false).concat([this])[0];
        var nearestTrackingIdModel = [firstDescendant].concat(firstDescendant.getAncestorModels()).find(function (model) {
          return model.has('_trackingId');
        });
        if (!nearestTrackingIdModel) return;
        var trackingId = nearestTrackingIdModel.get('_trackingId');
        var trackingIdDescendants = [nearestTrackingIdModel].concat(nearestTrackingIdModel.getAllDescendantModels(true));
        var indexInTrackingIdDescendants = trackingIdDescendants.findIndex(function (descendant) {
          return descendant === _this;
        });

        if (indexInTrackingIdDescendants >= 0) {
          return [trackingId, indexInTrackingIdDescendants];
        }

        var trackingIdAncestors = nearestTrackingIdModel.getAncestorModels();
        var ancestorDistance = trackingIdAncestors.findIndex(function (ancestor) {
          return ancestor === _this;
        });
        return [trackingId, -(ancestorDistance + 1)];
      }
    }, {
      key: "parse",
      value: function parse(data) {
        if (data._isResetOnRevisit === 'false') {
          data._isResetOnRevisit = false;
        }

        return data;
      }
    }, {
      key: "trackable",
      value: function trackable() {
        return ['_id', '_isComplete', '_isInteractionComplete'];
      }
    }, {
      key: "trackableType",
      value: function trackableType() {
        return [String, Boolean, Boolean];
      }
    }, {
      key: "bubblingEvents",
      value: function bubblingEvents() {
        return ['change:_isComplete', 'change:_isInteractionComplete', 'change:_isActive'];
      }
    }, {
      key: "setupModel",
      value: function setupModel() {
        var _this2 = this;

        if (this.hasManagedChildren) {
          this.setupChildListeners();
        }

        this.init();

        _.defer(function () {
          if (_this2.hasManagedChildren) {
            _this2.checkCompletionStatus();

            _this2.checkInteractionCompletionStatus();

            _this2.checkLocking();
          }

          _this2.setupTrackables();
        });
      }
    }, {
      key: "setupTrackables",
      value: function setupTrackables() {
        var _this3 = this;

        var originalTrackableStateFunction = this.triggerTrackableState;
        this.triggerTrackableState = _.compose(function () {
          _this3.triggerTrackableState.isQueued = true;
        }, _.debounce(function () {
          originalTrackableStateFunction.apply(_this3);
          _this3.triggerTrackableState.isQueued = false;
        }, 17));
        this.listenTo(this, 'change', function (_ref) {
          var changed = _ref.changed;

          if (_this3.triggerTrackableState.isQueued || !Adapt$1.attributes._isStarted) {
            return;
          }

          var trackablePropertyNames = _.result(_this3, 'trackable', []);

          var changedPropertyNames = Object.keys(changed);
          var isTrackable = changedPropertyNames.find(function (item) {
            return trackablePropertyNames.includes(item);
          });

          if (isTrackable) {
            _this3.triggerTrackableState();
          }
        });
      }
    }, {
      key: "setupChildListeners",
      value: function setupChildListeners() {
        var children = this.getChildren();

        if (!children.length) {
          return;
        }

        this.listenTo(children, {
          all: this.onAll,
          bubble: this.bubble,
          'change:_isReady': this.checkReadyStatus,
          'change:_isComplete': this.onIsComplete,
          'change:_isInteractionComplete': this.checkInteractionCompletionStatus
        });
      }
    }, {
      key: "init",
      value: function init() {}
    }, {
      key: "getTrackableState",
      value: function getTrackableState() {
        var _ref2;

        var trackable = this.resultExtend('trackable', []);
        var json = this.toJSON();
        var args = trackable;
        args.unshift(json);
        return (_ref2 = _).pick.apply(_ref2, _toConsumableArray(args));
      }
    }, {
      key: "setTrackableState",
      value: function setTrackableState(state) {
        var _ref3;

        var trackable = this.resultExtend('trackable', []);
        var args = trackable;
        args.unshift(state);
        state = (_ref3 = _).pick.apply(_ref3, _toConsumableArray(args));
        this.set(state);
        return this;
      }
    }, {
      key: "triggerTrackableState",
      value: function triggerTrackableState() {
        Adapt$1.trigger('state:change', this, this.getTrackableState());
      }
    }, {
      key: "reset",
      value: function reset() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hard';
        var canReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.get('_canReset');
        if (!canReset) return false;

        switch (type) {
          case 'hard':
          case true:
            this.set({
              _isEnabled: true,
              _isComplete: false,
              _isInteractionComplete: false
            });
            return true;

          case 'soft':
            this.set({
              _isEnabled: true,
              _isInteractionComplete: false
            });
            return true;
        }

        return false;
      }
    }, {
      key: "checkReadyStatus",
      value: function checkReadyStatus(model, value) {
        if (value === false) {
          return false;
        }

        var children = this.getAvailableChildModels();

        if (children.find(function (child) {
          return child.get('_isReady') === false && child.get('_isRendered');
        })) {
          return false;
        }

        this.set('_isReady', true);
        return true;
      }
    }, {
      key: "setCompletionStatus",
      value: function setCompletionStatus() {
        if (!this.get('_isVisible')) return;
        this.set({
          _isComplete: true,
          _isInteractionComplete: true
        });
      }
    }, {
      key: "checkCompletionStatus",
      value: function checkCompletionStatus() {
        Adapt$1.checkingCompletion();

        _.defer(this.checkCompletionStatusFor.bind(this), '_isComplete');
      }
    }, {
      key: "checkInteractionCompletionStatus",
      value: function checkInteractionCompletionStatus() {
        Adapt$1.checkingCompletion();

        _.defer(this.checkCompletionStatusFor.bind(this), '_isInteractionComplete');
      }
    }, {
      key: "checkCompletionStatusFor",
      value: function checkCompletionStatusFor() {
        var completionAttribute = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '_isComplete';
        var completed = false;
        var children = this.getAvailableChildModels();
        var requireCompletionOf = this.get('_requireCompletionOf');

        if (requireCompletionOf === -1) {
          completed = children.every(function (child) {
            return child.get(completionAttribute) || child.get('_isOptional');
          });
        } else {
          completed = children.filter(function (child) {
            return child.get(completionAttribute) && !child.get('_isOptional');
          }).length >= requireCompletionOf;
        }

        this.set(completionAttribute, completed);
        Adapt$1.checkedCompletion();
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {}
    }, {
      key: "isTypeGroup",
      value: function isTypeGroup(typeGroup) {
        var hasUpperCase = /[A-Z]+/.test(typeGroup);
        var isPluralized = typeGroup.slice(-1) === 's';
        var lowerCased = typeGroup.toLowerCase();
        var singular = isPluralized && lowerCased.slice(0, -1);
        var singularLowerCased = (singular || lowerCased).toLowerCase();

        if (isPluralized || hasUpperCase) {
          logging$1.deprecated("'".concat(typeGroup, "' appears pluralized or contains uppercase characters, suggest using the singular, lowercase type group '").concat(singularLowerCased, "'."));
        }

        var pluralizedLowerCaseTypes = [singularLowerCased, !isPluralized && "".concat(lowerCased, "s")].filter(Boolean);
        var typeGroups = this.getTypeGroups();

        if (_.intersection(pluralizedLowerCaseTypes, typeGroups).length) {
          return true;
        }

        return false;
      }
    }, {
      key: "getTypeGroups",
      value: function getTypeGroups() {
        if (this._typeGroups) return this._typeGroups;
        var typeGroups = [this.get('_type')];
        var parentClass = this;

        while (parentClass = Object.getPrototypeOf(parentClass)) {
          if (!Object.prototype.hasOwnProperty.call(parentClass, 'getTypeGroup')) continue;
          typeGroups.push(parentClass.getTypeGroup.call(this));
        }

        return this._typeGroups = _.uniq(typeGroups.filter(Boolean).map(function (s) {
          return s.toLowerCase();
        }));
      }
    }, {
      key: "findAncestor",
      value: function findAncestor(ancestorType) {
        var parent = this.getParent();
        if (!parent) return;

        if (!ancestorType || parent.isTypeGroup(ancestorType)) {
          return parent;
        }

        return parent.findAncestor(ancestorType);
      }
    }, {
      key: "findDescendantModels",
      value: function findDescendantModels(descendants, options) {
        var allDescendantsModels = this.getAllDescendantModels();
        var returnedDescendants = allDescendantsModels.filter(function (model) {
          return model.isTypeGroup(descendants);
        });

        if (!options) {
          return returnedDescendants;
        }

        if (options.where) {
          return returnedDescendants.filter(function (descendant) {
            for (var property in options.where) {
              var value = options.where[property];

              if (descendant.get(property) !== value) {
                return false;
              }
            }

            return true;
          });
        }
      }
    }, {
      key: "getAllDescendantModels",
      value: function getAllDescendantModels(isParentFirst) {
        var descendants = [];

        if (!this.hasManagedChildren) {
          return descendants;
        }

        var children = this.getChildren();
        children.models.forEach(function (child) {
          if (!child.hasManagedChildren) {
            descendants.push(child);
            return;
          }

          var subDescendants = child.getAllDescendantModels(isParentFirst);

          if (isParentFirst === true) {
            descendants.push(child);
          }

          descendants.push.apply(descendants, _toConsumableArray(subDescendants));

          if (isParentFirst !== true) {
            descendants.push(child);
          }
        });
        return descendants;
      }
    }, {
      key: "findRelativeModel",
      value: function findRelativeModel(relativeString) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var rootModel = options.limitParentId ? data$1.findById(options.limitParentId) : Adapt$1.course;
        var relativeDescriptor = Adapt$1.parseRelativeString(relativeString);
        var searchBackwards = relativeDescriptor.offset < 0;
        var moveBy = Math.abs(relativeDescriptor.offset);
        var movementCount = 0;
        var hasDescendantsOfType = Boolean(this.findDescendantModels(relativeDescriptor.type).length);

        if (hasDescendantsOfType) {
          moveBy--;
        }

        var pageDescendants;

        if (searchBackwards) {
          var _pageDescendants;

          pageDescendants = [rootModel];

          (_pageDescendants = pageDescendants).push.apply(_pageDescendants, _toConsumableArray(rootModel.getAllDescendantModels(true)));

          pageDescendants.reverse();
        } else {
          pageDescendants = rootModel.getAllDescendantModels(false);
          pageDescendants.push(rootModel);
        }

        var modelId = this.get('_id');
        var modelIndex = pageDescendants.findIndex(function (pageDescendant) {
          if (pageDescendant.get('_id') === modelId) {
            return true;
          }

          return false;
        });
        var isFilterFunction = typeof options.filter === 'function';

        if (options.loop) {
          var totalOfType = pageDescendants.reduce(function (count, model) {
            if (!model.isTypeGroup(relativeDescriptor.type)) return count;
            return ++count;
          }, 0);
          moveBy = moveBy % totalOfType;
          pageDescendants = pageDescendants.concat(pageDescendants.slice(0));
        }

        for (var i = modelIndex, l = pageDescendants.length; i < l; i++) {
          var descendant = pageDescendants[i];
          if (!descendant.isTypeGroup(relativeDescriptor.type)) continue;
          var isSelf = i === modelIndex;
          if (!isSelf && isFilterFunction && !options.filter(descendant)) continue;

          if (movementCount > moveBy) {
            break;
          }

          if (movementCount === moveBy) {
            return data$1.findById(descendant.get('_id'));
          }

          movementCount++;
        }
      }
    }, {
      key: "hasManagedChildren",
      get: function () {
        return true;
      }
    }, {
      key: "getChildren",
      value: function getChildren() {
        if (this._childrenCollection) {
          return this._childrenCollection;
        }

        var childrenCollection;

        if (!this.hasManagedChildren) {
          childrenCollection = new Backbone.Collection();
        } else {
          var id = this.get('_id');
          var children = data$1.filter(function (model) {
            return model.get('_parentId') === id;
          });
          childrenCollection = new Backbone.Collection(children);
        }

        if (this.get('_type') === 'block' && childrenCollection.length === 2 && childrenCollection.models[0].get('_layout') !== 'left') {
          childrenCollection.comparator = '_layout';
          childrenCollection.sort();
        }

        this.setChildren(childrenCollection);
        return this._childrenCollection;
      }
    }, {
      key: "setChildren",
      value: function setChildren(children) {
        this._childrenCollection = children;
        this.set('_children', children);
      }
    }, {
      key: "getAvailableChildModels",
      value: function getAvailableChildModels() {
        return this.getChildren().where({
          _isAvailable: true
        });
      }
    }, {
      key: "getParent",
      value: function getParent() {
        if (this._parentModel) {
          return this._parentModel;
        }

        var parentId = this.get('_parentId');
        if (!parentId) return;
        this.setParent(data$1.findById(parentId));
        return this._parentModel;
      }
    }, {
      key: "setParent",
      value: function setParent(parent) {
        this._parentModel = parent;
        this.set('_parentId', this._parentModel.get('_id'));
        this.set('_parent', this._parentModel);
      }
    }, {
      key: "getAncestorModels",
      value: function getAncestorModels(shouldIncludeChild) {
        var parents = [];
        var context = this;
        if (shouldIncludeChild) parents.push(context);

        while (context.has('_parentId')) {
          context = context.getParent();
          parents.push(context);
        }

        return parents.length ? parents : null;
      }
    }, {
      key: "getSiblings",
      value: function getSiblings(passSiblingsAndIncludeSelf) {
        var id = this.get('_id');
        var parentId = this.get('_parentId');
        var siblings;

        if (!passSiblingsAndIncludeSelf) {
          if (this._hasSiblingsAndSelf === false) {
            return this.get('_siblings');
          }

          siblings = data$1.filter(function (model) {
            return model.get('_parentId') === parentId && model.get('_id') !== id;
          });
          this._hasSiblingsAndSelf = false;
        } else {
          if (this._hasSiblingsAndSelf) {
            return this.get('_siblings');
          }

          siblings = data$1.filter(function (model) {
            return model.get('_parentId') === parentId;
          });
          this._hasSiblingsAndSelf = true;
        }

        var siblingsCollection = new Backbone.Collection(siblings);
        this.set('_siblings', siblingsCollection);
        return siblingsCollection;
      }
    }, {
      key: "setOnChildren",
      value: function setOnChildren() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        this.set.apply(this, args);
        if (!this.hasManagedChildren) return;
        var children = this.getChildren();
        children.models.forEach(function (child) {
          return child.setOnChildren.apply(child, args);
        });
      }
    }, {
      key: "setOptional",
      value: function setOptional(value) {
        logging$1.deprecated('Use model.set(\'_isOptional\', value) as setOptional() may be removed in the future');
        this.set({
          _isOptional: value
        });
      }
    }, {
      key: "checkLocking",
      value: function checkLocking() {
        var lockType = this.get('_lockType');
        if (!lockType) return;

        switch (lockType) {
          case 'sequential':
            this.setSequentialLocking();
            break;

          case 'unlockFirst':
            this.setUnlockFirstLocking();
            break;

          case 'lockLast':
            this.setLockLastLocking();
            break;

          case 'custom':
            this.setCustomLocking();
            break;

          default:
            console.warn("AdaptModel.checkLocking: unknown _lockType '".concat(lockType, "' found on ").concat(this.get('_id')));
        }
      }
    }, {
      key: "setSequentialLocking",
      value: function setSequentialLocking() {
        var children = this.getAvailableChildModels();
        children.slice(1).forEach(function (child, index) {
          var previousChild = children[index];
          var isLockedByPreviousChild = previousChild.get('_isLocked') || !previousChild.get('_isComplete') && !previousChild.get('_isOptional');
          child.set('_isLocked', isLockedByPreviousChild);
        }, false);
      }
    }, {
      key: "setUnlockFirstLocking",
      value: function setUnlockFirstLocking() {
        var children = this.getAvailableChildModels();
        var firstChild = children.shift();
        var isLockedByFirstChild = !firstChild.get('_isComplete') && !firstChild.get('_isOptional');
        children.forEach(function (child) {
          return child.set('_isLocked', isLockedByFirstChild);
        });
      }
    }, {
      key: "setLockLastLocking",
      value: function setLockLastLocking() {
        var children = this.getAvailableChildModels();
        var lastChild = children.pop();
        var isLockedByChildren = children.some(function (child) {
          return !child.get('_isComplete') && !child.get('_isOptional');
        });
        lastChild.set('_isLocked', isLockedByChildren);
      }
    }, {
      key: "setCustomLocking",
      value: function setCustomLocking() {
        var _this4 = this;

        var children = this.getAvailableChildModels();
        children.forEach(function (child) {
          return child.set('_isLocked', _this4.shouldLock(child));
        });
      }
    }, {
      key: "shouldLock",
      value: function shouldLock(child) {
        var lockedBy = child.get('_lockedBy');
        if (!lockedBy) return false;
        return lockedBy.some(function (id) {
          try {
            var anotherModel = data$1.findById(id);
            return anotherModel.get('_isAvailable') && (anotherModel.get('_isLocked') || !anotherModel.get('_isComplete') && !anotherModel.get('_isOptional'));
          } catch (e) {
            console.warn("AdaptModel.shouldLock: unknown _lockedBy ID '".concat(id, "' found on ").concat(child.get('_id')));
            return false;
          }
        });
      }
    }, {
      key: "onIsComplete",
      value: function onIsComplete() {
        this.checkCompletionStatus();
        this.checkLocking();
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.get('_isResetOnRevisit');
        this.reset(isResetOnRevisit);
      }
    }, {
      key: "deepClone",
      value: function deepClone() {
        var modifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var ModelClass = this.constructor;
        var clonedModel = new ModelClass(this.toJSON());

        if (modifier) {
          modifier(clonedModel, this);
        }

        var clonedId = clonedModel.get('_id');
        var hasId = Boolean(clonedId);
        var shouldAssignUniqueId = this.get('_id') === clonedId;

        if (hasId && shouldAssignUniqueId) {
          var cid = _.uniqueId(ModelClass.prototype.cidPrefix || 'c');

          clonedId = "".concat(clonedId, "_").concat(cid);
          clonedModel.set('_id', clonedId);
        }

        if (hasId) {
          data$1.add(clonedModel);
        }

        if (this.hasManagedChildren) {
          this.getChildren().each(function (child) {
            if (!child.deepClone) {
              throw new Error('Cannot deepClone child.');
            }

            child.deepClone(function (clone, child) {
              if (hasId) {
                clone.set('_parentId', clonedId);
              }

              if (modifier) {
                modifier(clone, child);
              }
            });
          });
        }

        clonedModel.getParent().getChildren().add(clonedModel);
        clonedModel.setupModel();
        return clonedModel;
      }
    }, {
      key: "onAll",
      value: function onAll(type, model, value) {
        if (!_.result(this, 'bubblingEvents').includes(type)) return;
        var event = new ModelEvent(type, model, value);
        this.bubble(event);
      }
    }, {
      key: "bubble",
      value: function bubble(event) {
        if (!event.canBubble) return;
        event.addPath(this);
        this.trigger("bubble:".concat(event.type, " bubble"), event);
      }
    }]);

    return AdaptModel;
  }(LockingModel));

  var ContentObjectModel = __AMD("core/js/models/contentObjectModel", function (_AdaptModel) {
    _inherits(ContentObjectModel, _AdaptModel);

    var _super = _createSuper(ContentObjectModel);

    function ContentObjectModel() {
      _classCallCheck(this, ContentObjectModel);

      return _super.apply(this, arguments);
    }

    _createClass(ContentObjectModel, [{
      key: "_parent",
      get: function () {
        logging$1.deprecated('contentObjectModel._parent, use contentObjectModel.getParent() instead, parent models are defined by the JSON');
        var isParentCourse = this.get('_parentId') === Adapt$1.course.get('_id');

        if (isParentCourse) {
          return 'course';
        }

        return 'contentObjects';
      }
    }, {
      key: "_siblings",
      get: function () {
        logging$1.deprecated('contentObjectModel._siblings, use contentObjectModel.getSiblings() instead, sibling models are defined by the JSON');
        return 'contentObjects';
      }
    }, {
      key: "_children",
      get: function () {
        logging$1.deprecated('contentObjectModel._children, use contentObjectModel.hasManagedChildren instead, child models are defined by the JSON');
        return null;
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'contentobject';
      }
    }]);

    return ContentObjectModel;
  }(AdaptModel));

  var ArticleModel = function (_AdaptModel) {
    _inherits(ArticleModel, _AdaptModel);

    var _super = _createSuper(ArticleModel);

    function ArticleModel() {
      _classCallCheck(this, ArticleModel);

      return _super.apply(this, arguments);
    }

    _createClass(ArticleModel, [{
      key: "_parent",
      get: function () {
        logging$1.deprecated('articleModel._parent, use articleModel.getParent() instead, parent models are defined by the JSON');
        return 'contentObjects';
      }
    }, {
      key: "_siblings",
      get: function () {
        logging$1.deprecated('articleModel._siblings, use articleModel.getSiblings() instead, sibling models are defined by the JSON');
        return 'articles';
      }
    }, {
      key: "_children",
      get: function () {
        logging$1.deprecated('articleModel._children, use articleModel.hasManagedChildren instead, child models are defined by the JSON');
        return 'blocks';
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'article';
      }
    }]);

    return ArticleModel;
  }(AdaptModel);

  components$1.register('article', {
    model: ArticleModel
  });
  var ArticleModel$1 = __AMD("core/js/models/articleModel", ArticleModel);

  var BlockModel = function (_AdaptModel) {
    _inherits(BlockModel, _AdaptModel);

    var _super = _createSuper(BlockModel);

    function BlockModel() {
      _classCallCheck(this, BlockModel);

      return _super.apply(this, arguments);
    }

    _createClass(BlockModel, [{
      key: "_parent",
      get: function () {
        logging$1.deprecated('blockModel._parent, use blockModel.getParent() instead, parent models are defined by the JSON');
        return 'articles';
      }
    }, {
      key: "_siblings",
      get: function () {
        logging$1.deprecated('blockModel._siblings, use blockModel.getSiblings() instead, sibling models are defined by the JSON');
        return 'blocks';
      }
    }, {
      key: "_children",
      get: function () {
        logging$1.deprecated('blockModel._children, use blockModel.hasManagedChildren instead, child models are defined by the JSON');
        return 'components';
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'block';
      }
    }]);

    return BlockModel;
  }(AdaptModel);

  components$1.register('block', {
    model: BlockModel
  });
  var BlockModel$1 = __AMD("core/js/models/blockModel", BlockModel);

  var ComponentModel = function (_AdaptModel) {
    _inherits(ComponentModel, _AdaptModel);

    var _super = _createSuper(ComponentModel);

    function ComponentModel() {
      _classCallCheck(this, ComponentModel);

      return _super.apply(this, arguments);
    }

    _createClass(ComponentModel, [{
      key: "_parent",
      get: function () {
        logging$1.deprecated('componentModel._parent, use componentModel.getParent() instead, parent models are defined by the JSON');
        return 'blocks';
      }
    }, {
      key: "_siblings",
      get: function () {
        logging$1.deprecated('componentModel._siblings, use componentModel.getSiblings() instead, sibling models are defined by the JSON');
        return 'components';
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'component';
      }
    }, {
      key: "defaults",
      value: function defaults() {
        return AdaptModel.resultExtend('defaults', {
          _isA11yComponentDescriptionEnabled: true,
          _userAnswer: null,
          _attemptStates: null
        });
      }
    }, {
      key: "trackable",
      value: function trackable() {
        return AdaptModel.resultExtend('trackable', ['_userAnswer', '_attemptStates']);
      }
    }, {
      key: "trackableType",
      value: function trackableType() {
        return AdaptModel.resultExtend('trackableType', [Array, Array]);
      }
    }, {
      key: "hasManagedChildren",
      get: function () {
        return false;
      }
    }, {
      key: "init",
      value: function init() {
        if (Adapt$1.get('_isStarted')) {
          this.onAdaptInitialize();
          return;
        }

        this.listenToOnce(Adapt$1, 'adapt:initialize', this.onAdaptInitialize);
      }
    }, {
      key: "onAdaptInitialize",
      value: function onAdaptInitialize() {
        this.restoreUserAnswers();
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {}
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {}
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        this.set('_userAnswer', null);
      }
    }, {
      key: "reset",
      value: function reset() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hard';
        var canReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.get('_canReset');

        var wasReset = _get(_getPrototypeOf(ComponentModel.prototype), "reset", this).call(this, type, canReset);

        if (!wasReset) return false;
        this.resetUserAnswer();
        return true;
      }
    }, {
      key: "getAttemptState",
      value: function getAttemptState() {
        var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.toJSON();
        var trackables = this.trackable();
        var types = this.trackableType();
        trackables.find(function (name, index) {
          if (name !== '_attemptStates') return false;
          trackables.splice(index, 1);
          types.splice(index, 1);
          return true;
        });
        var values = trackables.map(function (n) {
          return object[n];
        });
        var booleans = values.filter(function (v, i) {
          return types[i] === Boolean;
        }).map(Boolean);
        var numbers = values.filter(function (v, i) {
          return types[i] === Number;
        }).map(function (v) {
          return Number(v) || 0;
        });
        var arrays = values.filter(function (v, i) {
          return types[i] === Array;
        });
        return [numbers, booleans, arrays];
      }
    }, {
      key: "getAttemptObject",
      value: function getAttemptObject() {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getAttemptState();
        var trackables = this.trackable();
        var types = this.trackableType();
        trackables.find(function (name, index) {
          if (name !== '_attemptStates') return false;
          trackables.splice(index, 1);
          types.splice(index, 1);
          return true;
        });
        var numbers = (state[0] || []).slice(0);
        var booleans = (state[1] || []).slice(0);
        var arrays = (state[2] || []).slice(0);
        var object = {};
        trackables.forEach(function (n, i) {
          if (n === '_id') return;

          switch (types[i]) {
            case Number:
              object[n] = numbers.shift();
              break;

            case Boolean:
              object[n] = booleans.shift();
              break;

            case Array:
              object[n] = arrays.shift();
              break;
          }
        });
        return object;
      }
    }, {
      key: "setAttemptObject",
      value: function setAttemptObject(object) {
        var silent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.set(object, {
          silent: silent
        });
      }
    }, {
      key: "addAttemptObject",
      value: function addAttemptObject() {
        var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getAttemptObject();
        var attemptStates = this.get('_attemptStates') || [];
        var state = this.getAttemptState(object);
        attemptStates.push(state);
        this.set('_attemptStates', attemptStates);
      }
    }, {
      key: "getAttemptObjects",
      value: function getAttemptObjects() {
        var _this = this;

        var states = this.get('_attemptStates') || [];
        return states.map(function (state) {
          return _this.getAttemptObject(state);
        });
      }
    }]);

    return ComponentModel;
  }(AdaptModel);

  components$1.register('component', {
    model: ComponentModel
  });
  var ComponentModel$1 = __AMD("core/js/models/componentModel", ComponentModel);

  var MenuModel = function (_ContentObjectModel) {
    _inherits(MenuModel, _ContentObjectModel);

    var _super = _createSuper(MenuModel);

    function MenuModel() {
      _classCallCheck(this, MenuModel);

      return _super.apply(this, arguments);
    }

    _createClass(MenuModel, [{
      key: "_children",
      get: function () {
        logging$1.deprecated('menuModel._children, use menuModel.hasManagedChildren instead, child models are defined by the JSON');
        return 'contentObjects';
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'menu';
      }
    }, {
      key: "setCustomLocking",
      value: function setCustomLocking() {
        var _this = this;

        var children = this.getAvailableChildModels();
        children.forEach(function (child) {
          child.set('_isLocked', _this.shouldLock(child));
          if (!(child instanceof MenuModel)) return;
          child.checkLocking();
        });
      }
    }]);

    return MenuModel;
  }(ContentObjectModel);

  components$1.register('menu', {
    model: MenuModel
  });
  var MenuModel$1 = __AMD("core/js/models/menuModel", MenuModel);

  var CourseModel = function (_MenuModel) {
    _inherits(CourseModel, _MenuModel);

    var _super = _createSuper(CourseModel);

    function CourseModel() {
      _classCallCheck(this, CourseModel);

      return _super.apply(this, arguments);
    }

    _createClass(CourseModel, [{
      key: "_parent",
      get: function () {
        logging$1.deprecated('courseModel._parent, use courseModel.getParent() instead, parent models are defined by the JSON');
        return null;
      }
    }, {
      key: "_siblings",
      get: function () {
        logging$1.deprecated('courseModel._siblings, use courseModel.getSiblings() instead, sibling models are defined by the JSON');
        return null;
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'course';
      }
    }]);

    return CourseModel;
  }(MenuModel$1);

  components$1.register('course', {
    model: CourseModel
  });
  var CourseModel$1 = __AMD("core/js/models/courseModel", CourseModel);

  var PageModel = function (_ContentObjectModel) {
    _inherits(PageModel, _ContentObjectModel);

    var _super = _createSuper(PageModel);

    function PageModel() {
      _classCallCheck(this, PageModel);

      return _super.apply(this, arguments);
    }

    _createClass(PageModel, [{
      key: "_children",
      get: function () {
        logging$1.deprecated('pageModel._children, use menuModel.hasManagedChildren instead, child models are defined by the JSON');
        return 'articles';
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'page';
      }
    }]);

    return PageModel;
  }(ContentObjectModel);

  components$1.register('page', {
    model: PageModel
  });
  __AMD("core/js/models/pageModel", PageModel);

  var ContentObjectView = __AMD("core/js/views/contentObjectView", function (_AdaptView) {
    _inherits(ContentObjectView, _AdaptView);

    var _super = _createSuper(ContentObjectView);

    function ContentObjectView() {
      _classCallCheck(this, ContentObjectView);

      return _super.apply(this, arguments);
    }

    _createClass(ContentObjectView, [{
      key: "attributes",
      value: function attributes() {
        return AdaptView$1.resultExtend('attributes', {
          role: 'main',
          'aria-labelledby': "".concat(this.model.get('_id'), "-heading")
        }, this);
      }
    }, {
      key: "className",
      value: function className() {
        return [this.constructor.type, 'contentobject', this.constructor.className, this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : ''].filter(Boolean).join(' ');
      }
    }, {
      key: "preRender",
      value: function preRender() {
        $.inview.lock(this.constructor.type + 'View');
        this.disableAnimation = Adapt$1.config.has('_disableAnimation') ? Adapt$1.config.get('_disableAnimation') : false;
        this.$el.css('opacity', 0);
        this.listenTo(this.model, 'change:_isReady', this.isReady);
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var type = this.constructor.type;
        Adapt$1.trigger("".concat(type, "View:preRender contentObjectView:preRender view:preRender"), this);

        if (this.isReact) {
          this.changed();
        } else {
          var data = this.model.toJSON();
          data.view = this;
          var template = Handlebars.templates[this.constructor.template];
          this.$el.html(template(data));
        }

        Adapt$1.trigger("".concat(type, "View:render contentObjectView:render view:render"), this);

        _.defer(function () {
          if (_this._isRemoved) return;

          _this.postRender();

          Adapt$1.trigger("".concat(type, "View:postRender contentObjectView:postRender view:postRender"), _this);
        });

        return this;
      }
    }, {
      key: "isReady",
      value: function () {
        var _isReady = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          var _this2 = this;

          var type, performIsReady;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!(!this.model.get('_isReady') || this._isTriggeredReady)) {
                    _context2.next = 2;
                    break;
                  }

                  return _context2.abrupt("return");

                case 2:
                  this._isTriggeredReady = true;
                  type = this.constructor.type;

                  performIsReady = function () {
                    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
                      var styleOptions;
                      return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              Adapt$1.trigger("".concat(type, "View:preReady contentObjectView:preReady view:preReady"), _this2);
                              _context.next = 3;
                              return wait$1.queue();

                            case 3:
                              $('.js-loading').hide();

                              if (Adapt$1.get('_shouldContentObjectScrollTop') !== false) {
                                $(window).scrollTop(0);
                              }

                              Adapt$1.trigger("".concat(type, "View:ready contentObjectView:ready view:ready"), _this2);
                              $.inview.unlock("".concat(type, "View"));
                              styleOptions = {
                                opacity: 1
                              };

                              if (_this2.disableAnimation) {
                                _this2.$el.css(styleOptions);

                                $.inview();

                                _.defer(function () {
                                  Adapt$1.trigger("".concat(type, "View:postReady contentObjectView:postReady view:postReady"), _this2);
                                });
                              } else {
                                _this2.$el.velocity(styleOptions, {
                                  duration: 'fast',
                                  complete: function () {
                                    $.inview();
                                    Adapt$1.trigger("".concat(type, "View:postReady contentObjectView:postReady view:postReady"), _this2);
                                  }
                                });
                              }

                              $(window).scroll();

                            case 10:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));

                    return function performIsReady() {
                      return _ref.apply(this, arguments);
                    };
                  }();

                  _.defer(performIsReady);

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function isReady() {
          return _isReady.apply(this, arguments);
        }

        return isReady;
      }()
    }, {
      key: "renderTo",
      value: function () {
        var _renderTo = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(id) {
          var isRenderToSelf, models, index, model, isLocked, ids, forceUntilId;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  isRenderToSelf = id === this.model.get('_id');

                  if (!isRenderToSelf) {
                    _context3.next = 3;
                    break;
                  }

                  return _context3.abrupt("return");

                case 3:
                  models = this.model.getAllDescendantModels(true).filter(function (model) {
                    return model.get('_isAvailable');
                  });
                  index = models.findIndex(function (model) {
                    return model.get('_id') === id;
                  });

                  if (!(index === -1)) {
                    _context3.next = 7;
                    break;
                  }

                  throw new Error("Cannot renderTo \"".concat(id, "\" as it isn't a descendant."));

                case 7:
                  model = models[index];

                  if (!(model.get('_isRendered') && model.get('_isReady'))) {
                    _context3.next = 10;
                    break;
                  }

                  return _context3.abrupt("return");

                case 10:
                  models = models.slice(0, index + 1);
                  isLocked = models.some(function (model) {
                    return model.get('_isLocked');
                  });

                  if (!isLocked) {
                    _context3.next = 14;
                    break;
                  }

                  throw new Error("Cannot renderTo ".concat(id, " as it is preceded by locked content"));

                case 14:
                  ids = _.indexBy(models, function (model) {
                    return model.get('_id');
                  });

                  forceUntilId = function (event) {
                    var addingId = event.model.get('_id');
                    if (!ids[addingId]) return;
                    event.force();
                    if (addingId !== id) return;
                    Adapt$1.off('view:addChild', forceUntilId);
                  };

                  Adapt$1.on('view:addChild', forceUntilId);
                  _context3.next = 19;
                  return this.addChildren();

                case 19:
                  _context3.next = 21;
                  return this.whenReady();

                case 21:
                  if (!(!model.get('_isRendered') || !model.get('_isReady'))) {
                    _context3.next = 23;
                    break;
                  }

                  throw new Error("Cannot renderTo \"".concat(id, "\"."));

                case 23:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function renderTo(_x) {
          return _renderTo.apply(this, arguments);
        }

        return renderTo;
      }()
    }, {
      key: "preRemove",
      value: function preRemove() {
        var type = this.constructor.type;
        Adapt$1.trigger("".concat(type, "View:preRemove contentObjectView:preRemove view:preRemove"), this);
      }
    }, {
      key: "remove",
      value: function remove() {
        var _this3 = this;

        var type = this.constructor.type;
        this.preRemove();
        Adapt$1.trigger("".concat(type, "View:remove contentObjectView:remove view:remove"), this);
        this._isRemoved = true;
        wait$1.for(function (end) {
          if (_this3.isReact) {
            ReactDOM__default["default"].unmountComponentAtNode(_this3.el);
          }

          _this3.$el.off('onscreen.adaptView');

          _this3.findDescendantViews().reverse().forEach(function (view) {
            view.remove();
          });

          _this3.setChildViews(null);

          _get(_getPrototypeOf(ContentObjectView.prototype), "remove", _this3).call(_this3);

          _.defer(function () {
            Adapt$1.trigger("".concat(type, "View:postRemove contentObjectView:postRemove view:postRemove"), _this3);

            _this3.trigger('postRemove');
          });

          end();
        });
        return this;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.remove();

        if (Adapt$1.parentView === this) {
          Adapt$1.parentView = null;
        }
      }
    }]);

    return ContentObjectView;
  }(AdaptView$1));

  var PageView = function (_ContentObjectView) {
    _inherits(PageView, _ContentObjectView);

    var _super = _createSuper(PageView);

    function PageView() {
      _classCallCheck(this, PageView);

      return _super.apply(this, arguments);
    }

    _createClass(PageView, [{
      key: "remove",
      value: function remove() {
        if (this.$pageLabel) {
          this.$pageLabel.remove();
        }

        _get(_getPrototypeOf(PageView.prototype), "remove", this).call(this);
      }
    }]);

    return PageView;
  }(ContentObjectView);

  Object.assign(PageView, {
    childContainer: '.article__container',
    type: 'page',
    template: 'page'
  });
  components$1.register('page', {
    view: PageView
  });
  __AMD("core/js/views/pageView", PageView);

  var ArticleView = function (_AdaptView) {
    _inherits(ArticleView, _AdaptView);

    var _super = _createSuper(ArticleView);

    function ArticleView() {
      _classCallCheck(this, ArticleView);

      return _super.apply(this, arguments);
    }

    _createClass(ArticleView, [{
      key: "className",
      value: function className() {
        return ['article', this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.setHidden(), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : ''].join(' ');
      }
    }]);

    return ArticleView;
  }(AdaptView$1);

  Object.assign(ArticleView, {
    childContainer: '.block__container',
    type: 'article',
    template: 'article'
  });
  components$1.register('article', {
    view: ArticleView
  });
  var ArticleView$1 = __AMD("core/js/views/articleView", ArticleView);

  var BlockView = function (_AdaptView) {
    _inherits(BlockView, _AdaptView);

    var _super = _createSuper(BlockView);

    function BlockView() {
      _classCallCheck(this, BlockView);

      return _super.apply(this, arguments);
    }

    _createClass(BlockView, [{
      key: "className",
      value: function className() {
        return ['block', this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.setHidden(), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : ''].join(' ');
      }
    }]);

    return BlockView;
  }(AdaptView$1);

  Object.assign(BlockView, {
    childContainer: '.component__container',
    type: 'block',
    template: 'block'
  });
  components$1.register('block', {
    view: BlockView
  });
  __AMD("core/js/views/blockView", BlockView);

  var MPABC = function (_Backbone$Controller) {
    _inherits(MPABC, _Backbone$Controller);

    var _super = _createSuper(MPABC);

    function MPABC() {
      _classCallCheck(this, MPABC);

      return _super.apply(this, arguments);
    }

    _createClass(MPABC, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(data$1, {
          loading: this.waitForDataLoaded,
          loaded: this.onDataLoaded
        });
        this.setupSubsetCollections();
      }
    }, {
      key: "waitForDataLoaded",
      value: function waitForDataLoaded() {
        wait$1.begin();
      }
    }, {
      key: "onDataLoaded",
      value: function onDataLoaded() {
        wait$1.end();
      }
    }, {
      key: "setupSubsetCollections",
      value: function setupSubsetCollections() {
        Adapt$1.contentObjects = new AdaptSubsetCollection(null, {
          parent: data$1,
          model: ContentObjectModel
        });
        Adapt$1.articles = new AdaptSubsetCollection(null, {
          parent: data$1,
          model: ArticleModel$1
        });
        Adapt$1.blocks = new AdaptSubsetCollection(null, {
          parent: data$1,
          model: BlockModel$1
        });
        Adapt$1.components = new AdaptSubsetCollection(null, {
          parent: data$1,
          model: ComponentModel$1
        });
      }
    }]);

    return MPABC;
  }(Backbone.Controller);

  var mpabc = new MPABC();
  Object.defineProperty(Adapt$1, 'mpabc', {
    get: function () {
      logging$1.deprecated('Adapt.mpabc, please use core/js/mpabc directly');
      return mpabc;
    }
  });
  __AMD("core/js/mpabc", mpabc);

  var helpers$1 = {
    lowercase: function (text) {
      return text.toLowerCase();
    },
    capitalise: function (text) {
      return text.charAt(0).toUpperCase() + text.slice(1);
    },
    inc: function (index) {
      return index + 1;
    },
    dec: function (index) {
      return index - 1;
    },
    odd: function (index) {
      return (index + 1) % 2 === 0 ? 'even' : 'odd';
    },
    equals: function (value, text, block) {
      return helpers$1.compare.call(this, value, '==', text, block);
    },
    compare: function (value, operator, text, block) {
      switch (operator) {
        case '===':
          if (value === text) return block.fn(this);
          break;

        case '=':
        case '==':
          if (value == text) return block.fn(this);
          break;

        case '>=':
          if (value >= text) return block.fn(this);
          break;

        case '<=':
          if (value <= text) return block.fn(this);
          break;

        case '>':
          if (value > text) return block.fn(this);
          break;

        case '<':
          if (value < text) return block.fn(this);
          break;
      }

      return block.inverse(this);
    },
    math: function (lvalue, operator, rvalue, options) {
      lvalue = parseFloat(lvalue);
      rvalue = parseFloat(rvalue);

      switch (operator) {
        case '+':
          return lvalue + rvalue;

        case '-':
          return lvalue - rvalue;

        case '*':
          return lvalue * rvalue;

        case '/':
          return lvalue / rvalue;

        case '%':
          return lvalue % rvalue;
      }
    },
    any: function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var specified = args.slice(0, -1);
      var block = args.slice(-1)[0];
      return specified.some(Boolean) ? block.fn ? block.fn(this) : true : block.inverse ? block.inverse(this) : false;
    },
    all: function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var specified = args.slice(0, -1);
      var block = args.slice(-1)[0];
      return specified.every(Boolean) ? block.fn ? block.fn(this) : true : block.inverse ? block.inverse(this) : false;
    },
    none: function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var specified = args.slice(0, -1);
      var block = args.slice(-1)[0];
      return !specified.some(Boolean) ? block.fn ? block.fn(this) : true : block.inverse ? block.inverse(this) : false;
    },
    compile: function (template, context) {
      var _context$data;

      if (!template) return '';
      if (template instanceof Object) template = template.toString();
      var data = context !== null && context !== void 0 && (_context$data = context.data) !== null && _context$data !== void 0 && _context$data.root ? this : context;
      return Handlebars.compile(template)(data);
    },
    compile_a11y_text: function (template, context) {
      a11y$1.log.deprecated('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
      return helpers$1.compile.call(this, template, context);
    },
    compile_a11y_normalize: function (template, context) {
      if (!template) {
        return '';
      }

      if (template instanceof Object) template = template.toString();
      return Handlebars.helpers.a11y_normalize.call(this, helpers$1.compile.call(this, template, context));
    },
    compile_a11y_remove_breaks: function (template, context) {
      if (!template) {
        return '';
      }

      return Handlebars.helpers.a11y_remove_breaks.call(this, helpers$1.compile.call(this, template, context));
    },
    import_globals: function (context) {
      if (context.data.root._globals) {
        return '';
      }

      context.data.root._globals = Adapt$1.course.get('_globals');
      return '';
    },
    import_adapt: function (context) {
      if (context.data.root.Adapt) {
        return;
      }

      var adapt = context.data.root.Adapt = {};
      var i, l, name;
      var directImport = ['config', 'course'];

      for (i = 0, l = directImport.length; i < l; i++) {
        name = directImport[i];
        adapt[name] = Adapt$1[name].toJSON();
      }

      var indexedImport = ['contentObjects', 'articles', 'blocks', 'components'];

      for (i = 0, l = indexedImport.length; i < l; i++) {
        name = indexedImport[i];
        var importArray = Adapt$1[name].toJSON();
        var importIndex = {};

        for (var i1 = 0, l1 = importArray.length; i1 < l1; i1++) {
          var item = importArray[i1];
          importIndex[item._id] = item;
        }

        adapt[name] = importIndex;
      }

      return '';
    },
    component_description: function (override, context) {
      var _this$_globals$_compo;

      if (!this._isA11yComponentDescriptionEnabled) {
        return;
      }

      var isNotDefined = !((_this$_globals$_compo = this._globals._components) !== null && _this$_globals$_compo !== void 0 && _this$_globals$_compo['_' + this._component]);

      if (isNotDefined) {
        return;
      }

      var hasOverride = arguments.length > 1;
      var description;

      if (hasOverride) {
        description = override;
        description = helpers$1.compile(description, context);
      } else {
        description = this._globals._components['_' + this._component].ariaRegion;
        description = helpers$1.compile(description, override);
      }

      if (!description) {
        return;
      }

      return new Handlebars.SafeString('<div class="aria-label">' + description + '</div>');
    },
    a11y_text: function (text) {
      a11y$1.log.deprecated('a11y_text is no longer required. https://tink.uk/understanding-screen-reader-interaction-modes/');
      return text;
    },
    a11y_normalize: function (htmls) {
      return a11y$1.normalize.apply(a11y$1, arguments);
    },
    a11y_remove_breaks: function (htmls) {
      return a11y$1.removeBreaks.apply(a11y$1, arguments);
    },
    a11y_aria_label: function (htmls) {
      var values = Array.prototype.slice.call(arguments, 0, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<div class="aria-label">' + values.join(' ') + '</div>');
    },
    a11y_aria_label_relative: function (htmls) {
      var values = Array.prototype.slice.call(arguments, 0, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<div class="aria-label relative">' + values.join(' ') + '</div>');
    },
    a11y_aria_image: function (texts) {
      var values = Array.prototype.slice.call(arguments, 0, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<div class="aria-label" role="img" aria-label="' + values.join(' ') + '"></div>');
    },
    a11y_wrap_focus: function () {
      var cfg = Adapt$1.config.get('_accessibility');
      if (cfg._isPopupWrapFocusEnabled === false) return '';
      return new Handlebars.SafeString('<a class="a11y-focusguard a11y-ignore a11y-ignore-focus" role="presentation">&nbsp;</a>');
    },
    a11y_attrs_heading: function (levelOrType) {
      var level = a11y$1.ariaLevel(levelOrType, this._ariaLevel);
      return new Handlebars.SafeString(' role="heading" aria-level="' + level + '" ');
    },
    a11y_attrs_tabbable: function () {
      a11y$1.log.deprecated('a11y_attrs_tabbable should not be used. tabbable elements should be natively tabbable.');
      return new Handlebars.SafeString(' role="region" tabindex="0" ');
    },
    a11y_alt_text: function (visible, alternatives) {
      var values = Array.prototype.slice.call(arguments, 1, -1);
      values = values.filter(Boolean);
      return new Handlebars.SafeString('<span aria-hidden="true">' + visible + '</span><span class="aria-label">' + values.join(' ') + '</span>');
    }
  };
  Object.assign(helpers$1, {
    if_value_equals: function () {
      a11y$1.log.deprecated('if_value_equals, use equals instead.');
      return helpers$1.equals.apply(this, arguments);
    },
    numbers: function () {
      a11y$1.log.deprecated('numbers, use inc instead.');
      return helpers$1.inc.apply(this, arguments);
    },
    lowerCase: function () {
      a11y$1.log.deprecated('lowerCase, use lowercase instead.');
      return helpers$1.lowercase.apply(this, arguments);
    }
  });

  for (var name$1 in helpers$1) {
    Handlebars.registerHelper(name$1, helpers$1[name$1]);
  }

  __AMD("core/js/helpers", helpers$1);

  var Scrolling = function (_Backbone$Controller) {
    _inherits(Scrolling, _Backbone$Controller);

    var _super = _createSuper(Scrolling);

    function Scrolling() {
      _classCallCheck(this, Scrolling);

      return _super.apply(this, arguments);
    }

    _createClass(Scrolling, [{
      key: "initialize",
      value: function initialize() {
        this.$html = $('html');
        this.isLegacyScrolling = true;
        Adapt$1.once('configModel:dataLoaded', this._loadConfig.bind(this));
      }
    }, {
      key: "_loadConfig",
      value: function _loadConfig() {
        var config = Adapt$1.config.get('_scrollingContainer');
        if (!(config !== null && config !== void 0 && config._isEnabled)) return;
        var limitTo = config._limitToSelector;
        var isIncluded = !limitTo || this.$html.is(limitTo) || this.$html.hasClass(limitTo);
        if (!isIncluded) return;
        this.isLegacyScrolling = false;

        this._windowScrollFix();

        this._addStyling();

        this._updateScrollbarWidth();

        this.listenTo(Adapt$1, 'device:resize', this._updateScrollbarWidth);
      }
    }, {
      key: "_addStyling",
      value: function _addStyling() {
        this.$html.addClass('adapt-scrolling');
      }
    }, {
      key: "_updateScrollbarWidth",
      value: function _updateScrollbarWidth() {
        var $tester = $('<div class="outer" style="overflow:scroll; visibility: hidden; position:fixed; top: 0; left: 0;"><div class="inner"> </div></div>"');
        $('body').append($tester);
        var scrollBarWidth = $tester.outerWidth() - $tester.find('.inner').outerWidth();
        $tester.remove();
        var documentStyle = document.documentElement.style;
        documentStyle.setProperty('--adapt-scrollbar-width', "".concat(scrollBarWidth, "px"));
      }
    }, {
      key: "_windowScrollFix",
      value: function _windowScrollFix() {
        var body = document.body;
        var html = Adapt$1.scrolling.$html[0];
        var scrollY = {
          get: function () {
            return body.scrollTop;
          },
          set: function (value) {
            return body.scrollTop = value;
          }
        };
        var scrollX = {
          get: function () {
            return body.scrollLeft;
          },
          set: function (value) {
            return body.scrollLeft = value;
          }
        };
        var scrollHeight = {
          get: function () {
            return body.scrollHeight;
          },
          set: function (value) {
            return body.scrollHeight = value;
          }
        };
        var scrollWidth = {
          get: function () {
            return body.scrollWidth;
          },
          set: function (value) {
            return body.scrollWidth = value;
          }
        };
        Object.defineProperties(window, {
          scrollY: scrollY,
          scrollX: scrollX,
          pageYOffset: scrollY,
          pageXOffset: scrollX
        });
        Object.defineProperties(html, {
          scrollHeight: scrollHeight,
          scrollWidth: scrollWidth
        });

        window.scrollTo = function () {
          var _ref, _ref2;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var isObject = args.length === 1 && _typeof(args[0]) === 'object' && args[0] !== null;
          var left = (_ref = isObject ? args[0].left : args[0]) !== null && _ref !== void 0 ? _ref : null;
          var top = (_ref2 = isObject ? args[0].top : args[1]) !== null && _ref2 !== void 0 ? _ref2 : null;
          left !== null && (body.scrollLeft = left);
          top !== null && (body.scrollTop = top);
        };

        var MouseEvent = window.MouseEvent;
        Object.defineProperties(MouseEvent.prototype, {
          pageX: {
            get: function () {
              return this.clientX + scrollX.get();
            }
          },
          pageY: {
            get: function () {
              return this.clientY + scrollY.get();
            }
          }
        });
        var $window = $(window);
        $(document.body).on('scroll', function () {
          return $window.scroll();
        });
      }
    }, {
      key: "scrollTo",
      value: function () {
        var _scrollTo = _asyncToGenerator(regeneratorRuntime.mark(function _callee(selector) {
          var settings,
              _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  settings = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                  logging$1.deprecated('Adapt.scrollTo and Adapt.scrolling.scrollTo, use router.navigateToElement instead.');
                  return _context.abrupt("return", router$1.navigateToElement(selector, settings));

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function scrollTo(_x) {
          return _scrollTo.apply(this, arguments);
        }

        return scrollTo;
      }()
    }]);

    return Scrolling;
  }(Backbone.Controller);

  var scrolling = new Scrolling();
  scrolling.scrollTo = scrolling.scrollTo.bind(scrolling);
  Object.defineProperties(Adapt$1, {
    scrolling: {
      get: function () {
        logging$1.deprecated('Adapt.scrolling, please use core/js/scrolling directly');
        return scrolling;
      }
    },
    scrollTo: {
      get: function () {
        logging$1.deprecated('Adapt.scrollTo, please use router.navigateToElement');
        return scrolling.scrollTo;
      }
    }
  });
  __AMD("core/js/scrolling", scrolling);

  var HeadingView = function (_Backbone$View) {
    _inherits(HeadingView, _Backbone$View);

    var _super = _createSuper(HeadingView);

    function HeadingView() {
      _classCallCheck(this, HeadingView);

      return _super.apply(this, arguments);
    }

    _createClass(HeadingView, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt$1.parentView, 'postRemove', this.remove);
        this.listenTo(this.model, 'change:_isComplete', this.updateAria);
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates[this.constructor.template];
        var data = this.model.toJSON();
        var customHeadingType = this.$el.attr('data-a11y-heading-type');
        if (customHeadingType) data._type = customHeadingType;
        this.$el.html(template(data));
        this.checkCompletion();
      }
    }, {
      key: "updateAria",
      value: function updateAria() {
        var template = Handlebars.templates[this.constructor.template];
        var data = this.model.toJSON();
        var $rendered = $("<div>".concat(template(data), "</div>"));
        this.$('.aria-label').html($rendered.find('.aria-label').html());
        this.checkCompletion();
      }
    }, {
      key: "checkCompletion",
      value: function checkCompletion() {
        var isComplete = this.model.get('_isComplete');
        this.$el.toggleClass('is-complete', isComplete).toggleClass('is-incomplete', !isComplete);
      }
    }]);

    return HeadingView;
  }(Backbone.View);

  HeadingView.template = 'heading';
  var HeadingView$1 = __AMD("core/js/views/headingView", HeadingView);

  var Headings = function (_Backbone$Controller) {
    _inherits(Headings, _Backbone$Controller);

    var _super = _createSuper(Headings);

    function Headings() {
      _classCallCheck(this, Headings);

      return _super.apply(this, arguments);
    }

    _createClass(Headings, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt$1, 'view:render', this.onViewRender);
      }
    }, {
      key: "onViewRender",
      value: function onViewRender(view) {
        var $headingSeats = view.$('.js-heading');
        $headingSeats.each(function (index, el) {
          return new HeadingView$1({
            el: el,
            model: view.model
          });
        });
      }
    }]);

    return Headings;
  }(Backbone.Controller);

  __AMD("core/js/headings", new Headings());

  var StartController = function (_Backbone$Controller) {
    _inherits(StartController, _Backbone$Controller);

    var _super = _createSuper(StartController);

    function StartController() {
      _classCallCheck(this, StartController);

      return _super.apply(this, arguments);
    }

    _createClass(StartController, [{
      key: "initialize",
      value: function initialize() {
        var _get2;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(StartController.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));

        this.model = null;
      }
    }, {
      key: "loadCourseData",
      value: function loadCourseData() {
        this.model = new LockingModel(Adapt$1.course.get('_start'));
      }
    }, {
      key: "setStartLocation",
      value: function setStartLocation() {
        if (!this.isEnabled()) return;
        window.history.replaceState('', '', this.getStartHash());
      }
    }, {
      key: "returnToStartLocation",
      value: function returnToStartLocation() {
        var startIds = this.model.get('_startIds');

        if (startIds) {
          startIds.forEach(function (startId) {
            return startId._skipIfComplete = false;
          });
        }

        window.location.hash = this.getStartHash(true);
      }
    }, {
      key: "getStartHash",
      value: function getStartHash(alwaysForce) {
        var startId = this.getStartId();
        var isRouteSpecified = window.location.href.indexOf('#') > -1;
        var shouldForceStartId = alwaysForce || this.model.get('_force');
        var shouldNavigateToStartId = startId && (!isRouteSpecified || shouldForceStartId);

        if (shouldNavigateToStartId && startId !== Adapt$1.course.get('_id')) {
          return '#/id/' + startId;
        }

        return window.location.hash || '#/';
      }
    }, {
      key: "isEnabled",
      value: function isEnabled() {
        var _this$model;

        return Boolean((_this$model = this.model) === null || _this$model === void 0 ? void 0 : _this$model.get('_isEnabled'));
      }
    }, {
      key: "getStartId",
      value: function getStartId() {
        var startId = this.model.get('_id');
        var startIds = this.model.get('_startIds');
        if (!(startIds !== null && startIds !== void 0 && startIds.length)) return startId;
        var $html = $('html');

        for (var i = 0, l = startIds.length; i < l; i++) {
          var item = startIds[i];
          var className = item._className;
          var skipIfComplete = item._skipIfComplete;
          var model = data$1.findById(item._id);

          if (!model) {
            console.log('startController: cannot find id', item._id);
            continue;
          }

          if (skipIfComplete) {
            if (model.get('_isComplete')) continue;
          }

          if (!className || $html.is(className) || $html.hasClass(className)) {
            startId = item._id;
            break;
          }
        }

        return startId;
      }
    }]);

    return StartController;
  }(Backbone.Controller);

  Adapt$1.once('adapt:start', function () {
    startController.loadCourseData();
    startController.setStartLocation();
  });
  Adapt$1.on('navigation:returnToStart', function () {
    startController.returnToStartLocation();
  });
  Adapt$1.on('app:languageChanged', function () {
    wait$1.for(function (done) {
      startController.loadCourseData();
      var hash = startController.isEnabled() ? startController.getStartHash(false) : '#/';
      router$1.navigate(hash, {
        trigger: true,
        replace: true
      });
      done();
    });
  });
  var startController = new StartController();
  Object.defineProperty(Adapt$1, 'startController', {
    get: function () {
      logging$1.deprecated('Adapt.startController, please use core/js/startController directly');
      return startController;
    }
  });
  var startController$1 = __AMD("core/js/startController", startController);

  var NavigationView$1 = function (_Backbone$View) {
    _inherits(NavigationView, _Backbone$View);

    var _super = _createSuper(NavigationView);

    function NavigationView() {
      _classCallCheck(this, NavigationView);

      return _super.apply(this, arguments);
    }

    _createClass(NavigationView, [{
      key: "className",
      value: function className() {
        return 'nav';
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click [data-event]': 'triggerEvent'
        };
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          role: 'navigation'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.sortNavigationButtons = _.debounce(this.sortNavigationButtons.bind(this), 1);
        this.listenToOnce(Adapt$1, {
          'courseModel:dataLoading': this.remove
        });
        this.listenTo(Adapt$1, 'router:menu router:page', this.onNavigate);
        this.preRender();
      }
    }, {
      key: "preRender",
      value: function preRender() {
        Adapt$1.trigger('navigationView:preRender', this);
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var template = Handlebars.templates[this.constructor.template];
        this.$el.html(template({
          _globals: Adapt$1.course.get('_globals'),
          _accessibility: Adapt$1.config.get('_accessibility')
        })).insertBefore('#app');

        _.defer(function () {
          Adapt$1.trigger('navigationView:postRender', _this);
        });

        return this;
      }
    }, {
      key: "triggerEvent",
      value: function triggerEvent(event) {
        event.preventDefault();
        var currentEvent = $(event.currentTarget).attr('data-event');
        Adapt$1.trigger('navigation:' + currentEvent);

        switch (currentEvent) {
          case 'backButton':
            router$1.navigateToPreviousRoute();
            break;

          case 'homeButton':
            router$1.navigateToHomeRoute();
            break;

          case 'parentButton':
            router$1.navigateToParent();
            break;

          case 'skipNavigation':
            this.skipNavigation();
            break;

          case 'returnToStart':
            startController$1.returnToStartLocation();
            break;
        }
      }
    }, {
      key: "skipNavigation",
      value: function skipNavigation() {
        a11y$1.focusFirst('.' + location$1._contentType);
      }
    }, {
      key: "onNavigate",
      value: function onNavigate(model) {
        this.hideNavigationButton(model);
        this.sortNavigationButtons();
      }
    }, {
      key: "hideNavigationButton",
      value: function hideNavigationButton(model) {
        var shouldHide = model.get('_type') === 'course';
        this.$('.nav__back-btn, .nav__home-btn').toggleClass('u-display-none', shouldHide);
      }
    }, {
      key: "sortNavigationButtons",
      value: function sortNavigationButtons() {
        var container = this.$('.nav__inner')[0];

        var items = _toConsumableArray(container.children);

        items.sort(function (a, b) {
          return parseFloat($(a).attr('data-order') || 0) - parseFloat($(b).attr('data-order') || 0);
        }).forEach(function (item) {
          return container.appendChild(item);
        });
      }
    }, {
      key: "showNavigationButton",
      value: function showNavigationButton() {
        this.$('.nav__back-btn, .nav__home-btn').removeClass('u-display-none');
      }
    }]);

    return NavigationView;
  }(Backbone.View);

  NavigationView$1.template = 'nav';
  var NavigationView$2 = __AMD("core/js/views/navigationView", NavigationView$1);

  var NavigationController = function (_Backbone$Controller) {
    _inherits(NavigationController, _Backbone$Controller);

    var _super = _createSuper(NavigationController);

    function NavigationController() {
      _classCallCheck(this, NavigationController);

      return _super.apply(this, arguments);
    }

    _createClass(NavigationController, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt$1, 'adapt:preInitialize', this.addNavigationBar);
      }
    }, {
      key: "addNavigationBar",
      value: function addNavigationBar() {
        var adaptConfig = Adapt$1.course.get('_navigation');

        if (adaptConfig !== null && adaptConfig !== void 0 && adaptConfig._isDefaultNavigationDisabled) {
          Adapt$1.trigger('navigation:initialize');
          return;
        }

        Adapt$1.navigation = new NavigationView$2();
      }
    }]);

    return NavigationController;
  }(Backbone.Controller);

  __AMD("core/js/navigation", new NavigationController());

  var ItemModel = __AMD("core/js/models/itemModel", function (_LockingModel) {
    _inherits(ItemModel, _LockingModel);

    var _super = _createSuper(ItemModel);

    function ItemModel() {
      _classCallCheck(this, ItemModel);

      return _super.apply(this, arguments);
    }

    _createClass(ItemModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _isActive: false,
          _isVisited: false,
          _score: 0
        };
      }
    }, {
      key: "reset",
      value: function reset() {
        this.set({
          _isActive: false,
          _isVisited: false
        });
      }
    }, {
      key: "toggleActive",
      value: function toggleActive() {
        var isActive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.get('_isActive');
        this.set('_isActive', isActive);
      }
    }, {
      key: "toggleVisited",
      value: function toggleVisited() {
        var isVisited = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.get('_isVisited');
        this.set('_isVisited', isVisited);
      }
    }]);

    return ItemModel;
  }(LockingModel));

  var ItemsComponentModel = __AMD("core/js/models/itemsComponentModel", function (_ComponentModel) {
    _inherits(ItemsComponentModel, _ComponentModel);

    var _super = _createSuper(ItemsComponentModel);

    function ItemsComponentModel() {
      _classCallCheck(this, ItemsComponentModel);

      return _super.apply(this, arguments);
    }

    _createClass(ItemsComponentModel, [{
      key: "toJSON",
      value: function toJSON() {
        var json = _get(_getPrototypeOf(ItemsComponentModel.prototype), "toJSON", this).call(this);

        json._items = this.getChildren().toJSON();
        return json;
      }
    }, {
      key: "init",
      value: function init() {
        this.setUpItems();
        this.listenTo(this.getChildren(), {
          all: this.onAll,
          'change:_isVisited': this.checkCompletionStatus
        });

        _get(_getPrototypeOf(ItemsComponentModel.prototype), "init", this).call(this);
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {
        var booleanArray = this.get('_userAnswer');
        if (!booleanArray) return;
        this.getChildren().forEach(function (child, index) {
          return child.set('_isVisited', booleanArray[index]);
        });
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        var booleanArray = this.getChildren().map(function (child) {
          return child.get('_isVisited');
        });
        this.set('_userAnswer', booleanArray);
      }
    }, {
      key: "setUpItems",
      value: function setUpItems() {
        var items = this.get('_items') || [];
        items.forEach(function (item, index) {
          return item._index = index;
        });
        this.setChildren(new Backbone.Collection(items, {
          model: ItemModel
        }));
      }
    }, {
      key: "getItem",
      value: function getItem(index) {
        return this.getChildren().findWhere({
          _index: index
        });
      }
    }, {
      key: "getVisitedItems",
      value: function getVisitedItems() {
        return this.getChildren().where({
          _isVisited: true
        });
      }
    }, {
      key: "getActiveItems",
      value: function getActiveItems() {
        return this.getChildren().where({
          _isActive: true
        });
      }
    }, {
      key: "getActiveItem",
      value: function getActiveItem() {
        return this.getChildren().findWhere({
          _isActive: true
        });
      }
    }, {
      key: "areAllItemsCompleted",
      value: function areAllItemsCompleted() {
        return this.getVisitedItems().length === this.getChildren().length;
      }
    }, {
      key: "checkCompletionStatus",
      value: function checkCompletionStatus() {
        this.storeUserAnswer();
        if (!this.areAllItemsCompleted()) return;
        this.setCompletionStatus();
      }
    }, {
      key: "reset",
      value: function reset() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hard';
        var canReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.get('_canReset');

        var wasReset = _get(_getPrototypeOf(ItemsComponentModel.prototype), "reset", this).call(this, type, canReset);

        if (!wasReset) return false;
        this.getChildren().each(function (item) {
          return item.reset();
        });
        return true;
      }
    }, {
      key: "resetActiveItems",
      value: function resetActiveItems() {
        this.getChildren().each(function (item) {
          return item.toggleActive(false);
        });
      }
    }, {
      key: "setActiveItem",
      value: function setActiveItem(index) {
        var item = this.getItem(index);
        if (!item) return;
        var activeItem = this.getActiveItem();
        if (activeItem) activeItem.toggleActive(false);
        item.toggleActive(true);
      }
    }]);

    return ItemsComponentModel;
  }(ComponentModel$1));

  var AccordionModel = __AMD("components/adapt-contrib-accordion/js/AccordionModel", function (_ItemsComponentModel) {
    _inherits(AccordionModel, _ItemsComponentModel);

    var _super = _createSuper(AccordionModel);

    function AccordionModel() {
      _classCallCheck(this, AccordionModel);

      return _super.apply(this, arguments);
    }

    _createClass(AccordionModel, [{
      key: "defaults",
      value: function defaults() {
        return ItemsComponentModel.resultExtend('defaults', {
          _shouldCollapseItems: true,
          _shouldExpandFirstItem: false,
          _toggleSpeed: 200
        });
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        this.resetActiveItems();

        _get(_getPrototypeOf(AccordionModel.prototype), "checkIfResetOnRevisit", this).call(this);

        this.checkExpandFirstItem();
      }
    }, {
      key: "toggleItemsState",
      value: function toggleItemsState(index) {
        var item = this.getItem(index);
        var previousActiveItem = this.getActiveItem();
        item.toggleActive();
        item.toggleVisited(true);
        if (!previousActiveItem || !this.get('_shouldCollapseItems')) return;
        previousActiveItem.toggleActive(false);
      }
    }, {
      key: "checkExpandFirstItem",
      value: function checkExpandFirstItem() {
        if (!this.get('_shouldExpandFirstItem')) return;
        this.toggleItemsState(0);
      }
    }]);

    return AccordionModel;
  }(ItemsComponentModel));

  var ComponentView = function (_AdaptView) {
    _inherits(ComponentView, _AdaptView);

    var _super = _createSuper(ComponentView);

    function ComponentView() {
      _classCallCheck(this, ComponentView);

      return _super.apply(this, arguments);
    }

    _createClass(ComponentView, [{
      key: "attributes",
      value: function attributes() {
        if (!this.model.get('_isA11yRegionEnabled')) {
          return AdaptView$1.resultExtend('attributes', {}, this);
        }

        return AdaptView$1.resultExtend('attributes', {
          'aria-labelledby': this.model.get('_id') + '-heading',
          role: 'region'
        }, this);
      }
    }, {
      key: "className",
      value: function className() {
        return ['component', this.model.get('_component').toLowerCase(), this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.setHidden(), 'is-' + this.model.get('_layout'), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : ''].join(' ');
      }
    }, {
      key: "renderState",
      value: function renderState() {
        logging$1.removed('renderState is removed and moved to item title');
      }
    }, {
      key: "setupInviewCompletion",
      value: function setupInviewCompletion() {
        var inviewElementSelector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.component__inner';
        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.setCompletionStatus;
        this.$inviewElement = this.$(inviewElementSelector);
        this.inviewCallback = callback;
        this.$inviewElement.on('inview.componentView', this.onInview.bind(this));
      }
    }, {
      key: "removeInviewListener",
      value: function removeInviewListener() {
        if (!this.$inviewElement) return;
        this.$inviewElement.off('inview.componentView');
        this.$inviewElement = null;
      }
    }, {
      key: "onInview",
      value: function onInview(event, visible, visiblePartX, visiblePartY) {
        if (!visible) return;

        switch (visiblePartY) {
          case 'top':
            this.hasSeenTop = true;
            break;

          case 'bottom':
            this.hasSeenBottom = true;
            break;

          case 'both':
            this.hasSeenTop = this.hasSeenBottom = true;
        }

        if (!this.hasSeenTop || !this.hasSeenBottom) return;
        this.inviewCallback();

        if (this.model.get('_isComplete')) {
          this.removeInviewListener();
        }
      }
    }, {
      key: "postRender",
      value: function postRender() {}
    }, {
      key: "remove",
      value: function remove() {
        this.removeInviewListener();

        _get(_getPrototypeOf(ComponentView.prototype), "remove", this).call(this);
      }
    }]);

    return ComponentView;
  }(AdaptView$1);

  ComponentView.type = 'component';
  var ComponentView$1 = __AMD("core/js/views/componentView", ComponentView);

  var AccordionView = function (_ComponentView) {
    _inherits(AccordionView, _ComponentView);

    var _super = _createSuper(AccordionView);

    function AccordionView() {
      _classCallCheck(this, AccordionView);

      return _super.apply(this, arguments);
    }

    _createClass(AccordionView, [{
      key: "preRender",
      value: function preRender() {
        this.onClick = this.onClick.bind(this);
        this.listenTo(this.model.getChildren(), 'change:_isActive', this.onItemsActiveChange);
      }
    }, {
      key: "postRender",
      value: function postRender() {
        var _this$getItemElement, _this$getItemElement$;

        (_this$getItemElement = this.getItemElement(this.model.getActiveItem())) === null || _this$getItemElement === void 0 ? void 0 : (_this$getItemElement$ = _this$getItemElement.find('.js-accordion-item-content')) === null || _this$getItemElement$ === void 0 ? void 0 : _this$getItemElement$.css('display', 'block');
        this.setReadyStatus();
        if (this.model.get('_setCompletionOn') !== 'inview') return;
        this.setupInviewCompletion();
      }
    }, {
      key: "onClick",
      value: function onClick(event) {
        this.model.toggleItemsState($(event.currentTarget).parents('.js-accordion-item').data('index'));
      }
    }, {
      key: "onItemsActiveChange",
      value: function onItemsActiveChange(item, isActive) {
        this.toggleItem(item, isActive);
      }
    }, {
      key: "toggleItem",
      value: function toggleItem(item, shouldExpand) {
        var $item = this.getItemElement(item);
        var $body = $item.children('.js-accordion-item-content').stop(true, true);

        if (!shouldExpand) {
          $body.slideUp(this.model.get('_toggleSpeed'));
          return;
        }

        $body.slideDown(this.model.get('_toggleSpeed'));
      }
    }, {
      key: "getItemElement",
      value: function getItemElement(item) {
        if (!item) return;
        var index = item.get('_index');
        return this.$('.js-accordion-item').filter("[data-index=\"".concat(index, "\"]"));
      }
    }]);

    return AccordionView;
  }(ComponentView$1);

  AccordionView.template = 'accordion.jsx';
  var AccordionView$1 = __AMD("components/adapt-contrib-accordion/js/AccordionView", AccordionView);

  __AMD("components/adapt-contrib-accordion/js/adapt-contrib-accordion", components$1.register('accordion', {
    model: AccordionModel,
    view: AccordionView$1
  }));

  var AssessmentResultsModel = __AMD("components/adapt-contrib-assessmentResults/js/assessmentResultsModel", function (_ComponentModel) {
    _inherits(AssessmentResultsModel, _ComponentModel);

    var _super = _createSuper(AssessmentResultsModel);

    function AssessmentResultsModel() {
      _classCallCheck(this, AssessmentResultsModel);

      return _super.apply(this, arguments);
    }

    _createClass(AssessmentResultsModel, [{
      key: "init",
      value: function init() {
        var _get2;

        this.set('originalBody', this.get('body'));
        this.listenTo(Adapt$1, {
          'assessments:complete': this.onAssessmentComplete,
          'assessments:reset': this.onAssessmentReset
        });

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(AssessmentResultsModel.prototype), "init", this)).call.apply(_get2, [this].concat(args));
      }
    }, {
      key: "checkIfAssessmentComplete",
      value: function checkIfAssessmentComplete() {
        if (!Adapt$1.assessment || this.get('_assessmentId') === undefined) {
          return;
        }

        var assessmentModel = Adapt$1.assessment.get(this.get('_assessmentId'));
        if (!assessmentModel || assessmentModel.length === 0) return;
        var state = assessmentModel.getState();

        var isResetOnRevisit = assessmentModel.get('_assessment')._isResetOnRevisit;

        if (state.isComplete && (!state.allowResetIfPassed || !isResetOnRevisit)) {
          this.onAssessmentComplete(state);
          return;
        }

        this.setVisibility();
      }
    }, {
      key: "onAssessmentComplete",
      value: function onAssessmentComplete(state) {
        if (this.get('_assessmentId') === undefined || this.get('_assessmentId') !== state.id) return;
        this._state = state;
        this.set({
          attempts: state.attempts,
          attemptsSpent: state.attemptsSpent,
          attemptsLeft: state.attemptsLeft,
          score: state.score,
          scoreAsPercent: state.scoreAsPercent,
          maxScore: state.maxScore,
          isPass: state.isPass
        });
        this.setFeedbackBand(state);
        this.checkRetryEnabled(state);
        this.setFeedbackText();
        this.toggleVisibility(true);
      }
    }, {
      key: "setFeedbackBand",
      value: function setFeedbackBand(state) {
        var scoreProp = state.isPercentageBased ? 'scoreAsPercent' : 'score';

        var bands = _.sortBy(this.get('_bands'), '_score');

        for (var i = bands.length - 1; i >= 0; i--) {
          var isScoreInBandRange = state[scoreProp] >= bands[i]._score;
          if (!isScoreInBandRange) continue;
          this.set('_feedbackBand', bands[i]);
          break;
        }
      }
    }, {
      key: "checkRetryEnabled",
      value: function checkRetryEnabled(state) {
        var assessmentModel = Adapt$1.assessment.get(state.id);
        if (!assessmentModel.canResetInPage()) return false;
        var feedbackBand = this.get('_feedbackBand');
        var isRetryEnabled = (feedbackBand && feedbackBand._allowRetry) !== false;
        var isAttemptsLeft = state.attemptsLeft > 0 || state.attemptsLeft === 'infinite';
        var showRetry = isRetryEnabled && isAttemptsLeft && (!state.isPass || state.allowResetIfPassed);
        this.set({
          _isRetryEnabled: showRetry,
          retryFeedback: showRetry ? this.get('_retry').feedback : ''
        });
      }
    }, {
      key: "setFeedbackText",
      value: function setFeedbackText() {
        var feedbackBand = this.get('_feedbackBand');
        var feedback = feedbackBand ? Handlebars.compile(feedbackBand.feedback)(this.toJSON()) : '';
        this.set({
          feedback: feedback,
          body: this.get('_completionBody')
        });
      }
    }, {
      key: "setVisibility",
      value: function setVisibility() {
        if (!Adapt$1.assessment) return;
        var assessmentModel = Adapt$1.assessment.get(this.get('_assessmentId'));
        if (!assessmentModel || assessmentModel.length === 0) return;
        var state = assessmentModel.getState();
        var isAttemptInProgress = state.attemptInProgress;
        var isComplete = !isAttemptInProgress && state.isComplete;
        var isVisibleBeforeCompletion = this.get('_isVisibleBeforeCompletion') || false;
        var isVisible = isVisibleBeforeCompletion || isComplete;
        this.toggleVisibility(isVisible);
      }
    }, {
      key: "toggleVisibility",
      value: function toggleVisibility(isVisible) {
        if (isVisible === undefined) {
          isVisible = !this.get('_isVisible');
        }

        this.set('_isVisible', isVisible, {
          pluginName: 'assessmentResults'
        });
      }
    }, {
      key: "checkCompletion",
      value: function checkCompletion() {
        if (this.get('_setCompletionOn') === 'pass' && !this.get('isPass')) {
          return;
        }

        this.setCompletionStatus();
      }
    }, {
      key: "onAssessmentReset",
      value: function onAssessmentReset(state) {
        if (this.get('_assessmentId') === undefined || this.get('_assessmentId') !== state.id) return;
        var resetType = this.get('_resetType');

        if (!resetType || resetType === 'inherit') {
          resetType = state.resetType || 'hard';
        }

        this.reset(resetType, true);
      }
    }, {
      key: "reset",
      value: function reset() {
        var _get3;

        this.set({
          body: this.get('originalBody'),
          state: null,
          feedback: '',
          _feedbackBand: null,
          retryFeedback: '',
          _isRetryEnabled: false
        });

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        (_get3 = _get(_getPrototypeOf(AssessmentResultsModel.prototype), "reset", this)).call.apply(_get3, [this].concat(args));
      }
    }]);

    return AssessmentResultsModel;
  }(ComponentModel$1));

  var AssessmentResultsView = function (_ComponentView) {
    _inherits(AssessmentResultsView, _ComponentView);

    var _super = _createSuper(AssessmentResultsView);

    function AssessmentResultsView() {
      _classCallCheck(this, AssessmentResultsView);

      return _super.apply(this, arguments);
    }

    _createClass(AssessmentResultsView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-assessment-retry-btn': 'onRetryClicked'
        };
      }
    }, {
      key: "preRender",
      value: function preRender() {
        var _this = this;

        this.model.setLocking('_isVisible', false);
        this.listenTo(Adapt$1.parentView, 'preRemove', function () {
          _this.model.unsetLocking('_isVisible');
        });
        this.listenTo(this.model, {
          'change:_feedbackBand': this.addClassesToArticle,
          'change:body': this.render
        });
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.model.checkIfAssessmentComplete();
        this.setReadyStatus();
        this.setupInviewCompletion('.component__inner', this.model.checkCompletion.bind(this.model));
      }
    }, {
      key: "onRetryClicked",
      value: function onRetryClicked() {
        var _this2 = this;

        var state = this.model._state;
        Adapt$1.assessment.get(state.id).reset(null, function (wasReset) {
          if (!wasReset) return;
          if (_this2.model.get('_retry')._routeToAssessment !== true) return;
          router$1.navigateToElement(".".concat(state.articleId));
        });
      }
    }, {
      key: "addClassesToArticle",
      value: function addClassesToArticle(model, value) {
        if (!(value !== null && value !== void 0 && value._classes)) return;
        this.$el.parents('.article').addClass(value._classes);
      }
    }]);

    return AssessmentResultsView;
  }(ComponentView$1);

  AssessmentResultsView.template = 'assessmentResults';
  var AssessmentResultsView$1 = __AMD("components/adapt-contrib-assessmentResults/js/assessmentResultsView", AssessmentResultsView);

  __AMD("components/adapt-contrib-assessmentResults/js/adapt-contrib-assessmentResults", components$1.register('assessmentResults', {
    model: AssessmentResultsModel,
    view: AssessmentResultsView$1
  }));

  var BlankView = __AMD("components/adapt-contrib-blank/js/blankView", function (_ComponentView) {
    _inherits(BlankView, _ComponentView);

    var _super = _createSuper(BlankView);

    function BlankView() {
      _classCallCheck(this, BlankView);

      return _super.apply(this, arguments);
    }

    _createClass(BlankView, [{
      key: "template",
      get: function () {
        return 'blank';
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.setReadyStatus();
        this.setupInviewCompletion();
      }
    }]);

    return BlankView;
  }(ComponentView$1));

  __AMD("components/adapt-contrib-blank/js/adapt-contrib-blank", components$1.register('blank', {
    model: ComponentModel$1.extend({}),
    view: BlankView
  }));

  var BUTTON_STATE = ENUM(['SUBMIT', 'CORRECT', 'INCORRECT', 'SHOW_CORRECT_ANSWER', 'HIDE_CORRECT_ANSWER', 'SHOW_FEEDBACK', 'RESET']);
  var BUTTON_STATE$1 = __AMD("core/js/enums/buttonStateEnum", BUTTON_STATE);

  var textPropertyName = {
    SUBMIT: 'submit',
    CORRECT: 'correct',
    INCORRECT: 'incorrect',
    SHOW_CORRECT_ANSWER: 'showCorrectAnswer',
    HIDE_CORRECT_ANSWER: 'hideCorrectAnswer',
    SHOW_FEEDBACK: 'showFeedback',
    RESET: 'reset'
  };
  var ButtonsView = __AMD("core/js/views/buttonsView", function (_Backbone$View) {
    _inherits(ButtonsView, _Backbone$View);

    var _super = _createSuper(ButtonsView);

    function ButtonsView() {
      _classCallCheck(this, ButtonsView);

      return _super.apply(this, arguments);
    }

    _createClass(ButtonsView, [{
      key: "initialize",
      value: function initialize(options) {
        this.parent = options.parent;
        this.listenTo(Adapt$1.parentView, 'postRemove', this.remove);
        this.listenTo(this.model, {
          'change:_buttonState': this.onButtonStateChanged,
          'change:feedbackMessage': this.onFeedbackMessageChanged,
          'change:_attemptsLeft': this.onAttemptsChanged,
          'change:_canSubmit': this.onCanSubmitChange
        });
        this.render();
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-btn-action': 'onActionClicked',
          'click .js-btn-feedback': 'onFeedbackClicked'
        };
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var data = this.model.toJSON();
        var template = Handlebars.templates.buttons;

        _.defer(function () {
          _this.postRender();

          Adapt$1.trigger('buttonsView:postRender', _this);
        });

        this.$el.html(template(data));
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.refresh();
      }
    }, {
      key: "checkResetSubmittedState",
      value: function checkResetSubmittedState() {
        var isSubmitted = this.model.get('_isSubmitted');

        if (isSubmitted) {
          this.$el.addClass('is-submitted');
          return;
        }

        this.$('.js-btn-marking').removeClass('is-incorrect is-correct').addClass('u-display-none');
        this.$el.removeClass('is-submitted');
        this.model.set('feedbackMessage', undefined);
        a11y$1.toggleEnabled(this.$('.js-btn-feedback'), false);
      }
    }, {
      key: "onActionClicked",
      value: function onActionClicked() {
        var buttonState = BUTTON_STATE$1(this.model.get('_buttonState'));
        this.trigger('buttons:stateUpdate', buttonState);
        this.checkResetSubmittedState();

        if (buttonState === BUTTON_STATE$1.SHOW_CORRECT_ANSWER) {
          var _this$model$getCorrec, _this$model;

          var correctAnswer = (_this$model$getCorrec = (_this$model = this.model).getCorrectAnswerAsText) === null || _this$model$getCorrec === void 0 ? void 0 : _this$model$getCorrec.call(_this$model);
          this.updateAnswerLiveRegion(correctAnswer);
        }

        if (buttonState === BUTTON_STATE$1.HIDE_CORRECT_ANSWER) {
          var _this$model$getUserAn, _this$model2;

          var userAnswer = (_this$model$getUserAn = (_this$model2 = this.model).getUserAnswerAsText) === null || _this$model$getUserAn === void 0 ? void 0 : _this$model$getUserAn.call(_this$model2);
          this.updateAnswerLiveRegion(userAnswer);
        }
      }
    }, {
      key: "onFeedbackClicked",
      value: function onFeedbackClicked() {
        this.trigger('buttons:stateUpdate', BUTTON_STATE$1.SHOW_FEEDBACK);
      }
    }, {
      key: "onFeedbackMessageChanged",
      value: function onFeedbackMessageChanged(model, changedAttribute) {
        if (changedAttribute && this.model.get('_canShowFeedback')) {
          a11y$1.toggleEnabled(this.$('.js-btn-feedback'), true);
          return;
        }

        a11y$1.toggleEnabled(this.$('.js-btn-feedback'), false);
      }
    }, {
      key: "onCanSubmitChange",
      value: function onCanSubmitChange() {
        this.onButtonStateChanged(this.model, this.model.get('_buttonState'));
      }
    }, {
      key: "onButtonStateChanged",
      value: function onButtonStateChanged(model, changedAttribute) {
        this.updateAttemptsCount();
        var $buttonsAction = this.$('.js-btn-action');
        var buttonState = BUTTON_STATE$1(changedAttribute);

        if (changedAttribute === BUTTON_STATE$1.CORRECT || changedAttribute === BUTTON_STATE$1.INCORRECT) {
          a11y$1.toggleEnabled($buttonsAction, false);
          return;
        }

        var propertyName = textPropertyName[buttonState.asString];
        var ariaLabel = this.model.get('_buttons')['_' + propertyName].ariaLabel;
        var buttonText = this.model.get('_buttons')['_' + propertyName].buttonText;
        a11y$1.toggleEnabled($buttonsAction, this.model.get('_canSubmit'));
        $buttonsAction.html(buttonText).attr('aria-label', ariaLabel);
      }
    }, {
      key: "checkFeedbackState",
      value: function checkFeedbackState() {
        var canShowFeedback = this.model.get('_canShowFeedback');
        this.$('.js-btn-action').toggleClass('is-full-width', !canShowFeedback);
        this.$('.js-btn-feedback').toggleClass('u-display-none', !canShowFeedback);
        this.$('.js-btn-marking').toggleClass('is-full-width u-display-none', !canShowFeedback);
      }
    }, {
      key: "updateAttemptsCount",
      value: function updateAttemptsCount() {
        var isInteractionComplete = this.model.get('_isInteractionComplete');
        var attemptsLeft = this.model.get('_attemptsLeft') ? this.model.get('_attemptsLeft') : this.model.get('_attempts');
        var shouldDisplayAttempts = this.model.get('_shouldDisplayAttempts');
        var attemptsString;
        this.checkResetSubmittedState();

        if (!isInteractionComplete && attemptsLeft >= 0) {
          attemptsString = attemptsLeft + ' ';
          attemptsString += attemptsLeft === 1 ? this.model.get('_buttons').remainingAttemptText : this.model.get('_buttons').remainingAttemptsText;
        } else {
          this.$('.js-display-attempts').addClass('u-visibility-hidden');
          this.showMarking();
        }

        if (shouldDisplayAttempts) {
          this.$('.js-insert-attempts-string').html(attemptsString);
        }
      }
    }, {
      key: "updateAnswerLiveRegion",
      value: function updateAnswerLiveRegion(answer) {
        if (!answer) return;
        this.$('.js-answer-live-region').html(answer);
      }
    }, {
      key: "showMarking",
      value: function showMarking() {
        if (!this.model.shouldShowMarking) return;
        var isCorrect = this.model.get('_isCorrect');

        var ariaLabels = Adapt$1.course.get('_globals')._accessibility._ariaLabels;

        this.$('.js-btn-marking').removeClass('u-display-none').addClass(isCorrect ? 'is-correct' : 'is-incorrect').attr('aria-label', isCorrect ? ariaLabels.answeredCorrectly : ariaLabels.answeredIncorrectly);
      }
    }, {
      key: "refresh",
      value: function refresh() {
        this.updateAttemptsCount();
        this.checkResetSubmittedState();
        this.checkFeedbackState();
        this.onButtonStateChanged(null, this.model.get('_buttonState'));
        this.onFeedbackMessageChanged(null, this.model.get('feedbackMessage'));
      }
    }]);

    return ButtonsView;
  }(Backbone.View));

  var QuestionModel = function (_ComponentModel) {
    _inherits(QuestionModel, _ComponentModel);

    var _super = _createSuper(QuestionModel);

    function QuestionModel() {
      _classCallCheck(this, QuestionModel);

      return _super.apply(this, arguments);
    }

    _createClass(QuestionModel, [{
      key: "defaults",
      value: function defaults() {
        return ComponentModel$1.resultExtend('defaults', {
          _isQuestionType: true,
          _shouldDisplayAttempts: false,
          _shouldShowMarking: false,
          _canShowModelAnswer: true,
          _canShowFeedback: true,
          _canShowMarking: true,
          _canSubmit: true,
          _isSubmitted: false,
          _isCorrectAnswerShown: false,
          _questionWeight: Adapt$1.config.get('_questionWeight'),
          _hasItemScoring: false,
          _items: []
        });
      }
    }, {
      key: "trackable",
      value: function trackable() {
        return ComponentModel$1.resultExtend('trackable', ['_isSubmitted', '_score', '_isCorrect', '_attemptsLeft']);
      }
    }, {
      key: "trackableType",
      value: function trackableType() {
        return ComponentModel$1.resultExtend('trackableType', [Boolean, Number, Boolean, Number]);
      }
    }, {
      key: "getTypeGroup",
      value: function getTypeGroup() {
        return 'question';
      }
    }, {
      key: "init",
      value: function init() {
        this.setupDefaultSettings();
        this.setLocking('_canSubmit', true);
        this.updateRawScore();

        _get(_getPrototypeOf(QuestionModel.prototype), "init", this).call(this);
      }
    }, {
      key: "setupDefaultSettings",
      value: function setupDefaultSettings() {
        this.setupWeightSettings();
        this.setupButtonSettings();
      }
    }, {
      key: "setupButtonSettings",
      value: function setupButtonSettings() {
        var globalButtons = Adapt$1.course.get('_buttons');

        if (!this.has('_buttons')) {
          this.set('_buttons', globalButtons);
        } else {
          var componentButtons = this.get('_buttons');

          for (var key in componentButtons) {
            if (_typeof(componentButtons[key]) === 'object') {
              if (!componentButtons[key].buttonText && globalButtons[key].buttonText) {
                componentButtons[key].buttonText = globalButtons[key].buttonText;
              }

              if (!componentButtons[key].ariaLabel && globalButtons[key].ariaLabel) {
                componentButtons[key].ariaLabel = globalButtons[key].ariaLabel;
              }
            }

            if (!componentButtons[key] && globalButtons[key]) {
              componentButtons[key] = globalButtons[key];
            }
          }
        }
      }
    }, {
      key: "setupWeightSettings",
      value: function setupWeightSettings() {}
    }, {
      key: "canSubmit",
      value: function canSubmit() {}
    }, {
      key: "checkCanSubmit",
      value: function checkCanSubmit() {
        this.set('_canSubmit', this.canSubmit(), {
          pluginName: 'adapt'
        });
      }
    }, {
      key: "updateAttempts",
      value: function updateAttempts() {
        var attemptsLeft = this.get('_attemptsLeft') || this.get('_attempts');
        this.set('_attemptsLeft', attemptsLeft - 1);
      }
    }, {
      key: "setQuestionAsSubmitted",
      value: function setQuestionAsSubmitted() {
        this.set({
          _isEnabled: false,
          _isSubmitted: true,
          _shouldShowMarking: this.shouldShowMarking
        });
      }
    }, {
      key: "markQuestion",
      value: function markQuestion() {
        if (this.isCorrect()) {
          this.set('_isCorrect', true);
        } else {
          this.set('_isCorrect', false);
        }

        this.updateRawScore();
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {}
    }, {
      key: "setScore",
      value: function setScore() {
        var questionWeight = this.get('_questionWeight');
        var answeredCorrectly = this.get('_isCorrect');
        var score = answeredCorrectly ? questionWeight : 0;
        this.set('_score', score);
      }
    }, {
      key: "updateRawScore",
      value: function updateRawScore() {
        this.set({
          _rawScore: this.score,
          _maxScore: this.maxScore,
          _minScore: this.minScore
        });
      }
    }, {
      key: "score",
      get: function () {
        return this.get('_isCorrect') ? this.maxScore : 0;
      }
    }, {
      key: "maxScore",
      get: function () {
        return this.get('_questionWeight');
      }
    }, {
      key: "minScore",
      get: function () {
        return 0;
      }
    }, {
      key: "checkQuestionCompletion",
      value: function checkQuestionCompletion() {
        var isComplete = this.get('_isCorrect') || this.get('_attemptsLeft') === 0;

        if (isComplete) {
          this.setCompletionStatus();
        }

        return isComplete;
      }
    }, {
      key: "updateButtons",
      value: function updateButtons() {
        var isInteractionComplete = this.get('_isInteractionComplete');
        var isCorrect = this.get('_isCorrect');
        var isEnabled = this.get('_isEnabled');
        var buttonState = this.get('_buttonState');
        var canShowModelAnswer = this.get('_canShowModelAnswer');

        if (isInteractionComplete) {
          if (isCorrect || !canShowModelAnswer) {
            this.set('_buttonState', BUTTON_STATE$1.CORRECT);
          } else {
            switch (buttonState) {
              case BUTTON_STATE$1.SUBMIT:
              case BUTTON_STATE$1.HIDE_CORRECT_ANSWER:
                this.set('_buttonState', BUTTON_STATE$1.SHOW_CORRECT_ANSWER);
                break;

              default:
                this.set('_buttonState', BUTTON_STATE$1.HIDE_CORRECT_ANSWER);
            }
          }
        } else {
          if (isEnabled) {
            this.set('_buttonState', BUTTON_STATE$1.SUBMIT);
          } else {
            this.set('_buttonState', BUTTON_STATE$1.RESET);
          }
        }
      }
    }, {
      key: "setupFeedback",
      value: function setupFeedback() {
        if (!this.has('_feedback')) return;

        if (this.get('_isCorrect')) {
          this.setupCorrectFeedback();
        } else if (this.isPartlyCorrect()) {
          this.setupPartlyCorrectFeedback();
        } else {
          this.setupIncorrectFeedback();
        }
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {}
    }, {
      key: "setupCorrectFeedback",
      value: function setupCorrectFeedback() {
        this.set({
          feedbackTitle: this.getFeedbackTitle(),
          feedbackMessage: Handlebars.compile(this.get('_feedback').correct)(this.toJSON())
        });
      }
    }, {
      key: "setupPartlyCorrectFeedback",
      value: function setupPartlyCorrectFeedback() {
        var feedback = this.get('_feedback')._partlyCorrect;

        if (feedback !== null && feedback !== void 0 && feedback.final) {
          this.setAttemptSpecificFeedback(feedback);
        } else {
          this.setupIncorrectFeedback();
        }
      }
    }, {
      key: "setupIncorrectFeedback",
      value: function setupIncorrectFeedback() {
        this.setAttemptSpecificFeedback(this.get('_feedback')._incorrect);
      }
    }, {
      key: "setAttemptSpecificFeedback",
      value: function setAttemptSpecificFeedback(feedback) {
        var body = this.get('_attemptsLeft') && feedback.notFinal || feedback.final;
        this.set({
          feedbackTitle: this.getFeedbackTitle(),
          feedbackMessage: Handlebars.compile(body)(this.toJSON())
        });
      }
    }, {
      key: "getFeedbackTitle",
      value: function getFeedbackTitle() {
        var title = this.get('_feedback').title || this.get('displayTitle') || this.get('title') || '';
        return Handlebars.compile(title)(this.toJSON());
      }
    }, {
      key: "isInteractive",
      value: function isInteractive() {
        return !this.get('_isComplete') || this.get('_isEnabled') && !this.get('_isSubmitted');
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        _get(_getPrototypeOf(QuestionModel.prototype), "checkIfResetOnRevisit", this).call(this);

        this.set('_buttonState', this.get('_isInteractionComplete') ? BUTTON_STATE$1.HIDE_CORRECT_ANSWER : BUTTON_STATE$1.SUBMIT);
      }
    }, {
      key: "reset",
      value: function reset() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hard';
        var canReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.get('_canReset');

        var wasReset = _get(_getPrototypeOf(QuestionModel.prototype), "reset", this).call(this, type, canReset);

        if (!wasReset) return false;
        var attempts = this.get('_attempts');
        this.set({
          _attemptsLeft: attempts,
          _isCorrect: undefined,
          _isCorrectAnswerShown: false,
          _isSubmitted: false,
          _buttonState: BUTTON_STATE$1.SUBMIT,
          _shouldShowMarking: this.shouldShowMarking
        });
        return true;
      }
    }, {
      key: "setQuestionAsReset",
      value: function setQuestionAsReset() {
        this.set({
          _isEnabled: true,
          _isSubmitted: false,
          _shouldShowMarking: this.shouldShowMarking
        });
        this.resetQuestion();
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {}
    }, {
      key: "refresh",
      value: function refresh() {
        this.trigger('question:refresh');
      }
    }, {
      key: "getButtonState",
      value: function getButtonState() {
        if (this.get('_isCorrect')) {
          return BUTTON_STATE$1.CORRECT;
        }

        if (this.get('_attemptsLeft') === 0) {
          return this.get('_canShowModelAnswer') ? BUTTON_STATE$1.SHOW_CORRECT_ANSWER : BUTTON_STATE$1.INCORRECT;
        }

        return this.get('_isSubmitted') ? BUTTON_STATE$1.RESET : BUTTON_STATE$1.SUBMIT;
      }
    }, {
      key: "getInteractionObject",
      value: function getInteractionObject() {
        return {};
      }
    }, {
      key: "getResponse",
      value: function getResponse() {}
    }, {
      key: "getResponseType",
      value: function getResponseType() {}
    }, {
      key: "onSubmitted",
      value: function onSubmitted() {
        this.addAttemptObject();
        this.set('_shouldShowMarking', this.shouldShowMarking);
      }
    }, {
      key: "shouldShowMarking",
      get: function () {
        return !this.isInteractive() && this.get('_canShowMarking') && this.get('_isInteractionComplete');
      }
    }]);

    return QuestionModel;
  }(ComponentModel$1);

  components$1.register('question', {
    model: QuestionModel
  });
  var QuestionModel$1 = __AMD("core/js/models/questionModel", QuestionModel);

  var QuestionView = function (_ComponentView) {
    _inherits(QuestionView, _ComponentView);

    var _super = _createSuper(QuestionView);

    function QuestionView() {
      _classCallCheck(this, QuestionView);

      return _super.apply(this, arguments);
    }

    _createClass(QuestionView, [{
      key: "className",
      value: function className() {
        return ['component', 'is-question', this.model.get('_component').toLowerCase(), this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), 'is-' + this.model.get('_layout'), this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isOptional') ? 'is-optional' : '', this.model.get('_canShowModelAnswer') ? 'can-show-model-answer' : '', this.model.get('_canShowFeedback') ? 'can-show-feedback' : '', this.model.get('_canShowMarking') ? 'can-show-marking' : ''].join(' ');
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _get2;

        this.isInteractive = this.isInteractive.bind(this);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(QuestionView.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));
      }
    }, {
      key: "isInteractive",
      value: function isInteractive() {
        logging$1.deprecated('questionView.isInteractive please use this.model.isInteractive, this.model.get(\'_shouldShowMarking\') or this.model.shouldShowMarking');
        return this.model.isInteractive();
      }
    }, {
      key: "preRender",
      value: function preRender() {
        var _this = this;

        this.listenTo(this.model, 'change:_isEnabled', this.onEnabledChanged);
        this.listenTo(this.model, 'question:refresh', this.refresh);

        if (this.checkIfResetOnRevisit !== QuestionView.prototype.checkIfResetOnRevisit) {
          logging$1.deprecated('QuestionView.checkIfResetOnRevisit, please use QuestionModel.checkIfResetOnRevisit');
        }

        this.checkIfResetOnRevisit();

        _.defer(function () {
          return _this.ensureLegacyLifecycleState();
        });

        this._runModelCompatibleFunction('setupDefaultSettings');

        this.setupQuestion();
      }
    }, {
      key: "onEnabledChanged",
      value: function onEnabledChanged(model, changedAttribute) {
        if (!changedAttribute) {
          this.$('.component__widget').addClass('is-disabled');
          this.disableQuestion();
        } else {
          this.$('.component__widget').removeClass('is-disabled');
          this.enableQuestion();
        }
      }
    }, {
      key: "disableQuestion",
      value: function disableQuestion() {}
    }, {
      key: "enableQuestion",
      value: function enableQuestion() {}
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var _this2 = this;

        var canReset = this.model.get('_canReset') !== false;
        var isResetOnRevisit = this.model.get('_isResetOnRevisit');
        if (!canReset || !isResetOnRevisit) return;
        if (this.resetQuestionOnRevisit === QuestionView.prototype.resetQuestionOnRevisit) return;
        logging$1.deprecated('QuestionView.resetQuestionOnRevisit, please QuestionModel.reset');

        _.defer(function () {
          _this2.resetQuestionOnRevisit(isResetOnRevisit);
        });
      }
    }, {
      key: "ensureLegacyLifecycleState",
      value: function ensureLegacyLifecycleState() {
        var isInteractionComplete = this.model.get('_isInteractionComplete');

        if (isInteractionComplete) {
          this.onHideCorrectAnswerClicked();
          return;
        }

        this.onResetClicked();
      }
    }, {
      key: "resetQuestionOnRevisit",
      value: function resetQuestionOnRevisit(type) {}
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {}
    }, {
      key: "postRender",
      value: function postRender() {
        this.addButtonsView();
        this.onQuestionRendered();
      }
    }, {
      key: "addButtonsView",
      value: function addButtonsView() {
        this.buttonsView = new ButtonsView({
          model: this.model,
          el: this.$('.btn__container')
        });
        this.listenTo(this.buttonsView, 'buttons:stateUpdate', this.onButtonStateUpdate);
      }
    }, {
      key: "onButtonStateUpdate",
      value: function onButtonStateUpdate(buttonState) {
        switch (buttonState) {
          case BUTTON_STATE$1.SUBMIT:
            this.onSubmitClicked();
            break;

          case BUTTON_STATE$1.RESET:
            this.onResetClicked();
            break;

          case BUTTON_STATE$1.SHOW_CORRECT_ANSWER:
            this.onShowCorrectAnswerClicked();
            break;

          case BUTTON_STATE$1.HIDE_CORRECT_ANSWER:
            this.onHideCorrectAnswerClicked();
            break;

          case BUTTON_STATE$1.SHOW_FEEDBACK:
            this.showFeedback();
            break;
        }
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {}
    }, {
      key: "onSubmitClicked",
      value: function onSubmitClicked() {
        var canSubmit = this._runModelCompatibleFunction('canSubmit');

        if (!canSubmit) {
          this.showInstructionError();
          this.onCannotSubmit();
          return;
        }

        this._runModelCompatibleFunction('updateAttempts');

        this._runModelCompatibleFunction('setQuestionAsSubmitted');

        this._runModelCompatibleFunction('storeUserAnswer');

        this._runModelCompatibleFunction('markQuestion', 'isCorrect');

        this._runModelCompatibleFunction('setScore');

        this._runModelCompatibleFunction('checkQuestionCompletion');

        if (this.model.shouldShowMarking) {
          this.showMarking();
        }

        this.recordInteraction();

        this._runModelCompatibleFunction('setupFeedback');

        this.showFeedback();
        $(window).resize();

        this._runModelCompatibleFunction('updateButtons');

        this.model.onSubmitted();
        this.onSubmitted();
      }
    }, {
      key: "showInstructionError",
      value: function showInstructionError() {
        Adapt$1.trigger('questionView:showInstructionError', this);
      }
    }, {
      key: "onCannotSubmit",
      value: function onCannotSubmit() {}
    }, {
      key: "onSubmitted",
      value: function onSubmitted() {}
    }, {
      key: "setQuestionAsSubmitted",
      value: function setQuestionAsSubmitted() {
        this.model.setQuestionAsSubmitted();
        this.$('.component__widget').addClass('is-submitted');
      }
    }, {
      key: "showMarking",
      value: function showMarking() {}
    }, {
      key: "checkQuestionCompletion",
      value: function checkQuestionCompletion() {
        var isComplete = this.model.checkQuestionCompletion();

        if (isComplete) {
          this.$('.component__widget').addClass('is-complete show-user-answer');
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        if (this.model.get('_recordInteraction') === true || !this.model.has('_recordInteraction')) {
          Adapt$1.trigger('questionView:recordInteraction', this);
        }
      }
    }, {
      key: "showFeedback",
      value: function showFeedback() {
        if (this.model.get('_canShowFeedback')) {
          Adapt$1.trigger('questionView:showFeedback', this);
        } else {
          Adapt$1.trigger('questionView:disabledFeedback', this);
        }
      }
    }, {
      key: "onResetClicked",
      value: function onResetClicked() {
        this.setQuestionAsReset();

        this._runModelCompatibleFunction('resetUserAnswer');

        this.model.checkCanSubmit();

        this._runModelCompatibleFunction('updateButtons');

        if (!this.model.get('_isReady')) return;
        var currentModel = data$1.findById(location$1._currentId);
        if (!(currentModel !== null && currentModel !== void 0 && currentModel.get('_isReady'))) return;
        a11y$1.focusNext(this.$el, {
          preventScroll: true
        });
      }
    }, {
      key: "setQuestionAsReset",
      value: function setQuestionAsReset() {
        this.model.setQuestionAsReset();
        this.resetQuestion();
        this.$('.component__widget').removeClass('is-submitted');
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {}
    }, {
      key: "refresh",
      value: function refresh() {
        this.model.set('_buttonState', this.model.getButtonState());

        if (this.model.shouldShowMarking) {
          this.showMarking();
        }

        if (this.buttonsView) {
          _.defer(this.buttonsView.refresh.bind(this.buttonsView));
        }
      }
    }, {
      key: "onShowCorrectAnswerClicked",
      value: function onShowCorrectAnswerClicked() {
        this.setQuestionAsShowCorrect();

        this._runModelCompatibleFunction('updateButtons');

        this.showCorrectAnswer();
      }
    }, {
      key: "setQuestionAsShowCorrect",
      value: function setQuestionAsShowCorrect() {
        this.$('.component__widget').addClass('is-submitted show-correct-answer').removeClass('show-user-answer');
      }
    }, {
      key: "showCorrectAnswer",
      value: function showCorrectAnswer() {
        this.model.set('_isCorrectAnswerShown', true);
      }
    }, {
      key: "onHideCorrectAnswerClicked",
      value: function onHideCorrectAnswerClicked() {
        this.setQuestionAsHideCorrect();

        this._runModelCompatibleFunction('updateButtons');

        this.hideCorrectAnswer();
      }
    }, {
      key: "setQuestionAsHideCorrect",
      value: function setQuestionAsHideCorrect() {
        this.$('.component__widget').addClass('is-submitted show-user-answer').removeClass('show-correct-answer');
      }
    }, {
      key: "hideCorrectAnswer",
      value: function hideCorrectAnswer() {
        this.model.set('_isCorrectAnswerShown', false);
      }
    }, {
      key: "getLatency",
      value: function getLatency() {
        return null;
      }
    }, {
      key: "_runModelCompatibleFunction",
      value: function _runModelCompatibleFunction(name, lookForViewOnlyFunction) {
        return this.model[name]();
      }
    }]);

    return QuestionView;
  }(ComponentView$1);

  QuestionView._isQuestionType = true;

  var ViewOnlyQuestionViewCompatibilityLayer = function (_QuestionView) {
    _inherits(ViewOnlyQuestionViewCompatibilityLayer, _QuestionView);

    var _super2 = _createSuper(ViewOnlyQuestionViewCompatibilityLayer);

    function ViewOnlyQuestionViewCompatibilityLayer() {
      _classCallCheck(this, ViewOnlyQuestionViewCompatibilityLayer);

      return _super2.apply(this, arguments);
    }

    _createClass(ViewOnlyQuestionViewCompatibilityLayer, [{
      key: "getInteractionObject",
      value: function getInteractionObject() {
        logging$1.deprecated('QuestionView.getInteractionObject, please use QuestionModel.getInteractionObject');
        return this.model.getInteractionObject();
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        logging$1.deprecated('QuestionView.getInteractionObject, please use QuestionModel.getInteractionObject');
        return this.model.getResponse();
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        logging$1.deprecated('QuestionView.getResponseType, please use QuestionModel.getResponseType');
        return this.model.getResponseType();
      }
    }, {
      key: "setupDefaultSettings",
      value: function setupDefaultSettings() {
        logging$1.deprecated('QuestionView.setupDefaultSettings, please use QuestionModel.setupDefaultSettings');
        return this.model.setupDefaultSettings();
      }
    }, {
      key: "setupButtonSettings",
      value: function setupButtonSettings() {
        logging$1.deprecated('QuestionView.setupButtonSettings, please use QuestionModel.setupButtonSettings');
        return this.model.setupButtonSettings();
      }
    }, {
      key: "setupWeightSettings",
      value: function setupWeightSettings() {
        logging$1.deprecated('QuestionView.setupWeightSettings, please use QuestionModel.setupWeightSettings');
        return this.model.setupWeightSettings();
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        logging$1.deprecated('QuestionView.canSubmit, please use QuestionModel.canSubmit');
        return this.model.canSubmit();
      }
    }, {
      key: "updateAttempts",
      value: function updateAttempts() {
        logging$1.deprecated('QuestionView.updateAttempts, please use QuestionModel.updateAttempts');
        return this.model.updateAttempts();
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        logging$1.deprecated('QuestionView.storeUserAnswer, please use QuestionModel.storeUserAnswer');
        return this.model.storeUserAnswer();
      }
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        logging$1.deprecated('QuestionView.resetUserAnswer, please use QuestionModel.resetUserAnswer');
        return this.model.resetUserAnswer();
      }
    }, {
      key: "markQuestion",
      value: function markQuestion() {
        if (this._isInViewOnlyCompatibleMode('isCorrect')) {
          if (this.isCorrect()) {
            this.model.set('_isCorrect', true);
          } else {
            this.model.set('_isCorrect', false);
          }

          this.model.set({
            _rawScore: this.model.get('_isCorrect') ? this.model.get('_questionWeight') : 0,
            _maxScore: this.model.get('_questionWeight'),
            _minScore: 0
          });
        } else {
          return this.model.markQuestion();
        }
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        logging$1.deprecated('QuestionView.isCorrect, please use QuestionModel.isCorrect');
        return this.model.isCorrect();
      }
    }, {
      key: "setScore",
      value: function setScore() {
        logging$1.deprecated('QuestionView.setScore, please use QuestionModel.setScore');
        return this.model.setScore();
      }
    }, {
      key: "updateButtons",
      value: function updateButtons() {
        logging$1.deprecated('QuestionView.updateButtons, please use QuestionModel.updateButtons');
        return this.model.updateButtons();
      }
    }, {
      key: "setupFeedback",
      value: function setupFeedback() {
        if (this._isInViewOnlyCompatibleMode('isPartlyCorrect')) {
          if (this.model.get('_isCorrect')) {
            this._runModelCompatibleFunction('setupCorrectFeedback');
          } else if (this.isPartlyCorrect()) {
            this._runModelCompatibleFunction('setupPartlyCorrectFeedback');
          } else {
            this._runModelCompatibleFunction('setupIncorrectFeedback');
          }
        } else {
          this.model.setupFeedback();
        }
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        logging$1.deprecated('QuestionView.isPartlyCorrect, please use QuestionModel.isPartlyCorrect');
        return this.model.isPartlyCorrect();
      }
    }, {
      key: "setupCorrectFeedback",
      value: function setupCorrectFeedback() {
        logging$1.deprecated('QuestionView.setupCorrectFeedback, please use QuestionModel.setupCorrectFeedback');
        return this.model.setupCorrectFeedback();
      }
    }, {
      key: "setupPartlyCorrectFeedback",
      value: function setupPartlyCorrectFeedback() {
        logging$1.deprecated('QuestionView.setupPartlyCorrectFeedback, please use QuestionModel.setupPartlyCorrectFeedback');
        return this.model.setupPartlyCorrectFeedback();
      }
    }, {
      key: "setupIncorrectFeedback",
      value: function setupIncorrectFeedback() {
        logging$1.deprecated('QuestionView.setupIncorrectFeedback, please use QuestionModel.setupIncorrectFeedback');
        return this.model.setupIncorrectFeedback();
      }
    }, {
      key: "_runModelCompatibleFunction",
      value: function _runModelCompatibleFunction(name, lookForViewOnlyFunction) {
        if (this._isInViewOnlyCompatibleMode(name, lookForViewOnlyFunction)) {
          return this[name]();
        } else {
          return this.model[name]();
        }
      }
    }, {
      key: "_isInViewOnlyCompatibleMode",
      value: function _isInViewOnlyCompatibleMode(name, lookForViewOnlyFunction) {
        var checkForFunction = lookForViewOnlyFunction || name;
        if (!this.constructor.prototype[checkForFunction]) return false;
        var hasCompatibleVersion = Object.prototype.hasOwnProperty.call(ViewOnlyQuestionViewCompatibilityLayer.prototype, checkForFunction);
        var usingCompatibleVersion = this.constructor.prototype[checkForFunction] === ViewOnlyQuestionViewCompatibilityLayer.prototype[checkForFunction];

        if (hasCompatibleVersion && usingCompatibleVersion) {
          switch (checkForFunction) {
            case 'setupFeedback':
            case 'markQuestion':
              return true;
          }

          return false;
        }

        return true;
      }
    }]);

    return ViewOnlyQuestionViewCompatibilityLayer;
  }(QuestionView);
  var QuestionView$1 = __AMD("core/js/views/questionView", ViewOnlyQuestionViewCompatibilityLayer);

  var McqView = function (_QuestionView) {
    _inherits(McqView, _QuestionView);

    var _super = _createSuper(McqView);

    function McqView() {
      _classCallCheck(this, McqView);

      return _super.apply(this, arguments);
    }

    _createClass(McqView, [{
      key: "initialize",
      value: function initialize() {
        var _get2;

        this.onKeyPress = this.onKeyPress.bind(this);
        this.onItemSelect = this.onItemSelect.bind(this);
        this.onItemFocus = this.onItemFocus.bind(this);
        this.onItemBlur = this.onItemBlur.bind(this);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(McqView.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));
      }
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {
        this.model.setupRandomisation();
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        this.setReadyStatus();
      }
    }, {
      key: "onKeyPress",
      value: function onKeyPress(event) {
        if (event.which !== 13) return;
        this.onItemSelect(event);
      }
    }, {
      key: "onItemFocus",
      value: function onItemFocus(event) {
        if (!this.model.isInteractive()) return;
        var index = parseInt($(event.currentTarget).data('adapt-index'));
        var item = this.model.getChildren().findWhere({
          _index: index
        });
        item.set('_isHighlighted', true);
      }
    }, {
      key: "onItemBlur",
      value: function onItemBlur(event) {
        var index = $(event.currentTarget).data('adapt-index');
        var item = this.model.getChildren().findWhere({
          _index: index
        });
        item.set('_isHighlighted', false);
      }
    }, {
      key: "onItemSelect",
      value: function onItemSelect(event) {
        if (!this.model.isInteractive()) return;
        var index = $(event.currentTarget).data('adapt-index');
        var itemModel = this.model.getItem(index);
        var shouldSelect = !itemModel.get('_isActive');

        if (this.model.isSingleSelect()) {
          shouldSelect = true;
          this.model.resetActiveItems();
        } else if (shouldSelect && this.model.isAtActiveLimit()) {
          this.model.getLastActiveItem().toggleActive(false);
        }

        itemModel.toggleActive(shouldSelect);
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {
        this.model.resetItems();
      }
    }]);

    return McqView;
  }(QuestionView$1);

  McqView.template = 'mcq.jsx';
  var McqView$1 = __AMD("components/adapt-contrib-mcq/js/McqView", McqView);

  var GmcqView = function (_McqView) {
    _inherits(GmcqView, _McqView);

    var _super = _createSuper(GmcqView);

    function GmcqView() {
      _classCallCheck(this, GmcqView);

      return _super.apply(this, arguments);
    }

    _createClass(GmcqView, [{
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        var _this = this;

        this.$('.js-item-label').imageready(function () {
          return _this.setReadyStatus();
        });
      }
    }]);

    return GmcqView;
  }(McqView$1);

  GmcqView.template = 'gmcq.jsx';
  var GmcqView$1 = __AMD("components/adapt-contrib-gmcq/js/GmcqView", GmcqView);

  var BlendedItemsComponentQuestionModel = function (_QuestionModel) {
    _inherits(BlendedItemsComponentQuestionModel, _QuestionModel);

    var _super = _createSuper(BlendedItemsComponentQuestionModel);

    function BlendedItemsComponentQuestionModel() {
      _classCallCheck(this, BlendedItemsComponentQuestionModel);

      return _super.apply(this, arguments);
    }

    _createClass(BlendedItemsComponentQuestionModel, [{
      key: "init",
      value: function init() {
        ItemsComponentModel.prototype.init.call(this);

        _get(_getPrototypeOf(BlendedItemsComponentQuestionModel.prototype), "init", this).call(this);
      }
    }, {
      key: "reset",
      value: function reset() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hard';
        var canReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.get('_canReset');
        ItemsComponentModel.prototype.reset.call(this, type, canReset);
        return _get(_getPrototypeOf(BlendedItemsComponentQuestionModel.prototype), "reset", this).call(this, type, canReset);
      }
    }]);

    return BlendedItemsComponentQuestionModel;
  }(QuestionModel$1);

  Object.getOwnPropertyNames(ItemsComponentModel.prototype).forEach(function (name) {
    if (name === 'constructor' || name === 'init' || name === 'reset') return;
    Object.defineProperty(BlendedItemsComponentQuestionModel.prototype, name, {
      value: ItemsComponentModel.prototype[name]
    });
  });
  var ItemsQuestionModel = __AMD("core/js/models/itemsQuestionModel", function (_BlendedItemsComponen) {
    _inherits(ItemsQuestionModel, _BlendedItemsComponen);

    var _super2 = _createSuper(ItemsQuestionModel);

    function ItemsQuestionModel() {
      _classCallCheck(this, ItemsQuestionModel);

      return _super2.apply(this, arguments);
    }

    _createClass(ItemsQuestionModel, [{
      key: "init",
      value: function init() {
        _get(_getPrototypeOf(ItemsQuestionModel.prototype), "init", this).call(this);

        this.set('_isRadio', this.isSingleSelect());
        this.listenTo(this.getChildren(), 'change:_isActive', this.checkCanSubmit);
        this.checkCanSubmit();
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {
        if (!this.get('_isSubmitted')) return;
        var itemModels = this.getChildren();
        var userAnswer = this.get('_userAnswer');
        itemModels.each(function (item) {
          item.toggleActive(userAnswer[item.get('_index')]);
        });
        this.setQuestionAsSubmitted();
        this.markQuestion();
        this.setScore();
        this.setupFeedback();
      }
    }, {
      key: "setupRandomisation",
      value: function setupRandomisation() {
        if (!this.get('_isRandom') || !this.get('_isEnabled')) return;
        var children = this.getChildren();
        children.set(children.shuffle());
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        var activeItems = this.getActiveItems();
        return activeItems.length > 0;
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        var items = this.getChildren().slice(0);
        items.sort(function (a, b) {
          return a.get('_index') - b.get('_index');
        });
        var userAnswer = items.map(function (itemModel) {
          return itemModel.get('_isActive');
        });
        this.set('_userAnswer', userAnswer);
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        var allChildren = this.getChildren();
        var activeChildren = allChildren.filter(function (itemModel) {
          return itemModel.get('_isActive');
        });

        var isItemCorrect = function (itemModel) {
          return itemModel.get('_shouldBeSelected') && !itemModel.get('_isPartlyCorrect');
        };

        var isItemPartlyCorrect = function (itemModel) {
          return itemModel.get('_isPartlyCorrect');
        };

        var isItemIncorrect = function (itemModel) {
          return !itemModel.get('_shouldBeSelected') && !itemModel.get('_isPartlyCorrect');
        };

        var sum = function (list, predicate) {
          return list.reduce(function (sum, item) {
            return sum + (predicate(item) ? 1 : 0);
          }, 0);
        };

        var props = {
          _numberOfRequiredAnswers: sum(allChildren, isItemCorrect),
          _numberOfCorrectAnswers: sum(activeChildren, isItemCorrect),
          _numberOfPartlyCorrectAnswers: sum(activeChildren, isItemPartlyCorrect),
          _numberOfIncorrectAnswers: sum(activeChildren, isItemIncorrect)
        };
        activeChildren.forEach(function (itemModel) {
          return itemModel.set('_isCorrect', itemModel.get('_shouldBeSelected'));
        });
        props._isAtLeastOneCorrectSelection = props._numberOfCorrectAnswers || props._numberOfPartlyCorrectAnswers;
        var numberOfSelectableAnswers = this.get('_selectable');
        var hasSelectableCorrectAnswers = props._numberOfCorrectAnswers === numberOfSelectableAnswers;
        var hasAllCorrectAnswers = props._numberOfCorrectAnswers === props._numberOfRequiredAnswers;
        var hasCorrectAnswers = hasSelectableCorrectAnswers || hasAllCorrectAnswers;
        var hasIncorrectAnswers = props._numberOfIncorrectAnswers;
        var hasPartlyCorrectAnswers = props._numberOfPartlyCorrectAnswers;
        this.set(props);
        return hasCorrectAnswers && !hasIncorrectAnswers && !hasPartlyCorrectAnswers;
      }
    }, {
      key: "setScore",
      value: function setScore() {
        var questionWeight = this.get('_questionWeight');
        var answeredCorrectly = this.get('_isCorrect');
        var score = answeredCorrectly ? questionWeight : 0;
        this.set('_score', score);
      }
    }, {
      key: "score",
      get: function () {
        var _this$getChildren;

        if (!this.get('_hasItemScoring')) return _get(_getPrototypeOf(ItemsQuestionModel.prototype), "score", this);
        var children = ((_this$getChildren = this.getChildren()) === null || _this$getChildren === void 0 ? void 0 : _this$getChildren.toArray()) || [];
        return children.reduce(function (score, child) {
          return score += child.get('_isActive') ? child.get('_score') || 0 : 0;
        }, 0);
      }
    }, {
      key: "maxScore",
      get: function () {
        var _this$getChildren2;

        if (!this.get('_hasItemScoring')) return _get(_getPrototypeOf(ItemsQuestionModel.prototype), "maxScore", this);
        var children = ((_this$getChildren2 = this.getChildren()) === null || _this$getChildren2 === void 0 ? void 0 : _this$getChildren2.toArray()) || [];
        var scores = children.map(function (child) {
          return child.get('_score') || 0;
        });
        scores.sort(function (a, b) {
          return a - b;
        });
        return scores.reverse().slice(0, this.get('_selectable')).filter(function (score) {
          return score > 0;
        }).reduce(function (maxScore, score) {
          return maxScore += score;
        }, 0);
      }
    }, {
      key: "minScore",
      get: function () {
        var _this$getChildren3;

        if (!this.get('_hasItemScoring')) return _get(_getPrototypeOf(ItemsQuestionModel.prototype), "minScore", this);
        var children = ((_this$getChildren3 = this.getChildren()) === null || _this$getChildren3 === void 0 ? void 0 : _this$getChildren3.toArray()) || [];
        var scores = children.map(function (child) {
          return child.get('_score') || 0;
        });
        scores.sort(function (a, b) {
          return a - b;
        });
        return scores.slice(0, this.get('_selectable')).filter(function (score) {
          return score < 0;
        }).reduce(function (minScore, score) {
          return minScore += score;
        }, 0);
      }
    }, {
      key: "setupFeedback",
      value: function setupFeedback() {
        if (!this.has('_feedback')) return;

        if (this.get('_isCorrect')) {
          this.setupCorrectFeedback();
          return;
        }

        if (this.isPartlyCorrect()) {
          this.setupPartlyCorrectFeedback();
          return;
        }

        var activeItem = this.getActiveItem();

        if (this.isSingleSelect() && activeItem.get('feedback')) {
          this.setupIndividualFeedback(activeItem);
          return;
        }

        this.setupIncorrectFeedback();
      }
    }, {
      key: "setupIndividualFeedback",
      value: function setupIndividualFeedback(selectedItem) {
        var json = this.toJSON();
        this.set({
          feedbackTitle: Handlebars.compile(this.getFeedbackTitle(this.get('_feedback')))(json),
          feedbackMessage: Handlebars.compile(selectedItem.get('feedback'))(json)
        });
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        return this.get('_isAtLeastOneCorrectSelection');
      }
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        this.set('_userAnswer', []);
      }
    }, {
      key: "isAtActiveLimit",
      value: function isAtActiveLimit() {
        var selectedItems = this.getActiveItems();
        return selectedItems.length === this.get('_selectable');
      }
    }, {
      key: "isSingleSelect",
      value: function isSingleSelect() {
        return this.get('_selectable') === 1;
      }
    }, {
      key: "getLastActiveItem",
      value: function getLastActiveItem() {
        var selectedItems = this.getActiveItems();
        return selectedItems[selectedItems.length - 1];
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {
        this.resetItems();
      }
    }, {
      key: "resetItems",
      value: function resetItems() {
        this.resetActiveItems();
        this.set('_isAtLeastOneCorrectSelection', false);
      }
    }, {
      key: "getInteractionObject",
      value: function getInteractionObject() {
        var interactions = {
          correctResponsesPattern: [],
          choices: []
        };
        interactions.choices = this.getChildren().map(function (itemModel) {
          return {
            id: (itemModel.get('_index') + 1).toString(),
            description: itemModel.get('text')
          };
        });
        var correctItems = this.getChildren().filter(function (itemModel) {
          return itemModel.get('_shouldBeSelected');
        });
        interactions.correctResponsesPattern = [correctItems.map(function (itemModel) {
          return String(itemModel.get('_index') + 1);
        }).join('[,]')];
        return interactions;
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        var activeItems = this.getActiveItems();
        var activeIndexes = activeItems.map(function (itemModel) {
          return itemModel.get('_index') + 1;
        });
        return activeIndexes.join(',');
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        return 'choice';
      }
    }, {
      key: "getCorrectAnswerAsText",
      value: function getCorrectAnswerAsText() {
        var _correctOptions$;

        var globals = Adapt$1.course.get('_globals')._components['_' + this.get('_component')];

        var isSingleSelect = this.isSingleSelect();
        var ariaAnswer = isSingleSelect ? globals === null || globals === void 0 ? void 0 : globals.ariaCorrectAnswer : globals === null || globals === void 0 ? void 0 : globals.ariaCorrectAnswers;
        if (!ariaAnswer) return;
        var correctOptions = this.getChildren().where({
          _shouldBeSelected: true
        });
        var correctAnswer = isSingleSelect ? (_correctOptions$ = correctOptions[0]) === null || _correctOptions$ === void 0 ? void 0 : _correctOptions$.get('text') : correctOptions.map(function (correctOption) {
          return correctOption.get('text');
        }).join('<br>');
        return Handlebars.compile(ariaAnswer)({
          correctAnswer: correctAnswer
        });
      }
    }, {
      key: "getUserAnswerAsText",
      value: function getUserAnswerAsText() {
        var globals = Adapt$1.course.get('_globals')._components['_' + this.get('_component')];

        var isSingleSelect = this.isSingleSelect();
        var ariaAnswer = isSingleSelect ? globals === null || globals === void 0 ? void 0 : globals.ariaUserAnswer : globals === null || globals === void 0 ? void 0 : globals.ariaUserAnswers;
        if (!ariaAnswer) return;
        var selectedItems = this.getActiveItems();
        var userAnswer = isSingleSelect ? selectedItems[0].get('text') : selectedItems.map(function (selectedItem) {
          return selectedItem.get('text');
        }).join('<br>');
        return Handlebars.compile(ariaAnswer)({
          userAnswer: userAnswer
        });
      }
    }]);

    return ItemsQuestionModel;
  }(BlendedItemsComponentQuestionModel));

  var McqModel = __AMD("components/adapt-contrib-mcq/js/McqModel", function (_ItemsQuestionModel) {
    _inherits(McqModel, _ItemsQuestionModel);

    var _super = _createSuper(McqModel);

    function McqModel() {
      _classCallCheck(this, McqModel);

      return _super.apply(this, arguments);
    }

    return _createClass(McqModel);
  }(ItemsQuestionModel));

  var GmcqModel = __AMD("components/adapt-contrib-gmcq/js/GmcqModel", function (_McqModel) {
    _inherits(GmcqModel, _McqModel);

    var _super = _createSuper(GmcqModel);

    function GmcqModel() {
      _classCallCheck(this, GmcqModel);

      return _super.apply(this, arguments);
    }

    return _createClass(GmcqModel);
  }(McqModel));

  __AMD("components/adapt-contrib-gmcq/js/adapt-contrib-gmcq", components$1.register('gmcq', {
    model: GmcqModel,
    view: GmcqView$1
  }));

  var GraphicView = function (_ComponentView) {
    _inherits(GraphicView, _ComponentView);

    var _super = _createSuper(GraphicView);

    function GraphicView() {
      _classCallCheck(this, GraphicView);

      return _super.apply(this, arguments);
    }

    _createClass(GraphicView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-graphic-link': 'onClick'
        };
      }
    }, {
      key: "postRender",
      value: function postRender() {
        var _this = this;

        this.$('.graphic__widget').imageready(function () {
          _this.setReadyStatus();

          _this.setupInviewCompletion('.graphic__widget');
        });
      }
    }, {
      key: "onClick",
      value: function onClick(event) {
        if (event) event.preventDefault();
        var item = this.model.get('_graphic');
        var url = item._url,
            _item$_target = item._target,
            target = _item$_target === void 0 ? '_blank' : _item$_target;
        var isNewWindow = target !== '_self';
        if (isNewWindow) return window.open(url, target);
        var isRouterNavigation = url.substr(0, 1) === '#';
        if (isRouterNavigation) return Backbone.history.navigate(url, {
          trigger: true
        });
        window.location.href = url;
      }
    }]);

    return GraphicView;
  }(ComponentView$1);

  GraphicView.template = 'graphic.jsx';
  var GraphicView$1 = __AMD("components/adapt-contrib-graphic/js/GraphicView", GraphicView);

  var GraphicModel = __AMD("components/adapt-contrib-graphic/js/GraphicModel", function (_ComponentModel) {
    _inherits(GraphicModel, _ComponentModel);

    var _super = _createSuper(GraphicModel);

    function GraphicModel() {
      _classCallCheck(this, GraphicModel);

      return _super.apply(this, arguments);
    }

    return _createClass(GraphicModel);
  }(ComponentModel$1));

  __AMD("components/adapt-contrib-graphic/js/adapt-contrib-graphic", components$1.register('graphic', {
    model: GraphicModel,
    view: GraphicView$1
  }));

  var HotgraphicPopupView = function (_Backbone$View) {
    _inherits(HotgraphicPopupView, _Backbone$View);

    var _super = _createSuper(HotgraphicPopupView);

    function HotgraphicPopupView() {
      _classCallCheck(this, HotgraphicPopupView);

      return _super.apply(this, arguments);
    }

    _createClass(HotgraphicPopupView, [{
      key: "className",
      value: function className() {
        return 'hotgraphic-popup';
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-hotgraphic-popup-close': 'closePopup',
          'click .js-hotgraphic-controls-click': 'onControlClick'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _get2;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(HotgraphicPopupView.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));

        this.onControlClick = _.debounce(this.onControlClick.bind(this), 100);
        this.listenToOnce(Adapt$1, 'notify:opened', this.onOpened);
        this.listenTo(this.model.getChildren(), {
          'change:_isActive': this.onItemsActiveChange,
          'change:_isVisited': this.onItemsVisitedChange
        });
        this.render();
      }
    }, {
      key: "onOpened",
      value: function onOpened() {
        this.applyNavigationClasses(this.model.getActiveItem().get('_index'));
        this.updatePageCount();
        this.handleTabs();
      }
    }, {
      key: "applyNavigationClasses",
      value: function applyNavigationClasses(index) {
        var itemCount = this.model.get('_items').length;
        var canCycleThroughPagination = this.model.get('_canCycleThroughPagination');
        var shouldEnableBack = index > 0 || canCycleThroughPagination;
        var shouldEnableNext = index < itemCount - 1 || canCycleThroughPagination;
        var $controls = this.$('.hotgraphic-popup__controls');
        this.$('hotgraphic-popup__nav').toggleClass('first', !shouldEnableBack).toggleClass('last', !shouldEnableNext);
        a11y$1.toggleAccessibleEnabled($controls.filter('.back'), shouldEnableBack);
        a11y$1.toggleAccessibleEnabled($controls.filter('.next'), shouldEnableNext);
      }
    }, {
      key: "updatePageCount",
      value: function updatePageCount() {
        var template = Adapt$1.course.get('_globals')._components._hotgraphic.popupPagination || '{{itemNumber}} / {{totalItems}}';
        var labelText = Handlebars.compile(template)({
          itemNumber: this.model.getActiveItem().get('_index') + 1,
          totalItems: this.model.get('_items').length
        });
        this.$('.hotgraphic-popup__count').html(labelText);
      }
    }, {
      key: "handleTabs",
      value: function handleTabs() {
        a11y$1.toggleHidden(this.$('.hotgraphic-popup__item:not(.is-active)'), true);
        a11y$1.toggleHidden(this.$('.hotgraphic-popup__item.is-active'), false);
      }
    }, {
      key: "onItemsActiveChange",
      value: function onItemsActiveChange(item, _isActive) {
        if (!_isActive) return;
        var index = item.get('_index');
        this.updatePageCount();
        this.applyItemClasses(index);
        this.handleTabs();
        this.handleFocus(index);
      }
    }, {
      key: "applyItemClasses",
      value: function applyItemClasses(index) {
        this.$(".hotgraphic-popup__item[data-index=\"".concat(index, "\"]")).addClass('is-active').removeAttr('aria-hidden');
        this.$(".hotgraphic-popup__item[data-index=\"".concat(index, "\"] .hotgraphic-popup__item-title")).attr('id', 'notify-heading');
        this.$(".hotgraphic-popup__item:not([data-index=\"".concat(index, "\"])")).removeClass('is-active').attr('aria-hidden', 'true');
        this.$(".hotgraphic-popup__item:not([data-index=\"".concat(index, "\"]) .hotgraphic-popup__item-title")).removeAttr('id');
      }
    }, {
      key: "handleFocus",
      value: function handleFocus(index) {
        a11y$1.focusFirst(this.$('.hotgraphic-popup__inner .is-active'));
        this.applyNavigationClasses(index);
      }
    }, {
      key: "onItemsVisitedChange",
      value: function onItemsVisitedChange(item, _isVisited) {
        if (!_isVisited) return;
        this.$('.hotgraphic-popup__item').filter("[data-index=\"".concat(item.get('_index'), "\"]")).addClass('is-visited');
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        data.view = this;
        var template = Handlebars.templates[this.constructor.template];
        this.$el.html(template(data));
      }
    }, {
      key: "closePopup",
      value: function closePopup() {
        Adapt$1.trigger('notify:close');
      }
    }, {
      key: "onControlClick",
      value: function onControlClick(event) {
        var direction = $(event.currentTarget).data('direction');
        var index = this.getNextIndex(direction);
        if (index === -1) return;
        this.setItemState(index);
      }
    }, {
      key: "getNextIndex",
      value: function getNextIndex(direction) {
        var index = this.model.getActiveItem().get('_index');
        var lastIndex = this.model.get('_items').length - 1;

        switch (direction) {
          case 'back':
            if (index > 0) return --index;
            if (this.model.get('_canCycleThroughPagination')) return lastIndex;
            break;

          case 'next':
            if (index < lastIndex) return ++index;
            if (this.model.get('_canCycleThroughPagination')) return 0;
        }

        return -1;
      }
    }, {
      key: "setItemState",
      value: function setItemState(index) {
        this.model.getActiveItem().toggleActive();
        var nextItem = this.model.getItem(index);
        nextItem.toggleActive();
        nextItem.toggleVisited(true);
      }
    }]);

    return HotgraphicPopupView;
  }(Backbone.View);
  HotgraphicPopupView.template = 'hotgraphicPopup';
  var HotgraphicPopupView$1 = __AMD("components/adapt-contrib-hotgraphic/js/hotgraphicPopupView", HotgraphicPopupView);

  var HotGraphicView = function (_ComponentView) {
    _inherits(HotGraphicView, _ComponentView);

    var _super = _createSuper(HotGraphicView);

    function HotGraphicView() {
      _classCallCheck(this, HotGraphicView);

      return _super.apply(this, arguments);
    }

    _createClass(HotGraphicView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-hotgraphic-item-click': 'onPinClicked'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _get2;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(HotGraphicView.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));

        this.setUpViewData();
        this.setUpModelData();
        this.setUpEventListeners();
      }
    }, {
      key: "setUpViewData",
      value: function setUpViewData() {
        this.popupView = null;
        this._isPopupOpen = false;
      }
    }, {
      key: "setUpModelData",
      value: function setUpModelData() {
        if (this.model.get('_canCycleThroughPagination') !== undefined) return;
        this.model.set('_canCycleThroughPagination', false);
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(Adapt$1, 'device:changed', this.reRender);
        this.listenTo(this.model.getChildren(), {
          'change:_isActive': this.onItemsActiveChange,
          'change:_isVisited': this.onItemsVisitedChange
        });
      }
    }, {
      key: "reRender",
      value: function reRender() {
        if (device$1.screenSize === 'large' || this.model.get('_isNarrativeOnMobile') === false) return;
        this.replaceWithNarrative();
      }
    }, {
      key: "replaceWithNarrative",
      value: function replaceWithNarrative() {
        var NarrativeView = components$1.getViewClass('narrative');
        if (!NarrativeView) return;
        var model = this.prepareNarrativeModel();
        var newNarrative = new NarrativeView({
          model: model
        });
        var $container = data$1.findViewByModelId(model.get('_parentId')).$el.find('.component__container');
        $container.append(newNarrative.$el);
        this.remove();

        _.defer(function () {
          Adapt$1.trigger('device:resize');
        });
      }
    }, {
      key: "prepareNarrativeModel",
      value: function prepareNarrativeModel() {
        this.model.set({
          _component: 'narrative',
          _wasHotgraphic: true,
          originalBody: this.model.get('body'),
          originalInstruction: this.model.get('instruction')
        });
        var activeItem = this.model.getActiveItem();

        if (!activeItem) {
          this.model.getItem(0).toggleActive(true);
        }

        if (this.model.get('mobileBody')) {
          this.model.set('body', this.model.get('mobileBody'));
        }

        if (this.model.get('mobileInstruction')) {
          this.model.set('instruction', this.model.get('mobileInstruction'));
        }

        return this.model;
      }
    }, {
      key: "onItemsActiveChange",
      value: function onItemsActiveChange(model, _isActive) {
        this.getItemElement(model).toggleClass('is-active', _isActive);
      }
    }, {
      key: "getItemElement",
      value: function getItemElement(model) {
        var index = model.get('_index');
        return this.$('.js-hotgraphic-item-click').filter("[data-index=\"".concat(index, "\"]"));
      }
    }, {
      key: "onItemsVisitedChange",
      value: function onItemsVisitedChange(model, _isVisited) {
        if (!_isVisited) return;
        var $pin = this.getItemElement(model);
        var visitedLabel = " ".concat(this.model.get('_globals')._accessibility._ariaLabels.visited, ".");
        $pin.find('.aria-label').each(function (index, el) {
          el.innerHTML += visitedLabel;
        });
        $pin.addClass('is-visited');
      }
    }, {
      key: "preRender",
      value: function preRender() {
        if (device$1.screenSize === 'large') {
          this.render();
          return;
        }

        this.reRender();
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.$('.hotgraphic__widget').imageready(this.setReadyStatus.bind(this));
        if (this.model.get('_setCompletionOn') !== 'inview') return;
        this.setupInviewCompletion('.component__widget');
      }
    }, {
      key: "onPinClicked",
      value: function onPinClicked(event) {
        var item = this.model.getItem($(event.currentTarget).data('index'));
        item.toggleActive(true);
        item.toggleVisited(true);
        this.openPopup();
      }
    }, {
      key: "openPopup",
      value: function openPopup() {
        if (this._isPopupOpen) return;
        this._isPopupOpen = true;
        this.popupView = new HotgraphicPopupView$1({
          model: this.model
        });
        notify$1.popup({
          _attributes: {
            'data-adapt-id': this.model.get('_id')
          },
          _view: this.popupView,
          _isCancellable: true,
          _showCloseButton: false,
          _classes: 'hotgraphic is-component is-hotgraphic ' + this.model.get('_classes')
        });
        this.listenToOnce(Adapt$1, {
          'popup:closed': this.onPopupClosed
        });
      }
    }, {
      key: "onPopupClosed",
      value: function onPopupClosed() {
        this.model.getActiveItem().toggleActive();
        this._isPopupOpen = false;
      }
    }]);

    return HotGraphicView;
  }(ComponentView$1);

  HotGraphicView.template = 'hotgraphic';
  var HotgraphicView = __AMD("components/adapt-contrib-hotgraphic/js/hotgraphicView", HotGraphicView);

  __AMD("components/adapt-contrib-hotgraphic/js/adapt-contrib-hotgraphic", components$1.register('hotgraphic', {
    model: ItemsComponentModel.extend({}),
    view: HotgraphicView
  }));

  var MatchingView = function (_QuestionView) {
    _inherits(MatchingView, _QuestionView);

    var _super = _createSuper(MatchingView);

    function MatchingView() {
      _classCallCheck(this, MatchingView);

      return _super.apply(this, arguments);
    }

    _createClass(MatchingView, [{
      key: "preinitialize",
      value: function preinitialize() {
        var _this = this;

        this.setActiveOption = function () {
          var _this$model;

          return (_this$model = _this.model).setActiveOption.apply(_this$model, arguments);
        };

        this.setHighlightedOption = function () {
          var _this$model2;

          return (_this$model2 = _this.model).setHighlightedOption.apply(_this$model2, arguments);
        };
      }
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {
        this.model.setupRandomisation();
        this.model.setupInitialHighlighted();
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        this.setReadyStatus();
      }
    }]);

    return MatchingView;
  }(QuestionView$1);

  MatchingView.template = 'matching.jsx';
  var MatchingView$1 = __AMD("components/adapt-contrib-matching/js/MatchingView", MatchingView);

  var MatchingItemModel = __AMD("components/adapt-contrib-matching/js/MatchingItemModel", function (_ItemModel) {
    _inherits(MatchingItemModel, _ItemModel);

    var _super = _createSuper(MatchingItemModel);

    function MatchingItemModel() {
      _classCallCheck(this, MatchingItemModel);

      return _super.apply(this, arguments);
    }

    _createClass(MatchingItemModel, [{
      key: "defaults",
      value: function defaults() {
        return ItemModel.resultExtend('defaults', {
          _isHighlighted: false
        });
      }
    }, {
      key: "toggleHighlighted",
      value: function toggleHighlighted() {
        var isHighlighted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.get('_isHighlighted');
        this.set('_isHighlighted', isHighlighted);
      }
    }]);

    return MatchingItemModel;
  }(ItemModel));

  var MatchingModel = __AMD("components/adapt-contrib-matching/js/MatchingModel", function (_ItemsQuestionModel) {
    _inherits(MatchingModel, _ItemsQuestionModel);

    var _super = _createSuper(MatchingModel);

    function MatchingModel() {
      _classCallCheck(this, MatchingModel);

      return _super.apply(this, arguments);
    }

    _createClass(MatchingModel, [{
      key: "toJSON",
      value: function toJSON() {
        var json = _get(_getPrototypeOf(MatchingModel.prototype), "toJSON", this).call(this);

        json._items = this.get('_items');
        json._options = this.getChildren().toJSON();
        return json;
      }
    }, {
      key: "setUpItems",
      value: function setUpItems() {
        var index = 0;
        var items = this.get('_items') || [];
        var options = items.reduce(function (options, item, itemIndex) {
          item._index = itemIndex;
          var itemOptions = item._options || [];
          itemOptions.forEach(function (option, optionIndex) {
            option._index = index++;
            option._optionIndex = optionIndex;
            option._itemIndex = item._index;
            option._shouldBeSelected = Boolean(option._isCorrect);
          });
          options.push.apply(options, _toConsumableArray(itemOptions));
          return options;
        }, []);
        this.set({
          _items: items,
          _selectable: items.length
        });
        this.setChildren(new Backbone.Collection(options, {
          model: MatchingItemModel
        }));
      }
    }, {
      key: "setupInitialHighlighted",
      value: function setupInitialHighlighted() {
        var _this$get,
            _this = this;

        (_this$get = this.get('_items')) === null || _this$get === void 0 ? void 0 : _this$get.forEach(function (_ref) {
          var _index = _ref._index;

          var selectOption = _this.getActiveItemOption(_index) || _this.getFirstItemOption(_index);

          selectOption === null || selectOption === void 0 ? void 0 : selectOption.toggleHighlighted(true);
        });
      }
    }, {
      key: "resetItems",
      value: function resetItems() {
        _get(_getPrototypeOf(MatchingModel.prototype), "resetItems", this).call(this);

        this.resetHighlightedItems();
        this.setupInitialHighlighted();
      }
    }, {
      key: "resetHighlightedItems",
      value: function resetHighlightedItems() {
        this.getChildren().forEach(function (option) {
          return option.toggleHighlighted(false);
        });
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        var options = this.getChildren().models;
        var activeCount = options.reduce(function (count, option) {
          return count + (option.get('_isActive') ? 1 : 0);
        }, 0);
        var canSubmit = activeCount === this.get('_selectable');
        return canSubmit;
      }
    }, {
      key: "getItemOptions",
      value: function getItemOptions(itemIndex) {
        return this.getChildren().filter(function (option) {
          return option.get('_itemIndex') === itemIndex;
        });
      }
    }, {
      key: "getActiveItemOption",
      value: function getActiveItemOption(itemIndex) {
        return this.getItemOptions(itemIndex).find(function (option) {
          return option.get('_isActive');
        });
      }
    }, {
      key: "getFirstItemOption",
      value: function getFirstItemOption(itemIndex) {
        return this.getItemOptions(itemIndex)[0];
      }
    }, {
      key: "getCorrectItemOption",
      value: function getCorrectItemOption(itemIndex) {
        var activeOption = this.getActiveItemOption(itemIndex);
        return activeOption.get('_shouldBeSelected') ? activeOption : this.getItemOptions(itemIndex).find(function (option) {
          return option.get('_shouldBeSelected');
        });
      }
    }, {
      key: "setHighlightedOption",
      value: function setHighlightedOption(optionIndex) {
        var itemIndex = this.getItem(optionIndex).get('_itemIndex');
        var itemOptions = this.getItemOptions(itemIndex);
        itemOptions.forEach(function (option) {
          var isHighlighted = option.get('_index') === optionIndex;
          option.toggleHighlighted(isHighlighted);
        });
      }
    }, {
      key: "setActiveOption",
      value: function setActiveOption(optionIndex) {
        var itemIndex = this.getItem(optionIndex).get('_itemIndex');
        var itemOptions = this.getItemOptions(itemIndex);
        itemOptions.forEach(function (option) {
          var isActive = option.get('_index') === optionIndex;
          option.toggleHighlighted(isActive);
          option.toggleActive(isActive);
        });
        this.unsetDuplicateOptions(optionIndex);
      }
    }, {
      key: "unsetDuplicateOptions",
      value: function unsetDuplicateOptions(optionIndex) {
        var allowOnlyUniqueAnswers = this.get('_allowOnlyUniqueAnswers');
        if (!allowOnlyUniqueAnswers) return;
        var itemIndex = this.getItem(optionIndex).get('_itemIndex');
        var activeItemOption = this.getActiveItemOption(itemIndex);
        var activeItemOptionText = activeItemOption.get('text');
        var otherActiveOptions = this.getChildren().filter(function (option) {
          return option !== activeItemOption && option.get('_isActive');
        });
        otherActiveOptions.forEach(function (option) {
          var optionText = option.get('text');
          var hasMatchingText = activeItemOptionText === optionText;
          if (!hasMatchingText) return;
          option.toggleHighlighted(false);
          option.toggleActive(false);
        });
      }
    }, {
      key: "maxScore",
      get: function () {
        var _this2 = this;

        if (!this.get('_hasItemScoring')) return _get(_getPrototypeOf(MatchingModel.prototype), "maxScore", this);
        var items = this.get('_items') || [];
        var maxItemScores = items.map(function (_ref2) {
          var _index = _ref2._index;

          var itemOptions = _this2.getItemOptions(_index);

          var optionScores = itemOptions.map(function (child) {
            return child.get('_score') || 0;
          });
          optionScores.sort(function (a, b) {
            return a - b;
          });
          return optionScores[optionScores.length - 1] || 0;
        });
        maxItemScores.sort(function (a, b) {
          return a - b;
        });
        return maxItemScores.reverse().filter(function (score) {
          return score > 0;
        }).reduce(function (maxScore, score) {
          return maxScore += score;
        }, 0);
      }
    }, {
      key: "minScore",
      get: function () {
        var _this3 = this;

        if (!this.get('_hasItemScoring')) return _get(_getPrototypeOf(MatchingModel.prototype), "minScore", this);
        var items = this.get('_items') || [];
        var minItemScores = items.map(function (_ref3) {
          var _index = _ref3._index;

          var itemOptions = _this3.getItemOptions(_index);

          var optionScores = itemOptions.map(function (child) {
            return child.get('_score') || 0;
          });
          optionScores.sort(function (a, b) {
            return a - b;
          });
          return optionScores[0] || 0;
        });
        minItemScores.sort(function (a, b) {
          return a - b;
        });
        return minItemScores.filter(function (score) {
          return score < 0;
        }).reduce(function (minScore, score) {
          return minScore += score;
        }, 0);
      }
    }, {
      key: "getInteractionObject",
      value: function getInteractionObject() {
        var _this4 = this;

        var items = this.get('_items');
        var interactions = {
          correctResponsesPattern: null,
          source: null,
          target: null
        };
        interactions.correctResponsesPattern = [items.map(function (item) {
          var itemPosition = item._index + 1;

          var itemOptions = _this4.getItemOptions(item._index).sort(function (a, b) {
            return a.get('_index') - b.get('_index');
          });

          return [itemPosition, itemOptions.filter(function (option) {
            return option.get('_shouldBeSelected');
          }).map(function (option) {
            var optionPosition = option.get('_optionIndex') + 1;
            return "".concat(itemPosition, "_").concat(optionPosition);
          })].join('[.]');
        }).join('[,]')];
        interactions.source = items.map(function (item) {
          var itemPosition = item._index + 1;
          return {
            id: "".concat(itemPosition),
            description: item.text
          };
        }).flat(Infinity);
        interactions.target = items.map(function (item) {
          var itemPosition = item._index + 1;

          var itemOptions = _this4.getItemOptions(item._index).sort(function (a, b) {
            return a.get('_index') - b.get('_index');
          });

          return itemOptions.map(function (option) {
            var optionPosition = option.get('_optionIndex') + 1;
            return {
              id: "".concat(itemPosition, "_").concat(optionPosition),
              description: option.get('text')
            };
          });
        }).flat(Infinity);
        return interactions;
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        var _this5 = this;

        var items = this.get('_items');
        var responses = items.map(function (_ref4) {
          var _index = _ref4._index;

          var activeOption = _this5.getActiveItemOption(_index);

          var itemIndex = _index + 1;
          var optionIndex = activeOption.get('_optionIndex') + 1;
          return "".concat(itemIndex, ".").concat(optionIndex);
        });
        return responses.join('#');
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        return 'matching';
      }
    }, {
      key: "getCorrectAnswerAsText",
      value: function getCorrectAnswerAsText() {
        var _this6 = this;

        var correctAnswerTemplate = Adapt$1.course.get('_globals')._components._matching.ariaCorrectAnswer;

        var ariaAnswer = this.get('_items').map(function (item) {
          var correctOption = _this6.getCorrectItemOption(item._index);

          return Handlebars.compile(correctAnswerTemplate)({
            itemText: item.text,
            correctAnswer: correctOption.get('text')
          });
        }).join('<br>');
        return ariaAnswer;
      }
    }, {
      key: "getUserAnswerAsText",
      value: function getUserAnswerAsText() {
        var _this7 = this;

        var userAnswerTemplate = Adapt$1.course.get('_globals')._components._matching.ariaUserAnswer;

        var items = this.get('_items');
        var ariaAnswer = items.map(function (item) {
          var activeOption = _this7.getActiveItemOption(item._index);

          return Handlebars.compile(userAnswerTemplate)({
            itemText: item.text,
            userAnswer: activeOption.get('text')
          });
        }).join('<br>');
        return ariaAnswer;
      }
    }]);

    return MatchingModel;
  }(ItemsQuestionModel));

  __AMD("components/adapt-contrib-matching/js/adapt-contrib-matching", components$1.register('matching', {
    view: MatchingView$1,
    model: MatchingModel
  }));

  __AMD("components/adapt-contrib-mcq/js/adapt-contrib-mcq", Adapt$1.register('mcq', {
    model: McqModel,
    view: McqView$1
  }));

  var mepPrototype = $.extend({}, window.mejs.MediaElementPlayer.prototype);
  $.extend(window.mejs.MediaElementPlayer.prototype, {
    detectFullscreenMode: function () {
      var vendorPrefix = this.getVendorPrefix();
      var fsEventName = 'on' + vendorPrefix + 'fullscreenchange';

      if (document[fsEventName] === null) {
        document[fsEventName] = function fullScreenEventHandler() {
          var elementName = vendorPrefix === '' ? 'fullscreenElement' : vendorPrefix + 'FullscreenElement';

          if (document[elementName] !== null) {
            $.inview.lock('mediaelement');
            Adapt$1.trigger('media:fullscreen:enter');
          } else {
            $.inview.unlock('mediaelement');
            Adapt$1.trigger('media:fullscreen:exit');
          }
        };
      }

      return mepPrototype.detectFullscreenMode.apply(this, arguments);
    },
    getVendorPrefix: function () {
      var browser = device$1.browser;

      if (browser === 'internet explorer') {
        return 'ms';
      }

      if (browser === 'microsoft edge' || browser === 'safari') {
        return 'webkit';
      }

      return '';
    }
  });

  Object.assign(window.mejs.MepDefaults, {
    keyActions: [],
    defaultSeekForwardInterval: function (duration) {
      if (_typeof(duration) === 'object') return duration.duration * 0.05;
      return duration * 0.05;
    },
    defaultSeekBackwardInterval: function (duration) {
      if (_typeof(duration) === 'object') return duration.duration * 0.05;
      return duration * 0.05;
    }
  });

  var purge = function (d) {
    var a = d.attributes;

    if (a) {
      for (var i = a.length - 1; i >= 0; i -= 1) {
        var n = a[i].name;

        if (typeof d[n] === 'function') {
          d[n] = null;
        }
      }
    }

    a = d.childNodes;

    if (a) {
      for (var _i = 0, count = a.length; _i < count; _i += 1) {
        purge(d.childNodes[_i]);
      }
    }
  };

  window.mejs.i18n.locale.language = 'en-US';
  window.mejs.i18n.locale.strings['en-US'] = {};
  var ariaLabelMappings = {
    playText: 'Play',
    pauseText: 'Pause',
    stopText: 'Stop',
    audioPlayerText: 'Audio Player',
    videoPlayerText: 'Video Player',
    tracksText: 'Captions/Subtitles',
    timeSliderText: 'Time Slider',
    muteText: 'Mute Toggle',
    unmuteStatusText: 'Unmute',
    muteStatusText: 'Mute',
    volumeSliderText: 'Volume Slider',
    fullscreenText: 'Fullscreen',
    goFullscreenText: 'Go Fullscreen',
    turnOffFullscreenText: 'Turn off Fullscreen',
    noneText: 'None',
    skipBackText: 'Skip back %1 seconds',
    allyVolumeControlText: 'Use Up/Down Arrow keys to increase or decrease volume.',
    progessHelpText: 'Use Left/Right Arrow keys to advance one second, Up/Down arrows to advance ten seconds.'
  };
  Adapt$1.on('app:dataReady', function () {
    var _Adapt$course$get, _Adapt$course$get$_co;

    var dynamicLabels = window.mejs.i18n.locale.strings['en-US'];
    var fixedDefaults = window.mejs.MepDefaults;
    var globals = (_Adapt$course$get = Adapt$1.course.get('_globals')) === null || _Adapt$course$get === void 0 ? void 0 : (_Adapt$course$get$_co = _Adapt$course$get._components) === null || _Adapt$course$get$_co === void 0 ? void 0 : _Adapt$course$get$_co._media;

    for (var k in ariaLabelMappings) {
      var _globals$k;

      dynamicLabels[ariaLabelMappings[k]] = (_globals$k = globals[k]) !== null && _globals$k !== void 0 ? _globals$k : ariaLabelMappings[k];
      fixedDefaults[k] = dynamicLabels[ariaLabelMappings[k]];
    }
  });

  var MediaView = function (_ComponentView) {
    _inherits(MediaView, _ComponentView);

    var _super = _createSuper(MediaView);

    function MediaView() {
      _classCallCheck(this, MediaView);

      return _super.apply(this, arguments);
    }

    _createClass(MediaView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-media-inline-transcript-toggle': 'onToggleInlineTranscript',
          'click .js-media-external-transcript-click': 'onExternalTranscriptClicked',
          'click .js-skip-to-transcript': 'onSkipToTranscript'
        };
      }
    }, {
      key: "className",
      value: function className() {
        var classes = _get(_getPrototypeOf(MediaView.prototype), "className", this).call(this);

        var playerOptions = this.model.get('_playerOptions');

        if (playerOptions !== null && playerOptions !== void 0 && playerOptions.toggleCaptionsButtonWhenOnlyOne) {
          classes += ' toggle-captions';
        }

        return classes;
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.listenTo(Adapt$1, {
          'device:resize': this.onScreenSizeChanged,
          'device:changed': this.onDeviceChanged,
          'media:stop': this.onMediaStop
        });

        _.bindAll(this, 'onMediaElementPlay', 'onMediaElementPause', 'onMediaElementEnded', 'onMediaElementTimeUpdate', 'onMediaElementSeeking', 'onOverlayClick', 'onMediaElementClick', 'onWidgetInview');

        this.model.set({
          _isMediaEnded: false,
          _isMediaPlaying: false
        });
        if (!this.model.get('_media').source) return;
        var media = this.model.get('_media');

        if (window.location.protocol === 'https:' && media.source.indexOf('http:') === 0) {
          media.source = media.source.replace(/^http:/, 'https:');
        }

        this.model.set('_media', media);
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.setupPlayer();
        this.addMejsButtonClass();
      }
    }, {
      key: "addMejsButtonClass",
      value: function addMejsButtonClass() {
        this.$('.mejs-overlay-button').addClass('icon');
      }
    }, {
      key: "setupPlayer",
      value: function setupPlayer() {
        var _this = this;

        if (!this.model.get('_playerOptions')) this.model.set('_playerOptions', {});
        var modelOptions = this.model.get('_playerOptions');

        if (modelOptions.pluginPath === undefined) {
          _.extend(modelOptions, {
            pluginPath: 'https://cdnjs.cloudflare.com/ajax/libs/mediaelement/2.21.2/',
            flashName: 'flashmediaelement-cdn.swf',
            flashScriptAccess: 'always'
          });
        }

        if (modelOptions.features === undefined) {
          modelOptions.features = ['playpause', 'progress', 'current', 'duration'];

          if (this.model.get('_useClosedCaptions')) {
            modelOptions.features.unshift('tracks');
          }

          if (this.model.get('_allowFullScreen')) {
            modelOptions.features.push('fullscreen');
          }

          if (this.model.get('_showVolumeControl')) {
            modelOptions.features.push('volume');
          }
        }

        modelOptions.success = _.debounce(this.onPlayerReady.bind(this), 100);

        if (this.model.get('_useClosedCaptions')) {
          var startLanguage = this.model.get('_startLanguage') || 'en';

          if (!offlineStorage$1.get('captions')) {
            offlineStorage$1.set('captions', startLanguage);
          }

          modelOptions.startLanguage = this.checkForSupportedCCLanguage(offlineStorage$1.get('captions'));
        }

        if (modelOptions.alwaysShowControls === undefined) {
          modelOptions.alwaysShowControls = false;
        }

        if (modelOptions.hideVideoControlsOnLoad === undefined) {
          modelOptions.hideVideoControlsOnLoad = true;
        }

        this.addMediaTypeClass();
        this.addThirdPartyFixes(modelOptions, function () {
          _this.$('audio, video').mediaelementplayer(modelOptions);

          _this.cleanUpPlayer();

          var _media = _this.model.get('_media');

          if (!_media.mp3 && !_media.mp4 && !_media.ogv && !_media.webm && !_media.source) {
            logging$1.warn('ERROR! No media is selected in components.json for component ' + _this.model.get('_id'));

            _this.setReadyStatus();

            return;
          }

          if (!_media.source) return;

          _this.$('.media__widget').addClass('external-source');
        });
      }
    }, {
      key: "addMediaTypeClass",
      value: function addMediaTypeClass() {
        var media = this.model.get('_media');
        if (!(media !== null && media !== void 0 && media.type)) return;
        var typeClass = media.type.replace(/\//, '-');
        this.$('.media__widget').addClass(typeClass);
      }
    }, {
      key: "addThirdPartyFixes",
      value: function addThirdPartyFixes(modelOptions, callback) {
        var media = this.model.get('_media');
        if (!media) return callback();

        if (media.mp3 || media.ogg) {
          modelOptions.alwaysShowControls = true;
        }

        switch (media.type) {
          case 'video/vimeo':
            modelOptions.alwaysShowControls = false;
            modelOptions.hideVideoControlsOnLoad = true;
            modelOptions.features = [];
            if (MediaView.froogaloopAdded) return callback();
            $.getScript('assets/froogaloop.js').done(function () {
              MediaView.froogaloopAdded = true;
              callback();
            }).fail(function () {
              MediaView.froogaloopAdded = false;
              logging$1.error('Could not load froogaloop.js');
            });
            break;

          default:
            callback();
        }
      }
    }, {
      key: "cleanUpPlayer",
      value: function cleanUpPlayer() {
        this.$('.media__widget').children('.mejs-offscreen').remove();
        this.$('[role=application]').removeAttr('role tabindex');
        this.$('[aria-controls]').removeAttr('aria-controls');
        this.$('.mejs-overlay-play').attr('aria-hidden', 'true');
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this.completionEvent = this.model.get('_setCompletionOn') || 'play';

        if (this.completionEvent === 'inview') {
          this.setupInviewCompletion('.component__widget');
        }

        if (this.model.get('_preventForwardScrubbing') && !this.model.get('_isComplete')) {
          $(this.mediaElement).on({
            seeking: this.onMediaElementSeeking,
            timeupdate: this.onMediaElementTimeUpdate
          });
        }

        $(this.mediaElement).on({
          play: this.onMediaElementPlay,
          pause: this.onMediaElementPause,
          ended: this.onMediaElementEnded
        });

        _.delay(this.listenForCaptionsChange.bind(this), 250);
      }
    }, {
      key: "listenForCaptionsChange",
      value: function listenForCaptionsChange() {
        var _this2 = this;

        if (!this.model.get('_useClosedCaptions')) return;
        var selector = this.model.get('_playerOptions').toggleCaptionsButtonWhenOnlyOne ? '.mejs-captions-button button' : '.mejs-captions-selector';
        this.$(selector).on('click.mediaCaptionsChange', _.debounce(function () {
          var srclang = _this2.mediaElement.player.selectedTrack ? _this2.mediaElement.player.selectedTrack.srclang : 'none';
          offlineStorage$1.set('captions', srclang);
          Adapt$1.trigger('media:captionsChange', _this2, srclang);
        }, 250));
        this.listenTo(Adapt$1, 'media:captionsChange', this.onCaptionsChanged);
      }
    }, {
      key: "onCaptionsChanged",
      value: function onCaptionsChanged(view, lang) {
        if ((view === null || view === void 0 ? void 0 : view.cid) === this.cid) return;
        lang = this.checkForSupportedCCLanguage(lang);
        this.mediaElement.player.setTrack(lang);
        var $inputs = this.$('.mejs-captions-selector input');
        $inputs.filter(':checked').prop('checked', false);
        $inputs.filter("[value=\"".concat(lang, "\"]")).prop('checked', true);
      }
    }, {
      key: "checkForSupportedCCLanguage",
      value: function checkForSupportedCCLanguage(lang) {
        if (!lang || lang === 'none') return 'none';
        if (_.findWhere(this.model.get('_media').cc, {
          srclang: lang
        })) return lang;
        return this.model.get('_startLanguage') || 'none';
      }
    }, {
      key: "onMediaElementPlay",
      value: function onMediaElementPlay(event) {
        this.queueGlobalEvent('play');
        Adapt$1.trigger('media:stop', this);

        if (this.model.get('_pauseWhenOffScreen')) {
          this.$('.mejs-container').on('inview', this.onWidgetInview);
        }

        this.model.set({
          _isMediaPlaying: true,
          _isMediaEnded: false
        });
        if (this.completionEvent !== 'play') return;
        this.setCompletionStatus();
      }
    }, {
      key: "onMediaElementPause",
      value: function onMediaElementPause(event) {
        this.queueGlobalEvent('pause');
        this.$('.mejs-container').off('inview', this.onWidgetInview);
        this.model.set('_isMediaPlaying', false);
      }
    }, {
      key: "onMediaElementEnded",
      value: function onMediaElementEnded(event) {
        this.queueGlobalEvent('ended');
        this.model.set('_isMediaEnded', true);

        if (this.completionEvent === 'ended') {
          this.setCompletionStatus();
        }
      }
    }, {
      key: "onWidgetInview",
      value: function onWidgetInview(event, isInView) {
        if (!isInView && !this.mediaElement.paused) this.mediaElement.player.pause();
      }
    }, {
      key: "onMediaElementSeeking",
      value: function onMediaElementSeeking(event) {
        var maxViewed = this.model.get('_maxViewed');

        if (!maxViewed) {
          maxViewed = 0;
        }

        if (event.target.currentTime <= maxViewed) return;
        event.target.currentTime = maxViewed;
      }
    }, {
      key: "onMediaElementTimeUpdate",
      value: function onMediaElementTimeUpdate(event) {
        var maxViewed = this.model.get('_maxViewed');

        if (!maxViewed) {
          maxViewed = 0;
        }

        if (event.target.currentTime <= maxViewed) return;
        this.model.set('_maxViewed', event.target.currentTime);
      }
    }, {
      key: "setupPlayPauseToggle",
      value: function setupPlayPauseToggle() {
        var player = this.mediaElement.player;

        if (!player) {
          logging$1.warn('MediaView.setupPlayPauseToggle: OOPS! there is no player reference.');
          return;
        }

        player.options.clickToPlayPause = false;
        this.$('.mejs-overlay-button').on('click', this.onOverlayClick);
        this.$('.mejs-mediaelement').on('click', this.onMediaElementClick);
      }
    }, {
      key: "onMediaStop",
      value: function onMediaStop(view) {
        if ((view === null || view === void 0 ? void 0 : view.cid) === this.cid) return;
        if (!this.mediaElement || !this.mediaElement.player) return;
        this.mediaElement.player.pause();
      }
    }, {
      key: "onOverlayClick",
      value: function onOverlayClick() {
        var player = this.mediaElement.player;
        if (!player) return;
        player.play();
      }
    }, {
      key: "onMediaElementClick",
      value: function onMediaElementClick(event) {
        var player = this.mediaElement.player;
        if (!player) return;
        var isPaused = player.media.paused;
        if (!isPaused) player.pause();
      }
    }, {
      key: "remove",
      value: function remove() {
        this.$('.mejs-overlay-button').off('click', this.onOverlayClick);
        this.$('.mejs-mediaelement').off('click', this.onMediaElementClick);
        this.$('.mejs-container').off('inview', this.onWidgetInview);

        if (this.model.get('_useClosedCaptions')) {
          var selector = this.model.get('_playerOptions').toggleCaptionsButtonWhenOnlyOne ? '.mejs-captions-button button' : '.mejs-captions-selector';
          this.$(selector).off('click.mediaCaptionsChange');
        }

        var modelOptions = this.model.get('_playerOptions');
        delete modelOptions.success;
        var media = this.model.get('_media');

        if (media) {
          switch (media.type) {
            case 'video/vimeo':
              this.$('iframe')[0].isRemoved = true;
          }
        }

        if (this.mediaElement && this.mediaElement.player) {
          var playerId = this.mediaElement.player.id;
          purge(this.$el[0]);
          this.mediaElement.player.remove();

          if (window.mejs.players[playerId]) {
            delete window.mejs.players[playerId];
          }
        }

        if (this.mediaElement) {
          $(this.mediaElement).off({
            play: this.onMediaElementPlay,
            pause: this.onMediaElementPause,
            ended: this.onMediaElementEnded,
            seeking: this.onMediaElementSeeking,
            timeupdate: this.onMediaElementTimeUpdate
          });
          this.mediaElement.src = '';
          $(this.mediaElement.pluginElement).remove();
          delete this.mediaElement;
        }

        _get(_getPrototypeOf(MediaView.prototype), "remove", this).call(this);
      }
    }, {
      key: "onDeviceChanged",
      value: function onDeviceChanged() {
        if (!this.model.get('_media').source) return;
        this.$('.mejs-container').width(this.$('.component__widget').width());
      }
    }, {
      key: "onPlayerReady",
      value: function onPlayerReady(mediaElement, domObject) {
        this.mediaElement = mediaElement;
        var player = this.mediaElement.player;
        if (!player) player = window.mejs.players[this.$('.mejs-container').attr('id')];
        var hasTouch = window.mejs.MediaFeatures.hasTouch;

        if (hasTouch) {
          this.setupPlayPauseToggle();
        }

        this.addThirdPartyAfterFixes();
        this.cleanUpPlayerAfter();

        if (player && this.model.has('_startVolume')) {
          player.setVolume(parseInt(this.model.get('_startVolume')) / 100);
        }

        this.setReadyStatus();
        this.setupEventListeners();
      }
    }, {
      key: "addThirdPartyAfterFixes",
      value: function addThirdPartyAfterFixes() {
        var media = this.model.get('_media');

        switch (media.type) {
          case 'video/vimeo':
            this.$('.mejs-container').attr('tabindex', 0);
        }
      }
    }, {
      key: "cleanUpPlayerAfter",
      value: function cleanUpPlayerAfter() {
        this.$("[aria-valuemax='NaN']").attr('aria-valuemax', 0);
      }
    }, {
      key: "onScreenSizeChanged",
      value: function onScreenSizeChanged() {
        this.$('audio, video').width(this.$('.component__widget').width());
      }
    }, {
      key: "onSkipToTranscript",
      value: function onSkipToTranscript() {
        var _this3 = this;

        _.delay(function () {
          a11y$1.focus(_this3.$('.media__transcript-btn'));
        }, 250);
      }
    }, {
      key: "onToggleInlineTranscript",
      value: function onToggleInlineTranscript(event) {
        if (event) event.preventDefault();
        var $transcriptBodyContainer = this.$('.media__transcript-body-inline');
        var $button = this.$('.media__transcript-btn-inline');
        var $buttonText = this.$('.media__transcript-btn-inline .media__transcript-btn-text');

        if ($transcriptBodyContainer.hasClass('inline-transcript-open')) {
          $transcriptBodyContainer.stop(true, true).slideUp(function () {
            $(window).resize();
          }).removeClass('inline-transcript-open');
          $button.attr('aria-expanded', false);
          $buttonText.html(this.model.get('_transcript').inlineTranscriptButton);
          return;
        }

        $transcriptBodyContainer.stop(true, true).slideDown(function () {
          $(window).resize();
        }).addClass('inline-transcript-open');
        $button.attr('aria-expanded', true);
        $buttonText.html(this.model.get('_transcript').inlineTranscriptCloseButton);

        if (this.model.get('_transcript')._setCompletionOnView !== false) {
          this.setCompletionStatus();
        }
      }
    }, {
      key: "onExternalTranscriptClicked",
      value: function onExternalTranscriptClicked(event) {
        if (this.model.get('_transcript')._setCompletionOnView === false) return;
        this.setCompletionStatus();
      }
    }, {
      key: "queueGlobalEvent",
      value: function queueGlobalEvent(eventType) {
        var time = Date.now();
        var lastEvent = this.lastEvent || {
          time: 0
        };
        var timeSinceLastEvent = time - lastEvent.time;
        var debounceTime = 500;
        this.lastEvent = {
          time: time,
          type: eventType
        };
        clearTimeout(this.eventTimeout);

        if (eventType === 'ended') {
          return this.triggerGlobalEvent(eventType);
        }

        if (timeSinceLastEvent <= debounceTime) return;
        this.eventTimeout = setTimeout(this.triggerGlobalEvent.bind(this, eventType), debounceTime);
      }
    }, {
      key: "triggerGlobalEvent",
      value: function triggerGlobalEvent(eventType) {
        var player = this.mediaElement.player;
        var eventObj = {
          type: eventType,
          src: this.mediaElement.src,
          platform: this.mediaElement.pluginType
        };
        if (player) eventObj.isVideo = player.isVideo;
        Adapt$1.trigger('media', eventObj);
      }
    }]);

    return MediaView;
  }(ComponentView$1);

  MediaView.froogaloopAdded = false;
  var MediaView$1 = __AMD("components/adapt-contrib-media/js/mediaView", MediaView);

  __AMD("components/adapt-contrib-media/js/adapt-contrib-media", components$1.register('media', {
    model: ComponentModel$1.extend({}),
    view: MediaView$1
  }));

  var NarrativeModel = __AMD("components/adapt-contrib-narrative/js/NarrativeModel", function (_ItemsComponentModel) {
    _inherits(NarrativeModel, _ItemsComponentModel);

    var _super = _createSuper(NarrativeModel);

    function NarrativeModel() {
      _classCallCheck(this, NarrativeModel);

      return _super.apply(this, arguments);
    }

    return _createClass(NarrativeModel);
  }(ItemsComponentModel));

  var MODE = __AMD("components/adapt-contrib-narrative/js/modeEnum", new ENUM(['SMALL', 'LARGE']));

  var NarrativeView = function (_ComponentView) {
    _inherits(NarrativeView, _ComponentView);

    var _super = _createSuper(NarrativeView);

    function NarrativeView() {
      _classCallCheck(this, NarrativeView);

      return _super.apply(this, arguments);
    }

    _createClass(NarrativeView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-narrative-strapline-open-popup': 'openPopup',
          'click .js-narrative-controls-click': 'onNavigationClicked',
          'click .js-narrative-progress-click': 'onProgressClicked',
          'swipeleft .js-narrative-swipe': 'onSwipeLeft',
          'swiperight .js-narrative-swipe': 'onSwipeRight'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        var _get2;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_get2 = _get(_getPrototypeOf(NarrativeView.prototype), "initialize", this)).call.apply(_get2, [this].concat(args));

        this._isInitial = true;
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.listenTo(Adapt$1, {
          'device:changed device:resize': this.reRender,
          'notify:closed': this.closeNotify
        });
        this.renderMode();
        this.listenTo(this.model.getChildren(), {
          'change:_isActive': this.onItemsActiveChange,
          'change:_isVisited': this.onItemsVisitedChange
        });
        this.calculateWidths();
      }
    }, {
      key: "onItemsActiveChange",
      value: function onItemsActiveChange(item, _isActive) {
        if (!_isActive) return;

        if (this.isTextBelowImage()) {
          item.toggleVisited(true);
        }

        this.setStage(item);
        this.setFocus(item.get('_index'));
      }
    }, {
      key: "setFocus",
      value: function setFocus(itemIndex) {
        var _this = this;

        if (this._isInitial) return;
        var $straplineHeaderElm = this.$('.narrative__strapline-header-inner');
        var hasStraplineTransition = !this.isLargeMode() && $straplineHeaderElm.css('transitionDuration') !== '0s';

        if (hasStraplineTransition) {
          $straplineHeaderElm.one('transitionend', function () {
            _this.focusOnNarrativeElement(itemIndex);
          });
          return;
        }

        this.focusOnNarrativeElement(itemIndex);
      }
    }, {
      key: "focusOnNarrativeElement",
      value: function focusOnNarrativeElement(itemIndex) {
        var dataIndexAttr = "[data-index='".concat(itemIndex, "']");
        var $elementToFocus = this.isLargeMode() ? this.$(".narrative__content-item".concat(dataIndexAttr)) : this.$(".narrative__strapline-btn".concat(dataIndexAttr));
        a11y$1.focusFirst($elementToFocus);
      }
    }, {
      key: "onItemsVisitedChange",
      value: function onItemsVisitedChange(item, _isVisited) {
        if (!_isVisited) return;
        this.$("[data-index=\"".concat(item.get('_index'), "\"]")).addClass('is-visited');
      }
    }, {
      key: "calculateMode",
      value: function calculateMode() {
        var mode = device$1.screenSize === 'large' ? MODE.LARGE : MODE.SMALL;
        this.model.set('_mode', mode);
      }
    }, {
      key: "renderMode",
      value: function renderMode() {
        this.calculateMode();
        var isLargeMode = this.isLargeMode();
        var isTextBelowImage = this.isTextBelowImage();
        this.$el.toggleClass('mode-large', isLargeMode).toggleClass('mode-small', !isLargeMode).toggleClass('items-are-full-width', isTextBelowImage);
      }
    }, {
      key: "isLargeMode",
      value: function isLargeMode() {
        return this.model.get('_mode') === MODE.LARGE;
      }
    }, {
      key: "isTextBelowImage",
      value: function isTextBelowImage() {
        var isTextBelowImage = device$1.screenSize === 'large' ? this.model.get('_isTextBelowImage') : this.model.get('_isMobileTextBelowImage');
        return Boolean(isTextBelowImage);
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.renderMode();
        this.setupNarrative();
        this.$('.narrative__slider').imageready(this.setReadyStatus.bind(this));

        if (Adapt$1.config.get('_disableAnimation')) {
          this.$el.addClass('disable-animation');
        }
      }
    }, {
      key: "setupNarrative",
      value: function setupNarrative() {
        this.renderMode();
        var items = this.model.getChildren();
        if (!items || !items.length) return;
        var activeItem = this.model.getActiveItem();

        if (!activeItem) {
          activeItem = this.model.getItem(0);
          activeItem.toggleActive(true);
        } else {
          items.trigger('change:_isActive', activeItem, true);
        }

        this.calculateWidths();

        if (!this.isLargeMode() && !this.model.get('_wasHotgraphic')) {
          this.replaceInstructions();
        }

        this.setupEventListeners();
        this._isInitial = false;
      }
    }, {
      key: "calculateWidths",
      value: function calculateWidths() {
        var itemCount = this.model.getChildren().length;
        this.model.set({
          _totalWidth: 100 * itemCount,
          _itemWidth: 100 / itemCount
        });
      }
    }, {
      key: "resizeControl",
      value: function resizeControl() {
        var previousMode = this.model.get('_mode');
        this.renderMode();
        if (previousMode !== this.model.get('_mode')) this.replaceInstructions();
        this.evaluateNavigation();
        var activeItem = this.model.getActiveItem();
        if (activeItem) this.setStage(activeItem);
      }
    }, {
      key: "reRender",
      value: function reRender() {
        if (this.model.get('_wasHotgraphic') && this.isLargeMode()) {
          this.replaceWithHotgraphic();
          return;
        }

        this.resizeControl();
      }
    }, {
      key: "closeNotify",
      value: function closeNotify() {
        this.evaluateCompletion();
      }
    }, {
      key: "replaceInstructions",
      value: function replaceInstructions() {
        if (this.isLargeMode()) {
          this.$('.narrative__instruction-inner').html(this.model.get('instruction'));
          return;
        }

        if (this.model.get('mobileInstruction') && !this.model.get('_wasHotgraphic')) {
          this.$('.narrative__instruction-inner').html(this.model.get('mobileInstruction'));
        }
      }
    }, {
      key: "replaceWithHotgraphic",
      value: function replaceWithHotgraphic() {
        var HotgraphicView = Adapt$1.getViewClass('hotgraphic');
        if (!HotgraphicView) return;
        var model = this.prepareHotgraphicModel();
        var newHotgraphic = new HotgraphicView({
          model: model
        });
        this.$el.parents('.component__container').append(newHotgraphic.$el);
        this.remove();

        _.defer(function () {
          Adapt$1.trigger('device:resize');
        });
      }
    }, {
      key: "prepareHotgraphicModel",
      value: function prepareHotgraphicModel() {
        var model = this.model;
        model.resetActiveItems();
        model.set({
          _isPopupOpen: false,
          _component: 'hotgraphic',
          body: model.get('originalBody'),
          instruction: model.get('originalInstruction')
        });
        return model;
      }
    }, {
      key: "moveSliderToIndex",
      value: function moveSliderToIndex(itemIndex) {
        var offset = this.model.get('_itemWidth') * itemIndex;

        if (Adapt$1.config.get('_defaultDirection') === 'ltr') {
          offset *= -1;
        }

        var cssValue = "translateX(".concat(offset, "%)");
        var $sliderElm = this.$('.narrative__slider');
        var $straplineHeaderElm = this.$('.narrative__strapline-header-inner');
        $sliderElm.css('transform', cssValue);
        $straplineHeaderElm.css('transform', cssValue);
      }
    }, {
      key: "setStage",
      value: function setStage(item) {
        var index = item.get('_index');
        var indexSelector = "[data-index=\"".concat(index, "\"]");

        if (this.isLargeMode()) {
          item.toggleVisited(true);
        }

        this.$('.narrative__progress').removeClass('is-selected').filter(indexSelector).addClass('is-selected');
        var $slideGraphics = this.$('.narrative__slider-image-container');
        a11y$1.toggleAccessibleEnabled($slideGraphics, false);
        a11y$1.toggleAccessibleEnabled($slideGraphics.filter(indexSelector), true);
        var $narrativeItems = this.$('.narrative__content-item');
        $narrativeItems.addClass('u-visibility-hidden u-display-none');
        a11y$1.toggleAccessible($narrativeItems, false);
        a11y$1.toggleAccessible($narrativeItems.filter(indexSelector).removeClass('u-visibility-hidden u-display-none'), true);
        var $narrativeStraplineButtons = this.$('.narrative__strapline-btn');
        a11y$1.toggleAccessibleEnabled($narrativeStraplineButtons, false);
        a11y$1.toggleAccessibleEnabled($narrativeStraplineButtons.filter(indexSelector), true);
        this.evaluateNavigation();
        this.evaluateCompletion();
        this.shouldShowInstructionError();
        this.moveSliderToIndex(index);
      }
    }, {
      key: "evaluateNavigation",
      value: function evaluateNavigation() {
        var active = this.model.getActiveItem();
        if (!active) return;
        var index = active.get('_index');
        var itemCount = this.model.getChildren().length;
        var isAtStart = index === 0;
        var isAtEnd = index === itemCount - 1;
        var $left = this.$('.narrative__controls-left');
        var $right = this.$('.narrative__controls-right');
        var globals = Adapt$1.course.get('_globals');
        var ariaLabelsGlobals = globals._accessibility._ariaLabels;
        var narrativeGlobals = globals._components._narrative;
        var ariaLabelPrevious = narrativeGlobals.previous || ariaLabelsGlobals.previous;
        var ariaLabelNext = narrativeGlobals.next || ariaLabelsGlobals.next;
        var prevTitle = isAtStart ? '' : this.model.getItem(index - 1).get('title');
        var nextTitle = isAtEnd ? '' : this.model.getItem(index + 1).get('title');
        $left.toggleClass('u-visibility-hidden', isAtStart);
        $right.toggleClass('u-visibility-hidden', isAtEnd);
        $left.attr('aria-label', Handlebars.helpers.compile_a11y_normalize(ariaLabelPrevious, {
          title: prevTitle,
          _globals: globals,
          itemNumber: isAtStart ? null : index,
          totalItems: itemCount
        }));
        $right.attr('aria-label', Handlebars.helpers.compile_a11y_normalize(ariaLabelNext, {
          title: nextTitle,
          _globals: globals,
          itemNumber: isAtEnd ? null : index + 2,
          totalItems: itemCount
        }));
      }
    }, {
      key: "evaluateCompletion",
      value: function evaluateCompletion() {
        if (this.model.areAllItemsCompleted()) {
          this.trigger('allItems');
          this.$('.narrative__instruction-inner').removeClass('instruction-error');
        }
      }
    }, {
      key: "openPopup",
      value: function openPopup() {
        var currentItem = this.model.getActiveItem();
        Adapt$1.notify.popup({
          title: currentItem.get('title'),
          body: currentItem.get('body')
        });
        Adapt$1.on('popup:opened', function () {
          currentItem.toggleVisited(true);
        });
      }
    }, {
      key: "onNavigationClicked",
      value: function onNavigationClicked(event) {
        var $btn = $(event.currentTarget);
        var index = this.model.getActiveItem().get('_index');
        $btn.data('direction') === 'right' ? index++ : index--;
        this.model.setActiveItem(index);
      }
    }, {
      key: "onSwipeLeft",
      value: function onSwipeLeft() {
        var index = this.model.getActiveItem().get('_index');
        this.model.setActiveItem(++index);
      }
    }, {
      key: "onSwipeRight",
      value: function onSwipeRight() {
        var index = this.model.getActiveItem().get('_index');
        this.model.setActiveItem(--index);
      }
    }, {
      key: "onProgressClicked",
      value: function onProgressClicked(event) {
        var index = $(event.target).data('index');
        this.model.setActiveItem(index);
      }
    }, {
      key: "shouldShowInstructionError",
      value: function shouldShowInstructionError() {
        var prevItemIndex = this.model.getActiveItem().get('_index') - 1;
        if (prevItemIndex < 0 || this.model.getItem(prevItemIndex).get('_isVisited')) return;
        this.$('.narrative__instruction-inner').addClass('instruction-error');
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        if (this.model.get('_setCompletionOn') === 'inview') {
          this.setupInviewCompletion('.component__widget');
        }
      }
    }]);

    return NarrativeView;
  }(ComponentView$1);

  NarrativeView.template = 'narrative';
  var NarrativeView$1 = __AMD("components/adapt-contrib-narrative/js/NarrativeView", NarrativeView);

  __AMD("components/adapt-contrib-narrative/js/adapt-contrib-narrative", Adapt$1.register('narrative', {
    model: NarrativeModel,
    view: NarrativeView$1
  }));

  var ResponsiveIframe = function (_ComponentView) {
    _inherits(ResponsiveIframe, _ComponentView);

    var _super = _createSuper(ResponsiveIframe);

    function ResponsiveIframe() {
      _classCallCheck(this, ResponsiveIframe);

      return _super.apply(this, arguments);
    }

    _createClass(ResponsiveIframe, [{
      key: "events",
      value: function events() {
        return {
          'inview': 'inview'
        };
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.listenTo(Adapt$1, 'device:changed', this.resizeControl);
        this.checkIfResetOnRevisit();
        var iframeTitle = this.model.get('displayTitle') || this.model.get('title');
        this.model.set("iframeTitle", iframeTitle);
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        var isResetOnRevisit = this.model.get('_isResetOnRevisit');

        if (isResetOnRevisit) {
          this.model.reset(isResetOnRevisit);
        }
      }
    }, {
      key: "postRender",
      value: function postRender() {
        var _this = this;

        this.$('.responsiveiframe__iframe').ready(function () {
          _this.resizeControl(Adapt$1.device.screenSize);

          _this.setReadyStatus();
        });
      }
    }, {
      key: "inview",
      value: function inview(event, visible) {
        if (visible) {
          this.setCompletionStatus();
        }
      }
    }, {
      key: "resizeControl",
      value: function resizeControl(size) {
        var width = this.$('.responsiveiframe__iframe').attr('data-width-' + size);
        var height = this.$('.responsiveiframe__iframe').attr('data-height-' + size);
        this.$('.responsiveiframe__iframe').width(width);
        this.$('.responsiveiframe__iframe').height(height);
      }
    }]);

    return ResponsiveIframe;
  }(ComponentView$1);
  Adapt$1.register("responsiveIframe", ResponsiveIframe);

  var SliderView = __AMD("components/adapt-contrib-slider/js/sliderView", function (_QuestionView) {
    _inherits(SliderView, _QuestionView);

    var _super = _createSuper(SliderView);

    function SliderView() {
      _classCallCheck(this, SliderView);

      return _super.apply(this, arguments);
    }

    _createClass(SliderView, [{
      key: "events",
      value: function events() {
        return {
          'click .js-slider-number-click': 'onNumberSelected',
          'focus .js-slider-item-input': 'onHandleFocus',
          'blur .js-slider-item-input': 'onHandleBlur'
        };
      }
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {
        if (this.model.get('_isSubmitted')) return;
        this.selectItem(this.getIndexFromValue(this.model.get('_selectedItem').value));
      }
    }, {
      key: "setupRangeslider",
      value: function setupRangeslider() {
        this.$sliderScaleMarker = this.$('.js-slider-number-selection');
        this.$slider = this.$('.js-slider-item-input');

        if (this.model.has('_scaleStep')) {
          this.$slider.attr({
            step: this.model.get('_scaleStep')
          });
        }

        this.$slider.rangeslider({
          polyfill: false,
          onSlide: this.handleSlide.bind(this)
        });
        this.oldValue = 0;

        if (this._deferEnable) {
          this.setAllItemsEnabled();
        }
      }
    }, {
      key: "handleSlide",
      value: function handleSlide(position, value) {
        if (this.oldValue === value) {
          return;
        }

        var itemIndex = this.getIndexFromValue(value);
        var pixels = this.mapIndexToPixels(itemIndex);
        this.selectItem(itemIndex);
        this.animateToPosition(pixels);
        this.oldValue = value;
      }
    }, {
      key: "disableQuestion",
      value: function disableQuestion() {
        this.setAllItemsEnabled();
      }
    }, {
      key: "enableQuestion",
      value: function enableQuestion() {
        this.setAllItemsEnabled();
      }
    }, {
      key: "setAllItemsEnabled",
      value: function setAllItemsEnabled() {
        var isEnabled = this.model.get('_isEnabled');

        if (!this.$slider) {
          this._deferEnable = true;
          return;
        }

        this.$('.slider__widget').toggleClass('is-disabled', !isEnabled);
        this.$slider.prop('disabled', !isEnabled).rangeslider('update', true);
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        this.setupRangeslider();
        this.setScalePositions();
        this.onScreenSizeChanged();
        this.showScaleMarker(true);
        this.listenTo(Adapt$1, 'device:resize', this.onScreenSizeChanged);
        this.setReadyStatus();
      }
    }, {
      key: "animateToPosition",
      value: function animateToPosition(newPosition) {
        if (!this.$sliderScaleMarker) return;
        this.$sliderScaleMarker.velocity('stop').velocity({
          left: newPosition
        }, {
          duration: 200,
          easing: 'linear',
          mobileHA: false
        });
      }
    }, {
      key: "getIndexFromValue",
      value: function getIndexFromValue(itemValue) {
        var scaleStart = this.model.get('_scaleStart');
        var scaleEnd = this.model.get('_scaleEnd');
        return Math.round(this.mapValue(itemValue, scaleStart, scaleEnd, 0, this.model.get('_items').length - 1));
      }
    }, {
      key: "mapIndexToPixels",
      value: function mapIndexToPixels(value, $widthObject) {
        var numberOfItems = this.model.get('_items').length;
        var width = $widthObject ? $widthObject.width() : this.$('.js-slider-scale').width();
        return Math.round(this.mapValue(value, 0, numberOfItems - 1, 0, width));
      }
    }, {
      key: "mapPixelsToIndex",
      value: function mapPixelsToIndex(value) {
        var numberOfItems = this.model.get('_items').length;
        var width = this.$('.slider-sliderange').width();
        return Math.round(this.mapValue(value, 0, width, 0, numberOfItems - 1));
      }
    }, {
      key: "normalise",
      value: function normalise(value, low, high) {
        var range = high - low;
        return (value - low) / range;
      }
    }, {
      key: "mapValue",
      value: function mapValue(value, inputLow, inputHigh, outputLow, outputHigh) {
        var normal = this.normalise(value, inputLow, inputHigh);
        return normal * (outputHigh - outputLow) + outputLow;
      }
    }, {
      key: "onHandleFocus",
      value: function onHandleFocus(event) {
        event.preventDefault();
        this.$slider.on('keydown', this.onKeyDown.bind(this));
      }
    }, {
      key: "onHandleBlur",
      value: function onHandleBlur(event) {
        event.preventDefault();
        this.$slider.off('keydown');
      }
    }, {
      key: "onKeyDown",
      value: function onKeyDown(event) {
        if (event.which === 9) return;
        event.preventDefault();
        var newItemIndex = this.getIndexFromValue(this.model.get('_selectedItem').value);

        switch (event.which) {
          case 40:
          case 37:
            newItemIndex = Math.max(newItemIndex - 1, 0);
            break;

          case 38:
          case 39:
            newItemIndex = Math.min(newItemIndex + 1, this.model.get('_items').length - 1);
            break;
        }

        this.selectItem(newItemIndex);
        if (typeof newItemIndex === 'number') this.showScaleMarker(true);
        this.animateToPosition(this.mapIndexToPixels(newItemIndex));
        this.setSliderValue(this.getValueFromIndex(newItemIndex));
      }
    }, {
      key: "onNumberSelected",
      value: function onNumberSelected(event) {
        event.preventDefault();

        if (this.model.get('_isInteractionComplete')) {
          return;
        }

        if (this.$slider.prop('disabled')) {
          return;
        }

        var itemValue = parseFloat($(event.currentTarget).attr('data-id'));
        var index = this.getIndexFromValue(itemValue);
        this.selectItem(index);
        this.animateToPosition(this.mapIndexToPixels(index));
        this.setSliderValue(itemValue);
      }
    }, {
      key: "getValueFromIndex",
      value: function getValueFromIndex(index) {
        return this.model.get('_items')[index].value;
      }
    }, {
      key: "resetControlStyles",
      value: function resetControlStyles() {
        this.$('.slider-handle').empty();
        this.showScaleMarker(false);
        this.$('.slider-bar').animate({
          width: '0'
        });
        this.setSliderValue(this.model.get('_items')[0].value);
      }
    }, {
      key: "onCannotSubmit",
      value: function onCannotSubmit() {}
    }, {
      key: "setSliderValue",
      value: function setSliderValue(value) {
        if (!this.$slider) return;
        this.$slider.val(value).change();
      }
    }, {
      key: "showMarking",
      value: function showMarking() {
        if (!this.model.get('_canShowMarking')) return;
        this.$('.slider__widget').removeClass('is-correct is-incorrect').addClass(this.model.get('_selectedItem').correct ? 'is-correct' : 'is-incorrect');
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {
        this.selectItem(0);
        this.animateToPosition(0);
        this.resetControlStyles();
        this.showScaleMarker(true);
      }
    }, {
      key: "setScalePositions",
      value: function setScalePositions() {
        var _this = this;

        var numberOfItems = this.model.get('_items').length;
        this.model.get('_items').forEach(function (item, index) {
          var normalisedPosition = _this.normalise(index, 0, numberOfItems - 1);

          _this.$('.js-slider-number').eq(index).data('normalisedPosition', normalisedPosition);
        });
      }
    }, {
      key: "showScale",
      value: function showScale() {
        var $markers = this.$('.js-slider-scale-notch-container').empty();

        if (this.model.get('_showScale') === false) {
          $markers.eq(0).addClass('u-display-none');
          this.$('.js-slider-number').addClass(this.model.get('_showScaleIndicator') ? 'u-visibility-hidden' : 'u-display-none');
          return;
        }

        var $scaler = this.$('.js-slider-scale');

        for (var i = 1, count = this.model.get('_items').length - 1; i < count; i++) {
          $markers.append("<div class=\"slider__scale-notch\" style=\"left: ".concat(this.mapIndexToPixels(i, $scaler), "px\">"));
        }

        this.showScaleNumbers();
      }
    }, {
      key: "showScaleNumbers",
      value: function showScaleNumbers() {
        var $scaler = this.$('.js-slider-scale');
        var $numbers = this.$('.js-slider-number');

        if (this.model.get('_showScaleNumbers') === false) {
          $numbers.addClass('u-display-none');
          return;
        }

        var scaleWidth = $scaler.width();
        this.model.get('_items').forEach(function (item, index) {
          var $number = $numbers.eq(index);
          var newLeft = Math.round($number.data('normalisedPosition') * scaleWidth);
          $number.css({
            left: newLeft
          });
        });
      }
    }, {
      key: "showLabels",
      value: function showLabels() {
        if (this.model.get('labelStart') || this.model.get('labelEnd')) return;
        this.$('.js-slider-label-container').eq(0).addClass('u-display-none');
      }
    }, {
      key: "remapSliderBar",
      value: function remapSliderBar() {
        var $scaler = this.$('.js-slider-scale');
        var currentIndex = this.getIndexFromValue(this.model.get('_selectedItem').value);
        var left = this.mapIndexToPixels(currentIndex, $scaler);
        this.$('.slider-handle').css({
          left: "".concat(left, "px")
        });
        this.$('.js-slider-number-selection').css({
          left: "".concat(left, "px")
        });
        this.$('.slider-bar').width(left);
      }
    }, {
      key: "onScreenSizeChanged",
      value: function onScreenSizeChanged() {
        this.showScale();
        this.showLabels();
        this.remapSliderBar();

        if (this.$('.slider__widget').hasClass('show-user-answer')) {
          this.hideCorrectAnswer();
        } else if (this.$('.slider__widget').hasClass('show-correct-answer')) {
          this.showCorrectAnswer();
        }
      }
    }, {
      key: "showCorrectAnswer",
      value: function showCorrectAnswer() {
        this.showScaleMarker(false);
        var answers = this.model.getCorrectAnswers();

        if (answers.length === 0) {
          console.log('adapt-contrib-slider::WARNING: no correct answer or correct range set in JSON');
          return;
        }

        var middleAnswer = answers[Math.floor(answers.length / 2)];
        this.animateToPosition(this.mapIndexToPixels(this.getIndexFromValue(middleAnswer)));
        this.showModelAnswers(answers);
        this.setSliderValue(middleAnswer);
      }
    }, {
      key: "showModelAnswers",
      value: function showModelAnswers(correctAnswerArray) {
        var _this2 = this;

        var $parentDiv = this.$('.js-slider-model-range');
        correctAnswerArray.forEach(function (correctAnswer, index) {
          $parentDiv.append($('<div class="slider__number-model-answer">'));

          var $element = _this2.$('.js-slider-model-range .slider__number-model-answer').eq(index);

          var startingLeft = _this2.mapIndexToPixels(_this2.getIndexFromValue(_this2.model.get('_selectedItem').value));

          if (_this2.model.get('_showNumber')) $element.html(correctAnswer);
          $element.css({
            left: startingLeft
          }).fadeIn(0, function () {
            $element.animate({
              left: _this2.mapIndexToPixels(_this2.getIndexFromValue(correctAnswer))
            });
          });
        });
      }
    }, {
      key: "hideCorrectAnswer",
      value: function hideCorrectAnswer() {
        var userAnswerIndex = this.getIndexFromValue(this.model.get('_userAnswer'));
        this.$('.js-slider-model-range').empty();
        this.showScaleMarker(true);
        this.selectItem(userAnswerIndex);
        this.animateToPosition(this.mapIndexToPixels(userAnswerIndex));
        this.setSliderValue(this.model.get('_userAnswer'));
      }
    }, {
      key: "selectItem",
      value: function selectItem(itemIndex) {
        this.model.deselectAllItems();
        var item = this.model.get('_items')[itemIndex];
        if (!item) return;
        item.selected = true;
        this.model.set('_selectedItem', item);
        this.$('.js-slider-item-input').attr({
          value: item.value,
          'aria-valuenow': item.value
        });
        this.showNumber(true);
      }
    }, {
      key: "showScaleMarker",
      value: function showScaleMarker(show) {
        var $scaleMarker = this.$('.js-slider-number-selection');

        if (this.model.get('_showScaleIndicator')) {
          this.showNumber(show);
          $scaleMarker.toggleClass('display-block', show);
        }
      }
    }, {
      key: "showNumber",
      value: function showNumber(show) {
        var $scaleMarker = this.$('.js-slider-number-selection');

        if (this.model.get('_showNumber')) {
          if (show) {
            $scaleMarker.html(this.model.get('_selectedItem').value);
          } else {
            $scaleMarker.html = '';
          }
        }
      }
    }]);

    return SliderView;
  }(QuestionView$1));

  var SliderModel = __AMD("components/adapt-contrib-slider/js/sliderModel", function (_QuestionModel) {
    _inherits(SliderModel, _QuestionModel);

    var _super = _createSuper(SliderModel);

    function SliderModel() {
      _classCallCheck(this, SliderModel);

      return _super.apply(this, arguments);
    }

    _createClass(SliderModel, [{
      key: "init",
      value: function init() {
        QuestionModel$1.prototype.init.call(this);
        this.setupModelItems();
        this.selectDefaultItem();
      }
    }, {
      key: "reset",
      value: function reset() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hard';
        var canReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.get('_canReset');

        var wasReset = _get(_getPrototypeOf(SliderModel.prototype), "reset", this).call(this, type, canReset);

        if (!wasReset) return false;
        this.deselectAllItems();
        this.selectDefaultItem();
        return true;
      }
    }, {
      key: "selectDefaultItem",
      value: function selectDefaultItem() {
        this.set('_selectedItem', this.get('_items')[0]);
      }
    }, {
      key: "getDecimalPlaces",
      value: function getDecimalPlaces(num) {
        return (num.toString().split('.')[1] || []).length;
      }
    }, {
      key: "setupModelItems",
      value: function setupModelItems() {
        var items = [];
        var answer = this.get('_correctAnswer');
        var range = this.get('_correctRange');
        var start = this.get('_scaleStart');
        var end = this.get('_scaleEnd');
        var step = this.get('_scaleStep') || 1;
        var dp = this.getDecimalPlaces(step);

        for (var i = start; i <= end; i += step) {
          if (dp !== 0) {
            i = parseFloat(i.toFixed(dp));
          }

          items.push({
            value: i,
            selected: false,
            correct: answer ? i === Number(answer) : i >= range._bottom && i <= range._top
          });
        }

        this.set({
          _items: items,
          _marginDir: Adapt$1.config.get('_defaultDirection') === 'rtl' ? 'right' : 'left'
        });
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        return true;
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {
        if (!this.get('_isSubmitted')) {
          this.set({
            _userAnswer: undefined
          });
          this.selectDefaultItem();
          return;
        }

        var items = this.get('_items');
        var userAnswer = this.get('_userAnswer');
        var selectedItem = items.find(function (_ref) {
          var value = _ref.value;
          return value === userAnswer;
        });

        if (selectedItem) {
          selectedItem.selected = true;
          this.set('_selectedItem', selectedItem);
        }

        this.setQuestionAsSubmitted();
        this.markQuestion();
        this.setScore();
        this.setupFeedback();
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        this.set('_userAnswer', this.get('_selectedItem').value);
      }
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        this.set({
          _isAtLeastOneCorrectSelection: false,
          _userAnswer: undefined
        });
        this.selectDefaultItem();
      }
    }, {
      key: "deselectAllItems",
      value: function deselectAllItems() {
        this.get('_items').forEach(function (item) {
          return item.selected = false;
        });
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        var numberOfCorrectAnswers = this.get('_items').filter(function (_ref2) {
          var selected = _ref2.selected,
              correct = _ref2.correct;
          return selected && correct;
        }).length;
        this.set('_isAtLeastOneCorrectSelection', numberOfCorrectAnswers > 0);
        this.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);
        return this.get('_isAtLeastOneCorrectSelection');
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        return this.get('_isAtLeastOneCorrectSelection');
      }
    }, {
      key: "setScore",
      value: function setScore() {
        var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');
        var questionWeight = this.get('_questionWeight');
        var score = questionWeight * numberOfCorrectAnswers;
        this.set('_score', score);
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        return this.get('_userAnswer').toString();
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        return 'numeric';
      }
    }, {
      key: "getCorrectAnswers",
      value: function getCorrectAnswers() {
        var answerSingle = this.get('_correctAnswer');
        var answers = [];

        if (answerSingle) {
          return [answerSingle];
        }

        var answerMultiple = this.get('_correctRange');

        if (!answerMultiple) {
          return answers;
        }

        var bottom = answerMultiple._bottom;
        var top = answerMultiple._top;

        if (bottom === undefined || top === undefined) {
          return answers;
        }

        var answer = bottom;
        var step = this.get('_scaleStep') || 1;

        while (answer <= top) {
          answers.push(answer);
          answer += step;
        }

        return answers;
      }
    }, {
      key: "getCorrectAnswerAsText",
      value: function getCorrectAnswerAsText() {
        var globals = Adapt$1.course.get('_globals')._components._slider;

        var answers = this.getCorrectAnswers();

        if (answers.length > 1) {
          return Handlebars.compile(globals.ariaCorrectAnswerRange)({
            bottom: answers.shift(),
            top: answers.pop()
          });
        }

        return Handlebars.compile(globals.ariaCorrectAnswer)({
          correctAnswer: answers[0]
        });
      }
    }, {
      key: "getUserAnswerAsText",
      value: function getUserAnswerAsText() {
        var answerTemplate = Adapt$1.course.get('_globals')._components._slider.ariaUserAnswer;

        return Handlebars.compile(answerTemplate)({
          userAnswer: this.get('_userAnswer')
        });
      }
    }]);

    return SliderModel;
  }(QuestionModel$1));

  __AMD("components/adapt-contrib-slider/js/adapt-contrib-slider", components$1.register('slider', {
    view: SliderView,
    model: SliderModel
  }));

  var TextView = function (_ComponentView) {
    _inherits(TextView, _ComponentView);

    var _super = _createSuper(TextView);

    function TextView() {
      _classCallCheck(this, TextView);

      return _super.apply(this, arguments);
    }

    _createClass(TextView, [{
      key: "postRender",
      value: function postRender() {
        this.setReadyStatus();
        this.setupInview();
      }
    }, {
      key: "setupInview",
      value: function setupInview() {
        var selector = this.getInviewElementSelector();
        if (!selector) return this.setCompletionStatus();
        this.setupInviewCompletion(selector);
      }
    }, {
      key: "getInviewElementSelector",
      value: function getInviewElementSelector() {
        if (this.model.get('body')) return '.component__body';
        if (this.model.get('instruction')) return '.component__instruction';
        if (this.model.get('displayTitle')) return '.component__title';
        return null;
      }
    }]);

    return TextView;
  }(ComponentView$1);

  TextView.template = 'text.jsx';
  var TextView$1 = __AMD("components/adapt-contrib-text/js/TextView", TextView);

  var TextModel = __AMD("components/adapt-contrib-text/js/TextModel", function (_ComponentModel) {
    _inherits(TextModel, _ComponentModel);

    var _super = _createSuper(TextModel);

    function TextModel() {
      _classCallCheck(this, TextModel);

      return _super.apply(this, arguments);
    }

    return _createClass(TextModel);
  }(ComponentModel$1));

  __AMD("components/adapt-contrib-text/js/adapt-contrib-text", components$1.register('text', {
    model: TextModel,
    view: TextView$1
  }));

  var TextInputView = function (_QuestionView) {
    _inherits(TextInputView, _QuestionView);

    var _super = _createSuper(TextInputView);

    function TextInputView() {
      _classCallCheck(this, TextInputView);

      return _super.apply(this, arguments);
    }

    _createClass(TextInputView, [{
      key: "events",
      value: function events() {
        return {
          'focus .js-textinput-textbox': 'clearValidationError',
          'change .js-textinput-textbox': 'onInputChanged',
          'keyup .js-textinput-textbox': 'onInputChanged'
        };
      }
    }, {
      key: "setupQuestion",
      value: function setupQuestion() {
        this.model.setupRandomisation();
      }
    }, {
      key: "disableQuestion",
      value: function disableQuestion() {
        this.setAllItemsEnabled(false);
      }
    }, {
      key: "enableQuestion",
      value: function enableQuestion() {
        this.setAllItemsEnabled(true);
      }
    }, {
      key: "setAllItemsEnabled",
      value: function setAllItemsEnabled(isEnabled) {
        var _this = this;

        this.model.get('_items').forEach(function (item, index) {
          var $itemInput = _this.$('.js-textinput-textbox').eq(index);

          $itemInput.prop('disabled', !isEnabled);
        });
      }
    }, {
      key: "onQuestionRendered",
      value: function onQuestionRendered() {
        this.setReadyStatus();
      }
    }, {
      key: "clearValidationError",
      value: function clearValidationError() {
        this.$('.js-textinput-textbox').removeClass('has-error');
      }
    }, {
      key: "onCannotSubmit",
      value: function onCannotSubmit() {
        this.showValidationError();
      }
    }, {
      key: "showValidationError",
      value: function showValidationError() {
        this.$('.js-textinput-textbox').addClass('has-error');
      }
    }, {
      key: "showMarking",
      value: function showMarking() {
        var _this2 = this;

        if (!this.model.get('_canShowMarking')) return;
        this.model.get('_items').forEach(function (item, i) {
          var $item = _this2.$('.js-textinput-item').eq(i);

          $item.removeClass('is-correct is-incorrect').addClass(item._isCorrect ? 'is-correct' : 'is-incorrect');
        });
      }
    }, {
      key: "resetQuestion",
      value: function resetQuestion() {
        this.$('.js-textinput-textbox').prop('disabled', !this.model.get('_isEnabled')).val('');
        this.model.set({
          _isAtLeastOneCorrectSelection: false,
          _isCorrect: undefined
        });
      }
    }, {
      key: "showCorrectAnswer",
      value: function showCorrectAnswer() {
        var _this3 = this;

        var correctAnswers = this.model.get('_answers');
        this.model.get('_items').forEach(function (item, index) {
          var correctAnswer = correctAnswers ? correctAnswers[index][0] : item._answers[0];

          _this3.$('.js-textinput-textbox').eq(index).val(correctAnswer);
        });
      }
    }, {
      key: "hideCorrectAnswer",
      value: function hideCorrectAnswer() {
        var _this4 = this;

        this.model.get('_items').forEach(function (item, index) {
          _this4.$('.js-textinput-textbox').eq(index).val(item.userAnswer);
        });
      }
    }, {
      key: "onInputChanged",
      value: function onInputChanged(e) {
        var $input = $(e.target);
        this.model.setItemUserAnswer($input.parents('.js-textinput-item').index(), $input.val());
      }
    }]);

    return TextInputView;
  }(QuestionView$1);

  TextInputView.template = 'textinput.jsx';
  var TextInputView$1 = __AMD("components/adapt-contrib-textInput/js/textInputView", TextInputView);

  var TextInputModel = function (_QuestionModel) {
    _inherits(TextInputModel, _QuestionModel);

    var _super = _createSuper(TextInputModel);

    function TextInputModel() {
      _classCallCheck(this, TextInputModel);

      return _super.apply(this, arguments);
    }

    _createClass(TextInputModel, [{
      key: "init",
      value: function init() {
        _get(_getPrototypeOf(TextInputModel.prototype), "init", this).call(this);

        this.set('_genericAnswerIndexOffset', TextInputModel.genericAnswerIndexOffset);
        this.setupQuestionItemIndexes();
        this.checkCanSubmit();
      }
    }, {
      key: "reset",
      value: function reset() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hard';
        var canReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.get('_canReset');

        var wasReset = _get(_getPrototypeOf(TextInputModel.prototype), "reset", this).call(this, type, canReset);

        if (!wasReset) return false;
        this.set({
          _isAtLeastOneCorrectSelection: false,
          _isCorrect: null
        });
        return true;
      }
    }, {
      key: "setupQuestionItemIndexes",
      value: function setupQuestionItemIndexes() {
        this.get('_items').forEach(function (item, index) {
          if (item._index === undefined) item._index = index;
          if (item._answerIndex === undefined) item._answerIndex = -1;
        });
      }
    }, {
      key: "restoreUserAnswers",
      value: function restoreUserAnswers() {
        if (!this.get('_isSubmitted')) return;
        var userAnswer = this.get('_userAnswer');
        var genericAnswers = this.get('_answers');
        this.get('_items').forEach(function (item) {
          var answerIndex = userAnswer[item._index];

          if (answerIndex >= TextInputModel.genericAnswerIndexOffset) {
            item.userAnswer = genericAnswers[answerIndex - TextInputModel.genericAnswerIndexOffset];
            item._answerIndex = answerIndex;
          } else if (answerIndex > -1) {
            item.userAnswer = item._answers[answerIndex];
            item._answerIndex = answerIndex;
          } else {
            if (item.userAnswer === undefined) item.userAnswer = '******';
            item._answerIndex = -1;
          }

          if (item.userAnswer instanceof Array) item.userAnswer = item.userAnswer[0];
        });
        this.setQuestionAsSubmitted();
        this.markQuestion();
        this.setScore();
        this.setupFeedback();
      }
    }, {
      key: "setupRandomisation",
      value: function setupRandomisation() {
        if (!this.get('_isRandom') || !this.get('_isEnabled')) return;
        this.set('_items', _.shuffle(this.get('_items')));
      }
    }, {
      key: "canSubmit",
      value: function canSubmit() {
        return this.get('_items').every(function (_ref) {
          var userAnswer = _ref.userAnswer;
          return userAnswer;
        });
      }
    }, {
      key: "setItemUserAnswer",
      value: function setItemUserAnswer(itemIndex, userAnswer) {
        var item = this.get('_items')[itemIndex];
        item.userAnswer = userAnswer;
        this.checkCanSubmit();
      }
    }, {
      key: "storeUserAnswer",
      value: function storeUserAnswer() {
        var items = this.get('_items');
        this.isCorrect();
        var userAnswer = new Array(items.length);
        items.forEach(function (_ref2) {
          var _index = _ref2._index,
              _answerIndex = _ref2._answerIndex;
          return userAnswer[_index] = _answerIndex;
        });
        this.set('_userAnswer', userAnswer);
      }
    }, {
      key: "isCorrect",
      value: function isCorrect() {
        if (this.get('_answers')) {
          this.markGenericAnswers();
        } else {
          this.markSpecificAnswers();
        }

        return this.get('_items').every(function (_ref3) {
          var _isCorrect = _ref3._isCorrect;
          return _isCorrect;
        });
      }
    }, {
      key: "isPartlyCorrect",
      value: function isPartlyCorrect() {
        return this.get('_isAtLeastOneCorrectSelection');
      }
    }, {
      key: "markGenericAnswers",
      value: function markGenericAnswers() {
        var _this = this;

        var numberOfCorrectAnswers = 0;
        var correctAnswers = this.get('_answers').slice();
        var usedAnswerIndexes = [];
        this.get('_items').forEach(function (item) {
          correctAnswers.forEach(function (answerGroup, answerIndex) {
            if (usedAnswerIndexes.includes(answerIndex)) return;
            if (_this.checkAnswerIsCorrect(answerGroup, item.userAnswer) === false) return;
            usedAnswerIndexes.push(answerIndex);
            item._isCorrect = true;
            item._answerIndex = answerIndex + TextInputModel.genericAnswerIndexOffset;

            _this.set({
              _numberOfCorrectAnswers: ++numberOfCorrectAnswers,
              _isAtLeastOneCorrectSelection: true
            });
          });
          if (!item._isCorrect) item._isCorrect = false;
        });
      }
    }, {
      key: "markSpecificAnswers",
      value: function markSpecificAnswers() {
        var _this2 = this;

        var numberOfCorrectAnswers = 0;
        this.get('_items').forEach(function (item) {
          var answers = item._answers;
          if (!answers) return;
          var userAnswer = item.userAnswer || '';

          var isCorrect = _this2.checkAnswerIsCorrect(answers, userAnswer);

          item._isCorrect = isCorrect;
          item._answerIndex = answers.indexOf(_this2.cleanupUserAnswer(userAnswer));
          if (!isCorrect) return;

          _this2.set({
            _numberOfCorrectAnswers: ++numberOfCorrectAnswers,
            _isAtLeastOneCorrectSelection: true
          });
        });
      }
    }, {
      key: "checkAnswerIsCorrect",
      value: function checkAnswerIsCorrect(possibleAnswers, userAnswer) {
        var _this3 = this;

        var uAnswer = this.cleanupUserAnswer(userAnswer);
        var answerIsCorrect = possibleAnswers.some(function (cAnswer) {
          return _this3.cleanupUserAnswer(cAnswer) === uAnswer;
        });
        return answerIsCorrect;
      }
    }, {
      key: "cleanupUserAnswer",
      value: function cleanupUserAnswer(userAnswer) {
        if (this.get('_allowsAnyCase')) {
          userAnswer = userAnswer.toLowerCase();
        }

        if (this.get('_allowsPunctuation')) {
          userAnswer = userAnswer.replace(/[.,-/#!$£%^&*;:{}=\-_`~()]/g, '');
          userAnswer = userAnswer.replace(/(  +)+/g, ' ');
        }

        return userAnswer.trim();
      }
    }, {
      key: "setScore",
      value: function setScore() {
        var numberOfCorrectAnswers = this.get('_numberOfCorrectAnswers');
        var questionWeight = this.get('_questionWeight');
        var itemLength = this.get('_items').length;
        var score = questionWeight * numberOfCorrectAnswers / itemLength;
        this.set('_score', score);
      }
    }, {
      key: "resetUserAnswer",
      value: function resetUserAnswer() {
        this.get('_items').forEach(function (item) {
          item._isCorrect = false;
          item.userAnswer = '';
        });
      }
    }, {
      key: "getResponse",
      value: function getResponse() {
        return this.get('_items').map(function (_ref4) {
          var userAnswer = _ref4.userAnswer;
          return userAnswer;
        }).join('[,]');
      }
    }, {
      key: "getResponseType",
      value: function getResponseType() {
        return 'fill-in';
      }
    }]);

    return TextInputModel;
  }(QuestionModel$1);

  TextInputModel.genericAnswerIndexOffset = 65536;
  var TextInputModel$1 = __AMD("components/adapt-contrib-textInput/js/textInputModel", TextInputModel);

  __AMD("components/adapt-contrib-textInput/js/adapt-contrib-textInput", components$1.register('textinput', {
    view: TextInputView$1,
    model: TextInputModel$1
  }));

  var HotgridPopupView = Backbone.View.extend({
    className: 'hotgrid-popup',
    events: {
      'click .js-hotgrid-popup-close': 'closePopup',
      'click .js-hotgrid-control-click': 'onControlClick'
    },
    initialize: function () {
      this.onControlClick = _.debounce(this.onControlClick.bind(this), 100);
      this.listenToOnce(Adapt$1, 'notify:opened', this.onOpened);
      this.listenTo(this.model.get('_children'), {
        'change:_isActive': this.onItemsActiveChange,
        'change:_isVisited': this.onItemsVisitedChange
      });
      this.render();
    },
    onOpened: function () {
      this.applyNavigationClasses(this.model.getActiveItem().get('_index'));
      this.updatePageCount();
      this.handleTabs();
    },
    applyNavigationClasses: function (index) {
      var itemCount = this.model.get('_items').length;
      var canCycleThroughPagination = this.model.get('_canCycleThroughPagination');
      var shouldEnableBack = index > 0 || canCycleThroughPagination;
      var shouldEnableNext = index < itemCount - 1 || canCycleThroughPagination;
      var $controls = this.$('.hotgrid-popup__controls');
      this.$('hotgrid-popup__nav').toggleClass('first', !shouldEnableBack).toggleClass('last', !shouldEnableNext);
      Adapt$1.a11y.toggleAccessibleEnabled($controls.filter('.back'), shouldEnableBack);
      Adapt$1.a11y.toggleAccessibleEnabled($controls.filter('.next'), shouldEnableNext);
    },
    updatePageCount: function () {
      var template = Adapt$1.course.get('_globals')._components._hotgrid.popupPagination || '{{itemNumber}} / {{totalItems}}';
      var labelText = Handlebars.compile(template || '')({
        itemNumber: this.model.getActiveItem().get('_index') + 1,
        totalItems: this.model.get('_items').length
      });
      this.$('.hotgrid-popup__count').html(labelText);
    },
    handleTabs: function () {
      Adapt$1.a11y.toggleHidden(this.$('.hotgrid-popup__item:not(.is-active)'), true);
      Adapt$1.a11y.toggleHidden(this.$('.hotgrid-popup__item.is-active'), false);
    },
    onItemsActiveChange: function (item, _isActive) {
      if (!_isActive) return;
      var index = item.get('_index');
      this.updatePageCount();
      this.applyItemClasses(index);
      this.handleTabs();
      this.handleFocus(index);
    },
    applyItemClasses: function (index) {
      this.$('.hotgrid-popup__item[data-index="' + index + '"]').addClass('is-active').removeAttr('aria-hidden');
      this.$('.hotgrid-popup__item[data-index="' + index + '"] .hotgrid-popup__item-title').attr("id", "notify-heading");
      this.$('.hotgrid-popup__item:not([data-index="' + index + '"])').removeClass('is-active').attr('aria-hidden', 'true');
      this.$('.hotgrid-popup__item:not([data-index="' + index + '"]) .hotgrid-popup__item-title').removeAttr("id");
    },
    handleFocus: function (index) {
      Adapt$1.a11y.focusFirst(this.$('.hotgrid-popup__inner .is-active'));
      this.applyNavigationClasses(index);
    },
    onItemsVisitedChange: function (item, _isVisited) {
      if (!_isVisited) return;
      this.$('.hotgrid-popup__item').filter('[data-index="' + item.get('_index') + '"]').addClass('is-visited');
    },
    render: function () {
      var data = this.model.toJSON();
      data.view = this;
      var template = Handlebars.templates['hotgridPopup'];
      this.$el.html(template(data));
    },
    closePopup: function (event) {
      Adapt$1.trigger('notify:close');
    },
    onControlClick: function (event) {
      var direction = $(event.currentTarget).hasClass('back') ? 'back' : 'next';
      var index = this.getNextIndex(direction);

      if (index !== -1) {
        this.setItemState(index);
      }
    },
    getNextIndex: function (direction) {
      var index = this.model.getActiveItem().get('_index');
      var lastIndex = this.model.get('_items').length - 1;

      switch (direction) {
        case 'back':
          if (index > 0) return --index;
          if (this.model.get('_canCycleThroughPagination')) return lastIndex;
          break;

        case 'next':
          if (index < lastIndex) return ++index;
          if (this.model.get('_canCycleThroughPagination')) return 0;
      }

      return -1;
    },
    setItemState: function (index) {
      this.model.getActiveItem().toggleActive();
      var nextItem = this.model.getItem(index);
      nextItem.toggleActive();
      nextItem.toggleVisited(true);
    }
  });
  var HotgridPopupView$1 = __AMD("components/adapt-hotgrid/js/hotgridPopupView", HotgridPopupView);

  var HotgridView = ComponentView$1.extend({
    events: {
      'click .js-hotgrid-item-click': 'onItemClicked'
    },
    initialize: function () {
      ComponentView$1.prototype.initialize.call(this);
      this.setDeviceSize();
      this.setUpViewData();
      this.setUpModelData();
      this.setUpEventListeners();
      this.checkIfResetOnRevisit();
    },
    setUpViewData: function () {
      this.popupView = null;
      this._isPopupOpen = false;
    },
    setUpModelData: function () {
      if (this.model.get('_canCycleThroughPagination') === undefined) {
        this.model.set('_canCycleThroughPagination', false);
      }
    },
    setUpEventListeners: function () {
      this.listenTo(Adapt$1, 'device:changed', this.resizeControl);
      this.listenTo(this.model.get('_children'), {
        'change:_isActive': this.onItemsActiveChange,
        'change:_isVisited': this.onItemsVisitedChange
      });
    },
    setDeviceSize: function () {
      if (Adapt$1.device.screenSize === 'large') {
        this.$el.addClass('is-desktop').removeClass('is-mobile');
        this.model.set('_isDesktop', true);
      } else {
        this.$el.addClass('is-mobile').removeClass('is-desktop');
        this.model.set('_isDesktop', false);
      }
    },
    checkIfResetOnRevisit: function () {
      var isResetOnRevisit = this.model.get('_isResetOnRevisit');
      if (isResetOnRevisit) this.model.reset(isResetOnRevisit);
    },
    postRender: function () {
      this.setUpColumns();
      this.$('.hotgrid__widget').imageready(this.setReadyStatus.bind(this));

      if (this.model.get('_setCompletionOn') === 'inview') {
        this.setupInviewCompletion('.component__widget');
      }
    },
    resizeControl: function () {
      this.setDeviceSize();
      this.render();
      this.updateVisitedState();
    },
    setUpColumns: function () {
      var columns = this.model.get('_columns');

      if (columns && Adapt$1.device.screenSize === 'large') {
        this.$('.hotgrid__item').css('width', 100 / columns + '%');
      }
    },
    onItemsActiveChange: function (model, _isActive) {
      this.getItemElement(model).toggleClass('is-active', _isActive);
    },
    getItemElement: function (model) {
      var index = model.get('_index');
      return this.$('.hotgrid__item-btn').filter('[data-index="' + index + '"]');
    },
    updateVisitedState: function (itemModel) {
      var itemModels = itemModel ? [itemModel] : this.model.getChildren().models;

      _.each(itemModels, function (model) {
        if (!model.get('_isVisited')) return;
        var $item = this.getItemElement(model);
        var visitedLabel = this.model.get('_globals')._accessibility._ariaLabels.visited + '.';
        $item.find('.aria-label').each(function (index, ariaLabel) {
          ariaLabel.innerHTML += ' ' + visitedLabel;
        });
        $item.addClass('is-visited');
      }, this);
    },
    onItemsVisitedChange: function (model, _isVisited) {
      if (!_isVisited) return;
      this.updateVisitedState(model);
    },
    onItemClicked: function (event) {
      if (event) event.preventDefault();
      var item = this.model.getItem($(event.currentTarget).data('index'));
      item.toggleActive(true);
      item.toggleVisited(true);
      this.openPopup();
    },
    openPopup: function () {
      if (this._isPopupOpen) return;
      this._isPopupOpen = true;
      this.popupView = new HotgridPopupView$1({
        model: this.model
      });
      Adapt$1.trigger('notify:popup', {
        _view: this.popupView,
        _isCancellable: true,
        _showCloseButton: false,
        _classes: 'hotgrid ' + this.model.get('_classes')
      });
      this.listenToOnce(Adapt$1, {
        'popup:closed': this.onPopupClosed
      });
    },
    onPopupClosed: function () {
      this.model.getActiveItem().toggleActive();
      this._isPopupOpen = false;
    }
  });
  var HotgridView$1 = __AMD("components/adapt-hotgrid/js/hotgridView", HotgridView);

  __AMD("components/adapt-hotgrid/js/adapt-hotgrid", Adapt$1.register('hotgrid', {
    model: ItemsComponentModel.extend({}),
    view: HotgridView$1
  }));

  var SimpleTable = ComponentView$1.extend({
    preRender: function () {
      this.checkIfResetOnRevisit();
    },
    postRender: function () {
      this.setReadyStatus();
      this.setupInview();
    },
    setupInview: function () {
      var selector = this.getInviewElementSelector();

      if (!selector) {
        this.setCompletionStatus();
      } else {
        this.model.set('inviewElementSelector', selector);
        this.$(selector).on('inview', _.bind(this.inview, this));
      }
    },
    getInviewElementSelector: function () {
      if (this.model.get('body')) return '.component-body';
      if (this.model.get('instruction')) return '.component-instruction';
      if (this.model.get('displayTitle')) return '.component-title';
      return null;
    },
    checkIfResetOnRevisit: function () {
      var isResetOnRevisit = this.model.get('_isResetOnRevisit');
      if (isResetOnRevisit) this.model.reset(isResetOnRevisit);
    },
    inview: function (event, visible, visiblePartX, visiblePartY) {
      if (visible) {
        if (visiblePartY === 'top') {
          this._isVisibleTop = true;
        } else if (visiblePartY === 'bottom') {
          this._isVisibleBottom = true;
        } else {
          this._isVisibleTop = true;
          this._isVisibleBottom = true;
        }

        if (this._isVisibleTop && this._isVisibleBottom) {
          this.$(this.model.get('inviewElementSelector')).off('inview');
          this.setCompletionStatus();
        }
      }
    },
    remove: function () {
      if (this.model.has('inviewElementSelector')) this.$(this.model.get('inviewElementSelector')).off('inview');
      ComponentView$1.prototype.remove.call(this);
    }
  }, {
    template: 'simple-table'
  });
  Adapt$1.register('simple-table', SimpleTable);
  __AMD("components/adapt-simple-table/js/adapt-simple-table", SimpleTable);

  var AssessmentView = {
    postRender: function () {
      ArticleView$1.prototype.postRender.call(this);

      if (this.model.isAssessmentEnabled()) {
        var _config$_questions;

        this._setupEventListeners();

        var config = this.model.getConfig();

        if ((config === null || config === void 0 ? void 0 : (_config$_questions = config._questions) === null || _config$_questions === void 0 ? void 0 : _config$_questions._canShowMarking) === false) {
          this.$el.addClass('has-no-marking');
        }
      }

      this.$el.addClass('is-assessment');
    },
    _setupEventListeners: function () {
      this.listenTo(Adapt$1, {
        'assessments:complete': this._onAssessmentComplete,
        'assessments:reset': this._onAssessmentReset,
        remove: this._onRemove
      });
    },
    _removeEventListeners: function () {
      this.stopListening(Adapt$1, {
        'assessments:complete': this._onAssessmentComplete,
        'assessments:reset': this._onAssessmentReset
      });
    },
    _onAssessmentComplete: function (state, model) {
      if (state.id !== this.model.get('_assessment')._id) return;
      logging$1.info('assessment complete', state, model);
    },
    _onAssessmentReset: function (state, model) {
      if (state.id !== this.model.get('_assessment')._id) return;
      logging$1.info('assessment reset', state, model);
    },
    _onRemove: function () {
      this._removeEventListeners();
    }
  };
  var AdaptAssessmentArticleView = __AMD("extensions/adapt-contrib-assessment/js/adapt-assessmentArticleView", AssessmentView);

  var QuestionBank = function () {
    function QuestionBank(quizBankid, articleId, numQuestionBlocks, uniqueQuestions) {
      _classCallCheck(this, QuestionBank);

      this._id = quizBankid;
      this._articleId = articleId;
      this._numQuestionBlocks = numQuestionBlocks;
      this._uniqueQuestions = uniqueQuestions;
      this.questionBlocks = [];
      this.unUsedQuestionBlocks = undefined;
      this.usedQuestionBlocks = [];
    }

    _createClass(QuestionBank, [{
      key: "getID",
      value: function getID() {
        return this._id;
      }
    }, {
      key: "addBlock",
      value: function addBlock(block) {
        this.questionBlocks.push(block);
      }
    }, {
      key: "getRandomQuestionBlocks",
      value: function getRandomQuestionBlocks() {
        this.checkResetUnunsedBlocks();
        var questionBlocks = [];
        var usedQuestionBlocks = this.usedQuestionBlocks.slice(0);

        for (var i = 0; i < this._numQuestionBlocks; i++) {
          var question = this.getRandomQuestion();

          if (question !== undefined) {
            questionBlocks.push(question);
            continue;
          }

          if (usedQuestionBlocks.length === 0) break;
          var index = Math.floor(Math.random() * (usedQuestionBlocks.length - 1));
          question = usedQuestionBlocks.splice(index, 1)[0];
          questionBlocks.push(question);
        }

        return questionBlocks;
      }
    }, {
      key: "checkResetUnunsedBlocks",
      value: function checkResetUnunsedBlocks() {
        if (this.unUsedQuestionBlocks !== undefined && this._uniqueQuestions) return;
        this.unUsedQuestionBlocks = this.questionBlocks.slice(0);
      }
    }, {
      key: "getRandomQuestion",
      value: function getRandomQuestion() {
        if (this.unUsedQuestionBlocks !== undefined && this.unUsedQuestionBlocks.length < 1) {
          logging$1.warn('assessment:' + this._articleId + ' No more unique questions for _assessment._quizBankID ' + this._id);
          return undefined;
        }

        var index = Math.round(Math.random() * (this.unUsedQuestionBlocks.length - 1));
        var questionBlock = this.unUsedQuestionBlocks[index];
        this.usedQuestionBlocks.push(questionBlock);
        this.unUsedQuestionBlocks.splice(index, 1);
        return questionBlock;
      }
    }]);

    return QuestionBank;
  }();

  var QuestionBank$1 = __AMD("extensions/adapt-contrib-assessment/js/adapt-assessmentQuestionBank", QuestionBank);

  var givenIdCount = 0;
  var assessmentConfigDefaults = {
    _isEnabled: true,
    _questions: {
      _resetType: 'soft',
      _canShowFeedback: false,
      _canShowMarking: false,
      _canShowModelAnswer: false
    },
    _suppressMarking: false,
    _isPercentageBased: true,
    _scoreToPass: 100,
    _correctToPass: 100,
    _includeInTotalScore: true,
    _assessmentWeight: 1,
    _isResetOnRevisit: true,
    _reloadPageOnReset: true,
    _attempts: 'infinite',
    _allowResetIfPassed: false
  };
  var AssessmentModel = {
    _getCurrentQuestionComponents: function () {
      return this.findDescendantModels('block').filter(function (block) {
        return block.get('_isAvailable');
      }).reduce(function (questions, block) {
        return questions.concat(block.findDescendantModels('question'));
      }, []);
    },
    _getAllQuestionComponents: function () {
      return this.findDescendantModels('question');
    },
    _postInitialize: function () {
      if (!this.isAssessmentEnabled()) return;
      var assessmentConfig = this.getConfig();
      Object.assign(this, {
        _originalChildModels: null,
        _questionBanks: null,
        _forceResetOnRevisit: false
      });
      var attemptsLeft;

      switch (assessmentConfig._attempts) {
        case 'infinite':
        case 0:
        case undefined:
        case -1:
        case null:
          attemptsLeft = 'infinite';
          break;

        default:
          attemptsLeft = assessmentConfig._attempts;
          break;
      }

      this.set({
        _assessmentCompleteInSession: false,
        _attemptInProgress: false,
        _isAssessmentComplete: false,
        _numberOfQuestionsAnswered: 0,
        _lastAttemptScoreAsPercent: 0,
        _attempts: attemptsLeft,
        _attemptsLeft: attemptsLeft,
        _attemptsSpent: 0
      });
      this.listenToOnce(Adapt$1, 'app:dataReady', this._onDataReady);
      this.listenTo(Adapt$1, 'remove', this._onRemove);
    },
    init: function () {
      this._originalChildModels = this.getChildren().models;
      this.setupCurrentQuestionComponents();

      this._setAssessmentOwnershipOnChildrenModels();

      this._updateQuestionsState();
    },
    setupCurrentQuestionComponents: function () {
      var assessmentQuestionsConfig = this.getConfig()._questions;

      this._getAllQuestionComponents().forEach(function (component) {
        component.set({
          _canShowFeedback: assessmentQuestionsConfig._canShowFeedback,
          _canShowMarking: assessmentQuestionsConfig._canShowMarking,
          _canShowModelAnswer: assessmentQuestionsConfig._canShowModelAnswer
        });
      });
    },
    _setAssessmentOwnershipOnChildrenModels: function () {
      var assessmentConfig = this.get('_assessment');
      var childConfig = {
        _isPartOfAssessment: true,
        _assessmentId: assessmentConfig._id
      };

      var _iterator = _createForOfIteratorHelper(this._originalChildModels),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var blockModel = _step.value;
          blockModel.set(childConfig);
          blockModel.setOnChildren(childConfig);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    },
    checkIfResetOnRevisit: function () {},
    _onDataReady: function () {
      Adapt$1.assessment.register(this);
    },
    _setupAssessmentData: function (force, callback) {
      var assessmentConfig = this.getConfig();
      var state = this.getState();
      var hasAttemptsLeft = state.attemptsLeft > 0 || state.attemptsLeft === 'infinite';
      var isFirstAttempt = state.attemptsSpent === 0;
      var shouldResetOnRevisit = (isFirstAttempt || assessmentConfig._isResetOnRevisit) && !this.get('_attemptInProgress');
      var shouldResetAssessment = shouldResetOnRevisit && !state.isPass && hasAttemptsLeft || force === true;
      var shouldResetQuestions = shouldResetOnRevisit && (state.allowResetIfPassed || !state.isPass) || force === true;

      if (shouldResetAssessment || shouldResetQuestions) {
        Adapt$1.trigger('assessments:preReset', this.getState(), this);
      }

      var quizModels;

      if (shouldResetAssessment) {
        this.set({
          _numberOfQuestionsAnswered: 0,
          _isAssessmentComplete: false,
          _assessmentCompleteInSession: false,
          _score: 0
        });
        this.getChildren().models = this._originalChildModels;

        if (assessmentConfig !== null && assessmentConfig !== void 0 && assessmentConfig._banks._isEnabled && (assessmentConfig === null || assessmentConfig === void 0 ? void 0 : assessmentConfig._banks._split.length) > 1) {
          quizModels = this._setupBankedAssessment();
        } else if (assessmentConfig !== null && assessmentConfig !== void 0 && assessmentConfig._randomisation._isEnabled) {
          quizModels = this._setupRandomisedAssessment();
        }
      }

      if (!quizModels) {
        quizModels = this.getChildren().models;
      } else if (quizModels.length === 0) {
        quizModels = this.getChildren().models;
        logging$1.warn('assessment: Not enough unique questions to create a fresh assessment, using last selection');
      }

      this.getChildren().models = quizModels;
      this.setupCurrentQuestionComponents();

      if (shouldResetAssessment || shouldResetQuestions) {
        this._resetQuestions();

        this.set('_attemptInProgress', true);
        Adapt$1.trigger('assessments:reset', this.getState(), this);
      }

      if (!state.isComplete) {
        this.set('_attemptInProgress', true);
      }

      this._overrideQuestionComponentSettings();

      this._setupQuestionListeners();

      this._checkNumberOfQuestionsAnswered();

      this._updateQuestionsState();

      Adapt$1.assessment.saveState();
      this.trigger('reset');

      if (shouldResetAssessment || shouldResetQuestions) {
        Adapt$1.trigger('assessments:postReset', this.getState(), this);
      }
    },
    _setupBankedAssessment: function () {
      var assessmentConfig = this.getConfig();

      this._setupBanks();

      var questionModels = [];

      this._questionBanks.forEach(function (questionBank) {
        var _questionModels;

        (_questionModels = questionModels).push.apply(_questionModels, _toConsumableArray(questionBank.getRandomQuestionBlocks()));
      });

      if (assessmentConfig._banks._randomisation) {
        questionModels = _.shuffle(questionModels);
      }

      return questionModels;
    },
    _setupBanks: function () {
      var assessmentConfig = this.getConfig();

      var banks = assessmentConfig._banks._split.split(',');

      var bankId;
      this._questionBanks = [];

      for (var i = 0, l = banks.length; i < l; i++) {
        var bank = banks[i];
        bankId = i + 1;
        var questionBank = new QuestionBank$1(bankId, this.get('_id'), bank, true);
        this._questionBanks[bankId] = questionBank;
      }

      var children = this.getChildren().models;

      var _iterator2 = _createForOfIteratorHelper(children),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var blockModel = _step2.value;
          var blockAssessmentConfig = blockModel.get('_assessment');
          if (!blockAssessmentConfig) continue;
          bankId = blockAssessmentConfig._quizBankID;

          this._questionBanks[bankId].addBlock(blockModel);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    },
    _setupRandomisedAssessment: function () {
      var assessmentConfig = this.getConfig();
      var randomisationModel = assessmentConfig._randomisation;
      var blockModels = this.getChildren().models;

      var questionModels = _.shuffle(blockModels);

      if (randomisationModel._blockCount > 0) {
        questionModels = questionModels.slice(0, randomisationModel._blockCount);
      }

      return questionModels;
    },
    _overrideQuestionComponentSettings: function () {
      var newSettings = this._getMarkingSettings();

      var questionConfig = this.getConfig()._questions;

      if (Object.prototype.hasOwnProperty.call(questionConfig, '_canShowFeedback')) {
        newSettings._canShowFeedback = questionConfig._canShowFeedback;
      }

      if (!_.isEmpty(newSettings)) {
        var questionComponents = this._getAllQuestionComponents();

        questionComponents.forEach(function (model) {
          return model.set(newSettings, {
            pluginName: '_assessment'
          });
        });
      }
    },
    _setupQuestionListeners: function () {
      this._removeQuestionListeners();

      this.listenTo(this, 'bubble:change:_isInteractionComplete', this._onCompletionEvent);
    },
    _checkNumberOfQuestionsAnswered: function () {
      var questionComponents = this._getCurrentQuestionComponents();

      var numberOfQuestionsAnswered = questionComponents.filter(function (model) {
        return model.get('_isInteractionComplete');
      }).length;
      this.set('_numberOfQuestionsAnswered', numberOfQuestionsAnswered);
    },
    _removeQuestionListeners: function () {
      this.stopListening(this, 'bubble:change:_isInteractionComplete', this._onCompletionEvent);
    },
    _onCompletionEvent: function (event) {
      var _event$target, _event$target2;

      if ((_event$target = event.target) !== null && _event$target !== void 0 && _event$target.isTypeGroup('block')) return this._onBlockCompleted(event.target, event.value);
      if ((_event$target2 = event.target) !== null && _event$target2 !== void 0 && _event$target2.isTypeGroup('questions')) return this._onQuestionCompleted(event.target, event.value);
    },
    _onBlockCompleted: function (blockModel, value) {
      var _this = this;

      if (value === false) return;
      var questionModels = blockModel.findDescendantModels('question');
      questionModels.forEach(function (questionModel) {
        _this._onQuestionCompleted(questionModel, value);
      });
      if (!blockModel.get('_isInteractionComplete')) return;

      this._checkAssessmentComplete();
    },
    _onQuestionCompleted: function (questionModel, value) {
      if (value === false) return;
      if (!questionModel.get('_isInteractionComplete')) return;

      var numberOfQuestionsAnswered = this._getCurrentQuestionComponents().reduce(function (count, question) {
        return count += question.get('_isSubmitted') ? 1 : 0;
      }, 0);

      this.set('_numberOfQuestionsAnswered', numberOfQuestionsAnswered);

      this._updateQuestionsState();

      Adapt$1.assessment.saveState();

      this._checkAssessmentComplete();
    },
    _checkAssessmentComplete: function () {
      var allQuestionsAdded = this.get('_requireCompletionOf') !== Number.POSITIVE_INFINITY;
      if (!allQuestionsAdded) return;
      var numberOfQuestionsAnswered = this.get('_numberOfQuestionsAnswered');

      var allQuestionsAnswered = numberOfQuestionsAnswered >= this._getCurrentQuestionComponents().length;

      if (!allQuestionsAnswered) return;

      this._onAssessmentComplete();
    },
    _onAssessmentComplete: function () {
      var _this2 = this;

      var wasAttemptInProgess = this.get('_attemptInProgress');
      if (!wasAttemptInProgess) return;
      this.set('_attemptInProgress', false);

      this._spendAttempt();

      var _scoreAsPercent = this._getScoreAsPercent();

      var _score = this._getScore();

      var _maxScore = this._getMaxScore();

      var _minScore = this._getMinScore();

      var _correctCount = this._getCorrectCount();

      var _correctAsPercent = this._getCorrectAsPercent();

      var _questionCount = this._getQuestionCount();

      this.set({
        _scoreAsPercent: _scoreAsPercent,
        _score: _score,
        _maxScore: _maxScore,
        _minScore: _minScore,
        _correctAsPercent: _correctAsPercent,
        _correctCount: _correctCount,
        _questionCount: _questionCount,
        _lastAttemptScoreAsPercent: _scoreAsPercent,
        _assessmentCompleteInSession: true,
        _isAssessmentComplete: true
      });

      this._updateQuestionsState();

      this._checkIsPass();

      this._removeQuestionListeners();

      if (this._isMarkingSuppressionEnabled() && !this._isAttemptsLeft()) {
        _.defer(function () {
          _this2._overrideMarkingSettings();

          _this2._refreshQuestions();
        });
      }

      Adapt$1.trigger('assessments:complete', this.getState(), this);
    },
    _updateQuestionsState: function () {
      var questionComponents = this._getCurrentQuestionComponents();

      var questions = questionComponents.map(function (model) {
        var _model$get;

        return {
          _id: model.get('_id'),
          _isCorrect: (_model$get = model.get('_isCorrect')) !== null && _model$get !== void 0 ? _model$get : null
        };
      });
      this.set('_questions', questions);
    },
    _checkIsPass: function () {
      var assessmentConfig = this.getConfig();
      var isPercentageBased = assessmentConfig._isPercentageBased;
      var scoreToPass = assessmentConfig._scoreToPass;
      var correctToPass = assessmentConfig._correctToPass || 0;
      var scoreAsPercent = this.get('_scoreAsPercent');
      var score = this.get('_score');
      var correctAsPercent = this.get('_correctAsPercent');
      var correctCount = this.get('_correctCount');
      var isPass = isPercentageBased ? scoreAsPercent >= scoreToPass && correctAsPercent >= correctToPass : score >= scoreToPass && correctCount >= correctToPass;
      this.set('_isPass', isPass);
    },
    _getMarkingSettings: function () {
      var markingSettings = {};

      if (this._shouldSuppressMarking()) {
        markingSettings = {
          _canShowMarking: false,
          _canShowModelAnswer: false
        };
      } else {
        var questionConfig = this.getConfig()._questions;

        if (Object.prototype.hasOwnProperty.call(questionConfig, '_canShowModelAnswer')) {
          markingSettings._canShowModelAnswer = questionConfig._canShowModelAnswer;
        }

        if (Object.prototype.hasOwnProperty.call(questionConfig, '_canShowMarking')) {
          markingSettings._canShowMarking = questionConfig._canShowMarking;
        }
      }

      return markingSettings;
    },
    _overrideMarkingSettings: function () {
      var newMarkingSettings = this._getMarkingSettings();

      var questionComponents = this._getAllQuestionComponents();

      questionComponents.forEach(function (model) {
        return model.set(newMarkingSettings, {
          pluginName: '_assessment'
        });
      });
    },
    _refreshQuestions: function () {
      var questionComponents = this._getCurrentQuestionComponents();

      questionComponents.forEach(function (model) {
        return model.refresh();
      });
    },
    _shouldSuppressMarking: function () {
      return this._isMarkingSuppressionEnabled() && this._isAttemptsLeft();
    },
    _isMarkingSuppressionEnabled: function () {
      var assessmentConfig = this.getConfig();
      return assessmentConfig._suppressMarking;
    },
    _isAttemptsLeft: function () {
      if (this.get('_isAssessmentComplete') && this.get('_isPass')) return false;
      if (this.get('_attemptsLeft') === 0) return false;
      return true;
    },
    _spendAttempt: function () {
      if (!this._isAttemptsLeft()) return false;
      var attemptsSpent = this.get('_attemptsSpent');
      this.set('_attemptsSpent', ++attemptsSpent);
      if (this.get('_attempts') === 'infinite') return true;
      var attemptsLeft = this.get('_attemptsLeft');
      this.set('_attemptsLeft', --attemptsLeft);
      return true;
    },
    _getScore: function () {
      var questionComponents = this._getCurrentQuestionComponents();

      var score = questionComponents.reduce(function (score, model) {
        return score += model.score || 0;
      }, 0);
      return score;
    },
    _getMaxScore: function () {
      var questionComponents = this._getCurrentQuestionComponents();

      var maxScore = questionComponents.reduce(function (maxScore, model) {
        return maxScore += model.maxScore || 0;
      }, 0);
      return maxScore;
    },
    _getMinScore: function () {
      var questionComponents = this._getCurrentQuestionComponents();

      var minScore = questionComponents.reduce(function (minScore, model) {
        return minScore += model.minScore || 0;
      }, 0);
      return minScore;
    },
    _getScoreAsPercent: function () {
      var minScore = this._getMinScore();

      var maxScore = this._getMaxScore();

      var score = this._getScore();

      var range = maxScore - minScore;
      return range === 0 ? 0 : Math.round((score - minScore) / range * 100);
    },
    _getCorrectCount: function () {
      return this._getCurrentQuestionComponents().reduce(function (count, model) {
        return count += model.get('_isCorrect') ? 1 : 0;
      }, 0);
    },
    _getQuestionCount: function () {
      return this._getCurrentQuestionComponents().length;
    },
    _getCorrectAsPercent: function () {
      var questionCount = this._getQuestionCount();

      return questionCount === 0 ? 0 : Math.round(this._getCorrectCount() / questionCount * 100);
    },
    _getLastAttemptScoreAsPercent: function () {
      return this.get('_lastAttemptScoreAsPercent');
    },
    _checkReloadPage: function () {
      if (!this.canResetInPage()) return false;
      var parentId = this.getParent().get('_id');
      var currentLocation = location$1._currentId;
      if (currentLocation !== parentId) return false;
      if (!this.get('_isReady')) return false;
      return true;
    },
    _reloadPage: function (callback) {
      var _this3 = this;

      var assessmentConfig = this.getConfig();
      this._forceResetOnRevisit = true;
      this.listenToOnce(Adapt$1, 'pageView:ready', _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!assessmentConfig._scrollToOnReset) {
                  _context.next = 3;
                  break;
                }

                _context.next = 3;
                return router$1.navigateToElement(_this3.get('_id'));

              case 3:
                callback();

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })));

      _.delay(function () {
        Backbone.history.navigate('#/id/' + location$1._currentId, {
          replace: true,
          trigger: true
        });
      }, 250);
    },
    _resetQuestions: function () {
      var assessmentConfig = this.getConfig();

      var questionModels = this._getCurrentQuestionComponents();

      questionModels.forEach(function (model) {
        return model.reset(assessmentConfig._questions._resetType, true);
      });
    },
    _onRemove: function () {
      this._removeQuestionListeners();
    },
    _setCompletionStatus: function () {
      this.set({
        _isComplete: true,
        _isInteractionComplete: true
      });
    },
    _checkIfQuestionsWereRestored: function () {
      if (this.get('_assessmentCompleteInSession')) return;
      if (!this.get('_isAssessmentComplete')) return;
      var wereQuestionsRestored = true;
      var questions = this.get('_questions');

      var _iterator3 = _createForOfIteratorHelper(questions),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var question = _step3.value;
          var questionModel = data$1.findById(question._id);

          if (questionModel.get('_isAvailable') && !questionModel.get('_isSubmitted')) {
            wereQuestionsRestored = false;
            break;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      if (!wereQuestionsRestored) {
        this.set('_assessmentCompleteInSession', true);
        return true;
      }

      return false;
    },
    isAssessmentEnabled: function () {
      var _this$get;

      if ((_this$get = this.get('_assessment')) !== null && _this$get !== void 0 && _this$get._isEnabled) return true;
      return false;
    },
    canResetInPage: function () {
      var assessmentConfig = this.getConfig();
      if (assessmentConfig._reloadPageOnReset === false) return false;
      return true;
    },
    reset: function (force, callback) {
      var assessmentConfig = this.getConfig();
      force = this._forceResetOnRevisit || force === true;
      this._forceResetOnRevisit = false;

      var isPageReload = this._checkReloadPage();

      if (this.get('_assessmentCompleteInSession') && !assessmentConfig._isResetOnRevisit && !isPageReload && !force) {
        if (typeof callback === 'function') callback(false);
        return false;
      }

      var wereQuestionsRestored = this._checkIfQuestionsWereRestored();

      force = force || wereQuestionsRestored;

      if (force && !this._isAttemptsLeft()) {
        this.set({
          _attemptsLeft: this.get('_attempts'),
          _attemptsSpent: 0
        });
      }

      var allowResetIfPassed = this.get('_assessment')._allowResetIfPassed;

      if (!this._isAttemptsLeft() && !force && !allowResetIfPassed) {
        if (typeof callback === 'function') callback(false);
        return false;
      }

      if (!isPageReload) {
        this._setupAssessmentData(force);

        if (typeof callback === 'function') callback(true);
      } else {
        this._reloadPage(function () {
          if (typeof callback === 'function') callback(true);
        });
      }

      return true;
    },
    getSaveState: function () {
      var _cfg$_banks, _cfg$_randomisation;

      var state = this.getState();
      var blocks;
      var cfg = this.getConfig();
      var banksActive = ((_cfg$_banks = cfg._banks) === null || _cfg$_banks === void 0 ? void 0 : _cfg$_banks._isEnabled) && cfg._banks._split.length > 1;
      var randomisationActive = (_cfg$_randomisation = cfg._randomisation) === null || _cfg$_randomisation === void 0 ? void 0 : _cfg$_randomisation._isEnabled;

      if (!banksActive && !randomisationActive) {
        blocks = this.findDescendantModels('block');
      } else {
        blocks = state.questions.map(function (question) {
          return data$1.findById(question._id).getParent();
        });
      }

      blocks = _toConsumableArray(new Set(blocks)).filter(function (block) {
        return block.trackingPosition;
      });
      var blockTrackingPositions = blocks.map(function (block) {
        return block.trackingPosition;
      });
      var blockCompletion = blocks.map(function (block) {
        var questions = block.findDescendantModels('question');
        return questions.map(function (question) {
          return question.get('_isCorrect') || false;
        });
      });
      var blockData = [blockTrackingPositions, blockCompletion];
      var saveState = [state.isComplete ? 1 : 0, state.attemptsSpent, state.maxScore || 0, state.score, state.attemptInProgress ? 1 : 0, state.minScore || 0, state.correctAsPercent || 0, state.correctCount || 0, state.questionCount || 0];
      var dataPackage = [saveState, blockData];
      return dataPackage;
    },
    setRestoreState: function (dataPackage) {
      var restoreState = dataPackage[0];
      var blockData = dataPackage[1];

      var _isAssessmentComplete = restoreState[0] === 1;

      var attempts = this.get('_attempts');
      var _attemptsSpent = restoreState[1];
      var maxScore = restoreState[2];
      var score = restoreState[3];

      var _scoreAsPercent = score ? Math.round(score / maxScore * 100) : 0;

      var _attemptInProgress = restoreState[4] === 1;

      var minScore = restoreState[5];
      var correctAsPercent = restoreState[6];
      var correctCount = restoreState[7];
      var questionCount = restoreState[8];
      var blocks = blockData[0].map(function (trackingPosition) {
        if (typeof trackingPosition === 'number') {
          return data$1.findWhere({
            _trackingId: trackingPosition
          });
        }

        return data$1.findByTrackingPosition(trackingPosition);
      });

      if (blocks.length) {
        var nonBlockChildren = this.getChildren().models.filter(function (model) {
          return !model.isTypeGroup('block');
        });
        this.getChildren().models = blocks.concat(nonBlockChildren);
      }

      var _questions = [];
      blocks.forEach(function (block, blockIndex) {
        var blockQuestions = block.findDescendantModels('question');
        blockQuestions.forEach(function (question, questionIndex) {
          _questions.push({
            _id: question.get('_id'),
            _isCorrect: blockData[1][blockIndex][questionIndex]
          });
        });
      });
      this.set({
        _isAssessmentComplete: _isAssessmentComplete,
        _assessmentCompleteInSession: false,
        _attemptsSpent: _attemptsSpent,
        _attemptInProgress: _attemptInProgress,
        _attemptsLeft: attempts === 'infinite' ? attempts : attempts - _attemptsSpent,
        _maxScore: maxScore || this._getMaxScore(),
        _minScore: minScore || this._getMinScore(),
        _score: score || 0,
        _scoreAsPercent: _scoreAsPercent,
        _correctAsPercent: correctAsPercent || 0,
        _correctCount: correctCount || 0,
        _questions: _questions,
        _questionCount: questionCount || 0,
        _lastAttemptScoreAsPercent: _scoreAsPercent
      });
      if (_isAssessmentComplete) this._checkIsPass();
      Adapt$1.trigger('assessments:restored', this.getState(), this);
    },
    getState: function () {
      var assessmentConfig = this.getConfig();
      var state = {
        id: assessmentConfig._id,
        type: 'article-assessment',
        pageId: this.getParent().get('_id'),
        articleId: this.get('_id'),
        isEnabled: assessmentConfig._isEnabled,
        isComplete: this.get('_isAssessmentComplete'),
        isPercentageBased: assessmentConfig._isPercentageBased,
        scoreToPass: assessmentConfig._scoreToPass,
        score: this.get('_score'),
        scoreAsPercent: this.get('_scoreAsPercent'),
        maxScore: this.get('_maxScore'),
        minScore: this.get('_minScore'),
        correctCount: this.get('_correctCount'),
        correctAsPercent: this.get('_correctAsPercent'),
        correctToPass: assessmentConfig._correctToPass,
        questionCount: this.get('_questionCount'),
        isPass: this.get('_isPass'),
        includeInTotalScore: assessmentConfig._includeInTotalScore,
        assessmentWeight: assessmentConfig._assessmentWeight,
        attempts: this.get('_attempts'),
        attemptsSpent: this.get('_attemptsSpent'),
        attemptsLeft: this.get('_attemptsLeft'),
        attemptInProgress: this.get('_attemptInProgress'),
        lastAttemptScoreAsPercent: this.get('_lastAttemptScoreAsPercent'),
        questions: this.get('_questions'),
        resetType: assessmentConfig._questions._resetType,
        allowResetIfPassed: assessmentConfig._allowResetIfPassed,
        questionModels: new Backbone.Collection(this._getCurrentQuestionComponents())
      };
      return state;
    },
    getConfig: function () {
      var assessmentConfig = this.get('_assessment');

      if (!assessmentConfig) {
        assessmentConfig = $.extend(true, {}, assessmentConfigDefaults);
      } else {
        assessmentConfig = $.extend(true, {}, assessmentConfigDefaults, assessmentConfig);
      }

      if (assessmentConfig._id === undefined) {
        assessmentConfig._id = 'givenId' + givenIdCount++;
      }

      this.set('_assessment', assessmentConfig);
      return assessmentConfig;
    }
  };
  var AdaptAssessmentArticleModel = __AMD("extensions/adapt-contrib-assessment/js/adapt-assessmentArticleModel", AssessmentModel);

  var assessmentsConfigDefaults = {
    _isPercentageBased: true,
    _scoreToPass: 100,
    _isDefaultsLoaded: true
  };

  var Assessment = function (_Backbone$Controller) {
    _inherits(Assessment, _Backbone$Controller);

    var _super = _createSuper(Assessment);

    function Assessment() {
      _classCallCheck(this, Assessment);

      return _super.apply(this, arguments);
    }

    _createClass(Assessment, [{
      key: "initialize",
      value: function initialize() {
        this._assessments = Object.assign([], {
          _byPageId: {},
          _byAssessmentId: {}
        });
        this.listenTo(Adapt$1, {
          'assessments:complete': this._onAssessmentsComplete,
          'router:location': this._checkResetAssessmentsOnRevisit,
          'router:plugin': this._handleRoute,
          'app:dataReady': this._onDataReady
        });
      }
    }, {
      key: "_onAssessmentsComplete",
      value: function _onAssessmentsComplete(state) {
        var assessmentId = state.id;
        state.isComplete = true;
        if (assessmentId === undefined) return;

        if (!this._getStateByAssessmentId(assessmentId)) {
          logging$1.warn('assessments: state was not registered when assessment was created');
        }

        this.saveState();

        this._setPageProgress();

        this._checkAssessmentsComplete();
      }
    }, {
      key: "_restoreModelState",
      value: function _restoreModelState(assessmentModel) {
        if (!this._saveStateModel) {
          this._saveStateModel = offlineStorage$1.get('a');
        }

        if (this._saveStateModel) {
          var state = assessmentModel.getState();

          if (this._saveStateModel[state.id]) {
            assessmentModel.setRestoreState(offlineStorage$1.deserialize(this._saveStateModel[state.id]));
          }
        }
      }
    }, {
      key: "_handleRoute",
      value: function _handleRoute(plugin, id) {
        if (plugin !== 'assessment' && plugin !== 'article-assessment' || id === undefined) {
          return;
        }

        if (!data$1.findById(id)) {
          var assessment = Adapt$1.assessment._assessments._byAssessmentId[id];

          if (assessment) {
            id = assessment.get('_id');
          } else {
            logging$1.warn('Assessment not found with _id: ' + id);
            return;
          }
        }

        _.defer(function () {
          Backbone.history.navigate('#/id/' + id, {
            trigger: true,
            replace: true
          });
        });
      }
    }, {
      key: "_checkResetAssessmentsOnRevisit",
      value: function _checkResetAssessmentsOnRevisit(toObject) {
        if (toObject._contentType !== 'page') return;

        var pageAssessmentModels = this._getAssessmentByPageId(toObject._currentId);

        if (pageAssessmentModels === undefined) return;
        wait$1.for(function resetAllAssessments(allAssessmentHaveReset) {
          var numberOfAssessments = pageAssessmentModels.length;
          var numberOfResetAssessments = 0;
          var forceAssessmentReset = false;
          pageAssessmentModels.forEach(function (model) {
            model.reset(forceAssessmentReset, function () {
              numberOfResetAssessments++;
              var haveAllModelsReset = numberOfResetAssessments === numberOfAssessments;

              if (!haveAllModelsReset) {
                return;
              }

              allAssessmentHaveReset();
            });
          });
        });

        this._setPageProgress();
      }
    }, {
      key: "_onDataReady",
      value: function _onDataReady() {
        this._assessments = Object.assign([], {
          _byPageId: {},
          _byAssessmentId: {}
        });
        this._restoredCount = 0;
      }
    }, {
      key: "_checkAssessmentsComplete",
      value: function _checkAssessmentsComplete() {
        var _this = this;

        var allAssessmentsComplete = true;
        var assessmentToPostBack = 0;

        var states = this._getStatesByAssessmentId();

        var assessmentStates = [];

        for (var id in states) {
          var state = states[id];
          if (!state.includeInTotalScore) continue;

          if (!state.isComplete) {
            allAssessmentsComplete = false;
            break;
          }

          assessmentToPostBack++;
          assessmentStates.push(state);
        }

        if (!allAssessmentsComplete || assessmentToPostBack === 0) return false;

        if (assessmentToPostBack === 1) {
          this._setupSingleAssessmentConfiguration(assessmentStates[0]);
        }

        _.defer(function () {
          return Adapt$1.trigger('assessment:complete', _this.getState());
        });

        return true;
      }
    }, {
      key: "_setupSingleAssessmentConfiguration",
      value: function _setupSingleAssessmentConfiguration(assessmentState) {
        var assessmentsConfig = Adapt$1.course.get('_assessment');
        $.extend(true, assessmentsConfig, {
          _isPercentageBased: assessmentState.isPercentageBased,
          _scoreToPass: assessmentState.scoreToPass
        });
        Adapt$1.course.set('_assessment', assessmentsConfig);
      }
    }, {
      key: "_getAssessmentByPageId",
      value: function _getAssessmentByPageId(pageId) {
        return this._assessments._byPageId[pageId];
      }
    }, {
      key: "_getStateByAssessmentId",
      value: function _getStateByAssessmentId(assessmentId) {
        if (assessmentId === undefined) {
          return null;
        }

        return this._assessments._byAssessmentId[assessmentId].getState();
      }
    }, {
      key: "_getStatesByAssessmentId",
      value: function _getStatesByAssessmentId() {
        var states = {};

        var _iterator = _createForOfIteratorHelper(this._assessments),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var assessmentModel = _step.value;
            if (!assessmentModel.get('_isAvailable')) continue;
            var state = assessmentModel.getState();
            states[state.id] = state;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return states;
      }
    }, {
      key: "_setPageProgress",
      value: function _setPageProgress() {
        for (var _i = 0, _Object$entries = Object.entries(this._assessments._byPageId); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
              id = _Object$entries$_i[0],
              assessments = _Object$entries$_i[1];

          var assessmentsTotal = assessments.length;
          var assessmentsPassed = 0;

          var _iterator2 = _createForOfIteratorHelper(assessments),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var assessment = _step2.value;
              var assessmentState = assessment.getState();
              if (assessmentState.includeInTotalScore && !assessmentState.isPass) continue;

              if (assessmentState.isComplete) {
                assessmentsPassed++;
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          var pageModel = data$1.findById(id);
          pageModel === null || pageModel === void 0 ? void 0 : pageModel.set({
            _subProgressTotal: assessmentsTotal,
            _subProgressComplete: assessmentsPassed
          });
        }
      }
    }, {
      key: "_addToAssessmentIdMap",
      value: function _addToAssessmentIdMap(id, model) {
        if (id === undefined) {
          logging$1.warn('An assessment has been registered with an undefined value for "_id"');
          return;
        }

        if (id === '') {
          logging$1.warn('An assessment has been registered with an empty value for "_id"');
        }

        if (!this._assessments._byAssessmentId[id]) {
          this._assessments._byAssessmentId[id] = model;
        } else {
          logging$1.warn('An assessment with an _id of "' + id + '" already exists!');
        }
      }
    }, {
      key: "_setupQuestionNumbering",
      value: function _setupQuestionNumbering() {
        var getRelatedQuestions = function (data) {
          var currentAssessmentId = data._assessmentId;
          var currentAssessment = Adapt$1.assessment.get(currentAssessmentId);
          return currentAssessment.getState().questions;
        };

        Handlebars.registerHelper('questionNumber', function getQuestionNumber() {
          var _this$view;

          var data = ((_this$view = this.view) === null || _this$view === void 0 ? void 0 : _this$view.model.toJSON()) || this;
          if (!data._isPartOfAssessment) return;

          var related = _.pluck(getRelatedQuestions(data), '_id');

          return related.indexOf(data._id) + 1;
        });
        Handlebars.registerHelper('questionCount', function getTotalQuestions() {
          var data = this.view ? this.view.model.toJSON() : this;
          if (!data._isPartOfAssessment) return;
          return getRelatedQuestions(data).length;
        });
      }
    }, {
      key: "register",
      value: function register(assessmentModel) {
        var state = assessmentModel.getState();
        var assessmentId = state.id;
        var pageId = state.pageId;

        if (this._assessments._byPageId[pageId] === undefined) {
          this._assessments._byPageId[pageId] = [];
        }

        this._assessments._byPageId[pageId].push(assessmentModel);

        this._addToAssessmentIdMap(assessmentId, assessmentModel);

        this._assessments.push(assessmentModel);

        this._restoreModelState(assessmentModel);

        this._restoredCount++;
        Adapt$1.trigger('assessments:register', state, assessmentModel);

        this._setPageProgress();

        this._setupQuestionNumbering();

        if (this._restoredCount === this._assessments.length) {
          Adapt$1.trigger('assessment:restored', this.getState());
        }
      }
    }, {
      key: "get",
      value: function get(id) {
        return id === undefined ? this._assessments.slice(0) : this._assessments._byAssessmentId[id];
      }
    }, {
      key: "saveState",
      value: function saveState() {
        this._saveStateModel = {};

        var _iterator3 = _createForOfIteratorHelper(this._assessments),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var assessmentModel = _step3.value;
            var state = assessmentModel.getState();
            this._saveStateModel[state.id] = offlineStorage$1.serialize(assessmentModel.getSaveState());
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        offlineStorage$1.set('a', this._saveStateModel);
      }
    }, {
      key: "getConfig",
      value: function getConfig() {
        var _assessmentsConfig;

        var assessmentsConfig = Adapt$1.course.get('_assessment');

        if ((_assessmentsConfig = assessmentsConfig) !== null && _assessmentsConfig !== void 0 && _assessmentsConfig._isDefaultsLoaded) {
          return assessmentsConfig;
        }

        if (assessmentsConfig === undefined) {
          assessmentsConfig = $.extend(true, {}, assessmentsConfigDefaults);
        } else {
          assessmentsConfig = $.extend(true, {}, assessmentsConfigDefaults, assessmentsConfig);
        }

        Adapt$1.course.set('_assessment', assessmentsConfig);
        return assessmentsConfig;
      }
    }, {
      key: "getState",
      value: function getState() {
        var assessmentsConfig = this.getConfig();
        var score = 0;
        var maxScore = 0;
        var minScore = 0;
        var correctCount = 0;
        var questionCount = 0;
        var assessments = 0;

        var states = this._getStatesByAssessmentId();

        var assessmentsComplete = 0;

        for (var id in states) {
          var state = states[id];
          if (!state.includeInTotalScore) continue;
          if (state.isComplete) assessmentsComplete++;
          assessments++;
          maxScore += state.maxScore / state.assessmentWeight;
          minScore += state.minScore / state.assessmentWeight;
          score += state.score / state.assessmentWeight;
          correctCount += state.correctCount / state.assessmentWeight;
          questionCount += state.questionCount / state.assessmentWeight;
        }

        var isComplete = assessmentsComplete === assessments;
        var scoreRange = maxScore - minScore;
        var scoreAsPercent = scoreRange === 0 ? 0 : Math.round((score - minScore) / scoreRange * 100);
        var correctAsPercent = questionCount === 0 ? 0 : Math.round(correctCount / questionCount * 100);

        if (assessmentsConfig._correctToPass === undefined) {
          logging$1.warnOnce('Assessment course config is missing _correctToPass');
        }

        var scoreToPass = assessmentsConfig._scoreToPass;
        var correctToPass = assessmentsConfig._correctToPass || scoreToPass;
        var isPercentageBased = assessmentsConfig._isPercentageBased;
        var isPass = isComplete && (isPercentageBased ? scoreAsPercent >= scoreToPass && correctAsPercent >= correctToPass : score >= scoreToPass && correctCount >= correctToPass);
        var canRetry = Object.values(states).some(function (state) {
          var isFailed = !state.isPass;
          var hasAttemptsLeft = state.attemptsLeft > 0 || state.attemptsLeft === 'infinite';
          return isFailed && hasAttemptsLeft;
        });
        return {
          isComplete: isComplete,
          isPercentageBased: isPercentageBased,
          isPass: isPass,
          maxScore: maxScore,
          minScore: minScore,
          score: score,
          scoreToPass: scoreToPass,
          scoreAsPercent: scoreAsPercent,
          correctCount: correctCount,
          correctAsPercent: correctAsPercent,
          correctToPass: correctToPass,
          questionCount: questionCount,
          assessmentsComplete: assessmentsComplete,
          assessments: assessments,
          canRetry: canRetry
        };
      }
    }]);

    return Assessment;
  }(Backbone.Controller);

  __AMD("extensions/adapt-contrib-assessment/js/assessment", Adapt$1.assessment = new Assessment());

  var ArticleViewInitialize = ArticleView$1.prototype.initialize;

  ArticleView$1.prototype.initialize = function (options) {
    var _this$model$get;

    if (((_this$model$get = this.model.get('_assessment')) === null || _this$model$get === void 0 ? void 0 : _this$model$get._isEnabled) === true) {
      Object.assign(this, AdaptAssessmentArticleView);
    }

    return ArticleViewInitialize.apply(this, arguments);
  };

  var ArticleModelInitialize = ArticleModel$1.prototype.initialize;

  ArticleModel$1.prototype.initialize = function (options) {
    var _this$get;

    if (((_this$get = this.get('_assessment')) === null || _this$get === void 0 ? void 0 : _this$get._isEnabled) === true) {
      Object.assign(this, AdaptAssessmentArticleModel);
      var returnValue = ArticleModelInitialize.apply(this, arguments);

      this._postInitialize();

      return returnValue;
    }

    return ArticleModelInitialize.apply(this, arguments);
  };

  var Bookmarking = function (_Backbone$Controller) {
    _inherits(Bookmarking, _Backbone$Controller);

    var _super = _createSuper(Bookmarking);

    function Bookmarking() {
      _classCallCheck(this, Bookmarking);

      return _super.apply(this, arguments);
    }

    _createClass(Bookmarking, [{
      key: "initialize",
      value: function initialize() {
        this.bookmarkLevel = null;
        this.restoredLocationID = null;
        this.currentLocationID = null;
        this.listenToOnce(Adapt$1, 'router:location', this.onAdaptInitialize);
      }
    }, {
      key: "onAdaptInitialize",
      value: function onAdaptInitialize() {
        if (!this.checkCourseIsEnabled()) return;
        this.setupEventListeners();
        this.checkRestoreLocation();
      }
    }, {
      key: "checkCourseIsEnabled",
      value: function checkCourseIsEnabled() {
        var courseBookmarkModel = Adapt$1.course.get('_bookmarking');
        if (!courseBookmarkModel || !courseBookmarkModel._isEnabled) return false;
        return true;
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        this._onScroll = _.debounce(this.checkLocation.bind(this), 250);
        this.listenTo(Adapt$1, {
          'menuView:ready': this.setupMenu,
          'pageView:preRender': this.setupPage,
          'view:childAdded': this.checkLocation
        });
      }
    }, {
      key: "checkRestoreLocation",
      value: function checkRestoreLocation() {
        this.restoredLocationID = offlineStorage$1.get('location');

        if (!this.restoredLocationID || this.restoredLocationID === 'undefined' || !data$1.findById(this.restoredLocationID)) {
          return;
        }

        this.listenToOnce(Adapt$1, 'pageView:ready menuView:ready', this.restoreLocation);
      }
    }, {
      key: "restoreLocation",
      value: function restoreLocation() {
        var _this = this;

        this.stopListening(Adapt$1, 'pageView:ready menuView:ready', this.restoreLocation);

        _.delay(function () {
          if (_this.isAlreadyOnScreen(_this.restoredLocationID)) {
            return;
          }

          if (Adapt$1.course.get('_bookmarking')._showPrompt === false) {
            _this.navigateToPrevious();

            return;
          }

          _this.showPrompt();
        }, 500);
      }
    }, {
      key: "isAlreadyOnScreen",
      value: function isAlreadyOnScreen(id) {
        if (id === location$1._currentId) return true;
        var type = data$1.findById(id).getTypeGroup();

        if (type === 'menu' || type === 'page') {
          return false;
        }

        var locationOnscreen = $('.' + id).onscreen();
        var isLocationOnscreen = locationOnscreen && locationOnscreen.percentInview > 0;
        var isLocationFullyInview = locationOnscreen && locationOnscreen.percentInview === 100;

        if (isLocationOnscreen && isLocationFullyInview) {
          return true;
        }

        return false;
      }
    }, {
      key: "showPrompt",
      value: function showPrompt() {
        var courseBookmarkModel = Adapt$1.course.get('_bookmarking');
        var buttons = courseBookmarkModel._buttons || {
          yes: 'Yes',
          no: 'No'
        };
        this.listenToOnce(Adapt$1, {
          'bookmarking:continue': this.navigateToPrevious,
          'bookmarking:cancel': this.navigateCancel
        });
        notify$1.prompt({
          _classes: 'is-bookmarking',
          _showIcon: true,
          title: courseBookmarkModel.title,
          body: courseBookmarkModel.body,
          _prompts: [{
            promptText: buttons.yes || 'Yes',
            _callbackEvent: 'bookmarking:continue'
          }, {
            promptText: buttons.no || 'No',
            _callbackEvent: 'bookmarking:cancel'
          }]
        });
      }
    }, {
      key: "navigateToPrevious",
      value: function navigateToPrevious() {
        var _this2 = this;

        _.defer(_asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          var isSinglePage;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  isSinglePage = Adapt$1.contentObjects.models.length === 1;
                  _context.prev = 1;
                  _context.next = 4;
                  return router$1.navigateToElement(_this2.restoredLocationID, {
                    trigger: true,
                    replace: isSinglePage,
                    duration: 400
                  });

                case 4:
                  _context.next = 9;
                  break;

                case 6:
                  _context.prev = 6;
                  _context.t0 = _context["catch"](1);
                  logging$1.warn("Bookmarking cannot navigate to id: ".concat(_this2.restoredLocationID, "\n"), _context.t0);

                case 9:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[1, 6]]);
        })));

        this.stopListening(Adapt$1, 'bookmarking:cancel');
      }
    }, {
      key: "navigateCancel",
      value: function navigateCancel() {
        this.stopListening(Adapt$1, 'bookmarking:continue');
      }
    }, {
      key: "resetLocationID",
      value: function resetLocationID() {
        this.setLocationID('');
      }
    }, {
      key: "setupMenu",
      value: function setupMenu(menuView) {
        var menuModel = menuView.model;

        if (!menuModel.get('_parentId')) {
          this.resetLocationID();
          return;
        }

        this.setLocationID(menuModel.get('_id'));
      }
    }, {
      key: "getBookmarkLevel",
      value: function getBookmarkLevel(pageModel) {
        var defaultLevel = Adapt$1.course.get('_bookmarking')._level || 'component';
        var bookmarkModel = pageModel.get('_bookmarking');
        var isInherit = !bookmarkModel || !bookmarkModel._level || bookmarkModel._level === 'inherit';
        return isInherit ? defaultLevel : bookmarkModel._level;
      }
    }, {
      key: "setupPage",
      value: function setupPage(pageView) {
        var pageBookmarkModel = pageView.model.get('_bookmarking');

        if ((pageBookmarkModel === null || pageBookmarkModel === void 0 ? void 0 : pageBookmarkModel._isEnabled) === false) {
          this.resetLocationID();
          return;
        }

        this.setLocationID(pageView.model.get('_id'));
        this.bookmarkLevel = this.getBookmarkLevel(pageView.model);

        if (this.bookmarkLevel === 'page') {
          return;
        }

        this.listenToOnce(Adapt$1, 'remove', this.releaseViews);
        $(window).on('scroll', this._onScroll);
      }
    }, {
      key: "setLocationID",
      value: function setLocationID(id) {
        if (this.currentLocationID === id) return;
        offlineStorage$1.set('location', id);
        this.currentLocationID = id;
      }
    }, {
      key: "releaseViews",
      value: function releaseViews() {
        this.stopListening(Adapt$1, 'remove', this.releaseViews);
        $(window).off('scroll', this._onScroll);
      }
    }, {
      key: "checkLocation",
      value: function checkLocation() {
        var _Adapt$parentView, _Adapt$parentView$mod;

        var contentObjectBookmarkModel = (_Adapt$parentView = Adapt$1.parentView) === null || _Adapt$parentView === void 0 ? void 0 : (_Adapt$parentView$mod = _Adapt$parentView.model) === null || _Adapt$parentView$mod === void 0 ? void 0 : _Adapt$parentView$mod.get('_bookmarking');

        if ((contentObjectBookmarkModel === null || contentObjectBookmarkModel === void 0 ? void 0 : contentObjectBookmarkModel._isEnabled) === false) {
          this.resetLocationID();
          return;
        }

        var currentModel = location$1._currentModel;
        if (!currentModel || !this.bookmarkLevel) return;
        var possibleViewIds = currentModel.findDescendantModels(this.bookmarkLevel).filter(function (desc) {
          return desc.get('_isTrackable') !== false;
        }).map(function (desc) {
          return desc.get('_id');
        });
        var highestOnscreen = 0;
        var highestOnscreenLocation = '';
        possibleViewIds.forEach(function (id) {
          var element = $("[data-adapt-id=".concat(id, "]"));
          if (!element.length) return;
          var measurements = element.onscreen();
          if (!measurements.onscreen) return;
          if (measurements.percentInview <= highestOnscreen) return;
          highestOnscreen = measurements.percentInview;
          highestOnscreenLocation = id;
        });
        if (highestOnscreenLocation) this.setLocationID(highestOnscreenLocation);
      }
    }]);

    return Bookmarking;
  }(Backbone.Controller);

  __AMD("extensions/adapt-contrib-bookmarking/js/adapt-contrib-bookmarking", new Bookmarking());

  var GlossaryItemView = __AMD("extensions/adapt-contrib-glossary/js/adapt-contrib-glossaryItemView", function (_Backbone$View) {
    _inherits(GlossaryItemView, _Backbone$View);

    var _super = _createSuper(GlossaryItemView);

    function GlossaryItemView() {
      _classCallCheck(this, GlossaryItemView);

      return _super.apply(this, arguments);
    }

    _createClass(GlossaryItemView, [{
      key: "className",
      value: function className() {
        return 'glossary__item';
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          role: 'listitem'
        };
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-glossary-item-term-click': 'onGlossaryItemClicked'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt$1, {
          'remove drawer:closed': this.remove,
          'glossary:descriptionOpen': this.descriptionOpen
        });
        this.setupModel();
        this.listenTo(this.model, 'change:_isVisible', this.onGlossaryItemVisibilityChange);
        this.render();
      }
    }, {
      key: "setupModel",
      value: function setupModel() {
        this.model.set({
          _isVisible: true,
          _isDescriptionOpen: false
        });
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates.glossaryItem;
        this.$el.html(template(this.model.toJSON()));

        _.defer(this.postRender.bind(this));

        return this;
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.listenTo(Adapt$1, {
          'drawer:openedItemView': this.remove,
          'drawer:triggerCustomView': this.remove
        });
      }
    }, {
      key: "onGlossaryItemClicked",
      value: function onGlossaryItemClicked(event) {
        event && event.preventDefault();
        Adapt$1.trigger('glossary:descriptionOpen', this.model.cid);
      }
    }, {
      key: "toggleGlossaryItemDescription",
      value: function toggleGlossaryItemDescription() {
        if (this.model.get('_isDescriptionOpen')) {
          this.hideGlossaryItemDescription();
          return;
        }

        this.showGlossaryItemDescription();
      }
    }, {
      key: "showGlossaryItemDescription",
      value: function showGlossaryItemDescription() {
        var $glossaryItemTerm = this.$('.js-glossary-item-term-click');
        var $description = $glossaryItemTerm.addClass('is-selected').siblings('.js-glossary-item-description').slideDown(200, function () {
          a11y$1.focusFirst($description, {
            defer: true
          });
        });
        $glossaryItemTerm.attr('aria-expanded', true);
        this.model.set('_isDescriptionOpen', true);
        $('.js-drawer-holder').animate({
          scrollTop: $glossaryItemTerm.position().top
        });
      }
    }, {
      key: "hideGlossaryItemDescription",
      value: function hideGlossaryItemDescription() {
        this.$('.js-glossary-item-description').stop(true, true).slideUp(200);
        this.model.set('_isDescriptionOpen', false);
        this.$('.js-glossary-item-term-click').removeClass('is-selected').attr('aria-expanded', false);
      }
    }, {
      key: "descriptionOpen",
      value: function descriptionOpen(viewId) {
        if (viewId === this.model.cid) {
          this.toggleGlossaryItemDescription();
          return;
        }

        if (!this.model.get('_isDescriptionOpen')) return;
        this.hideGlossaryItemDescription();
      }
    }, {
      key: "onGlossaryItemVisibilityChange",
      value: function onGlossaryItemVisibilityChange() {
        if (this.model.get('_isDescriptionOpen')) {
          this.hideGlossaryItemDescription();
        }

        this.$el.toggleClass('u-display-none', !this.model.get('_isVisible'));
      }
    }]);

    return GlossaryItemView;
  }(Backbone.View));

  var GlossaryView = __AMD("extensions/adapt-contrib-glossary/js/adapt-contrib-glossaryView", function (_Backbone$View) {
    _inherits(GlossaryView, _Backbone$View);

    var _super = _createSuper(GlossaryView);

    function GlossaryView() {
      _classCallCheck(this, GlossaryView);

      return _super.apply(this, arguments);
    }

    _createClass(GlossaryView, [{
      key: "className",
      value: function className() {
        return 'glossary';
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'keyup .js-glossary-textbox-change': 'onInputTextBoxValueChange',
          'input .js-glossary-textbox-change': 'onInputTextBoxValueChange',
          'paste .js-glossary-textbox-change': 'onInputTextBoxValueChange',
          'change .js-glossary-checkbox-change': 'onInputTextBoxValueChange',
          'click .js-glossary-cancel-btn-click': 'onCancelButtonClick'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.itemViews = null;
        this.prevScrollPos = 0;
        this.isSearchActive = false;
        this.listenTo(Adapt$1, 'remove drawer:closed', this.remove);
        this.setupModel();
        this.onScroll = _.debounce(this.onScroll.bind(this), 200);
        this.onInputTextBoxValueChange = _.debounce(this.onInputTextBoxValueChange.bind(this), 200);

        _.defer(this.render.bind(this));
      }
    }, {
      key: "checkForTermToShow",
      value: function checkForTermToShow() {
        var term = this.$el.data('termtoshow');
        if (!term) return;

        var _iterator = _createForOfIteratorHelper(this.itemViews),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var model = _step.value.model;
            if (model.get('term').toLowerCase() !== term.toLowerCase()) continue;
            Adapt$1.trigger('glossary:descriptionOpen', model.cid);
            break;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "remove",
      value: function remove() {
        this.itemViews = null;
        Backbone.View.prototype.remove.apply(this, arguments);
      }
    }, {
      key: "setupModel",
      value: function setupModel() {
        this.arrangeGlossaryItemsToAscendingOrder();
        this.groupGlossaryItems();
      }
    }, {
      key: "arrangeGlossaryItemsToAscendingOrder",
      value: function arrangeGlossaryItemsToAscendingOrder() {
        var caseInsensitiveComparator = function (model1, model2) {
          return model1.get('term').toLowerCase().localeCompare(model2.get('term').toLowerCase());
        };

        this.collection.comparator = caseInsensitiveComparator;
        this.collection.sort();
      }
    }, {
      key: "groupGlossaryItems",
      value: function groupGlossaryItems() {
        if (this.model.get('_isIndexEnabled')) {
          this.model.set('_isGroupHeadersEnabled', true);
        }

        if (!this.model.get('_isGroupHeadersEnabled')) return;
        var groups = this.collection.groupBy(function (model) {
          return model.get('term').charAt(0).toLocaleUpperCase();
        });
        this.collection._byChar0 = groups;
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates.glossary;
        this.$el.html(template(this.model.toJSON()));

        if (this.model.get('_isIndexEnabled')) {
          this.renderIndexHeader();
        }

        if (this.model.get('_isGroupHeadersEnabled')) {
          this.renderGlossaryItemsWithHeaders();
        } else {
          this.renderGlossaryItems();
        }

        _.defer(this.postRender.bind(this));

        return this;
      }
    }, {
      key: "renderIndexHeader",
      value: function renderIndexHeader() {
        var $glossaryIndex = this.$('.js-glossary-index-container').empty();
        Object.entries(this.collection._byChar0).forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              key = _ref2[0],
              group = _ref2[1];

          var template = Handlebars.templates.glossaryIndexItem;
          $glossaryIndex.append(template({
            _key: key,
            _group: group
          }));
        });
        this.prevScrollPos = $('.js-drawer-holder').scrollTop();
        $('.js-drawer-holder').on('scroll', this.onScroll);
        this.$('.js-glossary-index-link').on('click', this.scrollToPosition);
      }
    }, {
      key: "onScroll",
      value: function onScroll() {
        var currentScrollPos = $('.js-drawer-holder').scrollTop();
        var indexDisplay = this.$('.js-glossary-index-container').css('display');
        var isIndexVisible = indexDisplay !== 'none';

        if (!isIndexVisible) {
          this.prevScrollPos = currentScrollPos;
          return;
        }

        if (this.prevScrollPos > currentScrollPos) {
          this.$('.js-glossary-index-container').addClass('scrolling-up').removeClass('scrolling-down');
          var indexOuterHeight = this.$('.js-glossary-index-container').outerHeight(true);
          this.$('.js-glossary-items-container').css('top', indexOuterHeight + 'px');
          return;
        }

        this.$('.js-glossary-index-container').addClass('scrolling-down').removeClass('scrolling-up');
        this.$('.js-glossary-items-container').css('top', '0');
        this.prevScrollPos = currentScrollPos;
      }
    }, {
      key: "scrollToPosition",
      value: function scrollToPosition(event) {
        if (event && event.preventDefault) event.preventDefault();
        var selector = $(event.currentTarget).attr('href');
        var $target = $(selector);
        $('.js-drawer-holder').animate({
          scrollTop: $target.position().top
        });
      }
    }, {
      key: "renderGlossaryItemsWithHeaders",
      value: function renderGlossaryItemsWithHeaders() {
        var _this = this;

        this.itemViews = [];
        var $glossaryItemContainer = this.$('.js-glossary-items-container').empty();
        Object.entries(this.collection._byChar0).forEach(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
              key = _ref4[0],
              group = _ref4[1];

          var $glossaryItemsGroupContainer = $('<div>', {
            class: 'glossary__items-group',
            role: 'list',
            'aria-labelledby': key
          });
          var $glossaryItemsGroupHeader = $('<div>', {
            id: key,
            class: 'glossary__items-group-header js-glossary-items-group-header',
            text: key
          });
          $glossaryItemsGroupContainer.append($glossaryItemsGroupHeader);

          _this.createItemViews(group, $glossaryItemsGroupContainer);

          $glossaryItemContainer.append($glossaryItemsGroupContainer);
        });
      }
    }, {
      key: "renderGlossaryItems",
      value: function renderGlossaryItems() {
        this.itemViews = [];
        var $glossaryItemContainer = this.$('.js-glossary-items-container').empty();
        this.createItemViews(this.collection.models, $glossaryItemContainer);
      }
    }, {
      key: "createItemViews",
      value: function createItemViews(models, $container) {
        var _this2 = this;

        models.forEach(function (item) {
          var itemView = new GlossaryItemView({
            model: item
          });
          itemView.$el.appendTo($container);

          _this2.itemViews.push(itemView);
        });
      }
    }, {
      key: "postRender",
      value: function postRender() {
        var widthExclScrollbar = $('.drawer').prop('clientWidth');
        $('.drawer__toolbar').css({
          width: widthExclScrollbar + 'px',
          'z-index': '2'
        });
        this.listenTo(Adapt$1, {
          'drawer:openedItemView': this.remove,
          'drawer:triggerCustomView': this.remove
        });
        this.configureContainers();
        this.checkForTermToShow();
      }
    }, {
      key: "configureContainers",
      value: function configureContainers() {
        var isSearchEnabled = this.model.get('_isSearchEnabled');
        var isIndexEnabled = this.model.get('_isIndexEnabled');
        var glossaryWidth = this.$('.js-glossary-inner').width();
        var searchOuterHeight = this.$('.js-glossary-search-container').outerHeight(true);

        if (isSearchEnabled) {
          this.$('.js-glossary-search-container').css('width', glossaryWidth);
          this.$('.js-glossary-item-not-found').css('top', searchOuterHeight + 'px');
        }

        if (isIndexEnabled) {
          this.$('.js-glossary-index-container').css('margin-top', searchOuterHeight).css('width', glossaryWidth);
        }

        if (isSearchEnabled && !isIndexEnabled) {
          this.$('.js-glossary-items-container').css('top', searchOuterHeight + 'px');
        }

        if (isSearchEnabled && isIndexEnabled) {
          this.$('.js-glossary-items-container').css('top', 'unset');
        }

        if (this.isSearchActive && isIndexEnabled) {
          this.$('.js-glossary-items-container').css('top', searchOuterHeight);
        }
      }
    }, {
      key: "onInputTextBoxValueChange",
      value: function onInputTextBoxValueChange() {
        this.showItemNotFoundMessage(false);
        this.isSearchActive = true;
        var searchItem = this.$('.js-glossary-textbox-change').val().toLowerCase();
        var shouldSearchInDescription = this.$('.js-glossary-checkbox-change').is(':checked');
        var searchItemsAlert = this.model.get('searchItemsAlert') || '';
        var searchResults = searchItem.length > 0;
        this.$('.js-glossary-cancel-btn-click').toggleClass('u-display-none', !searchResults);
        this.$('.js-glossary-search-icon').addClass('u-display-none', searchResults);
        this.toggleHeaders(searchResults);

        if (searchResults) {
          var filteredItems = this.getFilteredGlossaryItems(searchItem, shouldSearchInDescription);
          this.$('.js-glossary-alert').html(Handlebars.compile(searchItemsAlert)({
            filteredItems: filteredItems
          }));
          this.showFilterGlossaryItems(filteredItems);
        } else {
          this.isSearchActive = false;
          this.showGlossaryItems(true);
        }

        this.configureContainers();
        $('.js-drawer-holder').animate({
          scrollTop: '0'
        });
      }
    }, {
      key: "toggleHeaders",
      value: function toggleHeaders(isHidden) {
        if (this.model.get('_isIndexEnabled')) {
          this.$('.js-glossary-index-container').toggleClass('u-display-none', isHidden);
        }

        if (!this.model.get('_isGroupHeadersEnabled')) return;
        this.$('.js-glossary-items-group-header').toggleClass('u-display-none', isHidden);
      }
    }, {
      key: "onCancelButtonClick",
      value: function onCancelButtonClick(event) {
        if (event && event.preventDefault) event.preventDefault();
        this.isSearchActive = false;
        var $input = this.$('.js-glossary-textbox-change');
        $input.val('').trigger('input');

        _.defer(function () {
          return $input.focus();
        });
      }
    }, {
      key: "getFilteredGlossaryItems",
      value: function getFilteredGlossaryItems(searchItem, shouldSearchInDescription) {
        var terms = searchItem.split(' ');
        return this.collection.filter(function (model) {
          return terms.every(function (term) {
            var title = model.get('term').toLowerCase();
            var description = model.get('description').toLowerCase();
            return shouldSearchInDescription ? title.indexOf(term) !== -1 || description.indexOf(term) !== -1 : title.indexOf(term) !== -1;
          });
        });
      }
    }, {
      key: "showFilterGlossaryItems",
      value: function showFilterGlossaryItems(filteredItems) {
        this.showGlossaryItems(false);

        if (filteredItems.length > 0) {
          filteredItems.forEach(function (item) {
            return item.set('_isVisible', true);
          });
          return;
        }

        this.showItemNotFoundMessage(true);
      }
    }, {
      key: "showItemNotFoundMessage",
      value: function showItemNotFoundMessage(_isVisible) {
        this.$('.js-glossary-item-not-found').toggleClass('u-display-none', !_isVisible);
      }
    }, {
      key: "showGlossaryItems",
      value: function showGlossaryItems(_isVisible) {
        this.collection.forEach(function (model) {
          return model.set('_isVisible', _isVisible);
        });
      }
    }]);

    return GlossaryView;
  }(Backbone.View));

  function setupGlossary(glossaryModel, glossaryItems) {
    var options = {
      model: new Backbone.Model(glossaryModel),
      collection: new Backbone.Collection(glossaryItems)
    };
    Adapt$1.on('glossary:showGlossary', function () {
      drawer.triggerCustomView(new GlossaryView(options).$el);
    });
    $('body').on('click.glossary', 'a[data-glossaryterm]', function (e) {
      if (e) e.preventDefault();

      var newOptions = _objectSpread2(_objectSpread2({}, options), {}, {
        attributes: {
          'data-termtoshow': e.currentTarget.getAttribute('data-glossaryterm')
        }
      });

      drawer.triggerCustomView(new GlossaryView(newOptions).$el);
    });
  }

  function initGlossary() {
    var courseGlossary = Adapt$1.course.get('_glossary');

    if (!courseGlossary || !courseGlossary._isEnabled) {
      return;
    }

    var drawerObject = {
      title: courseGlossary.title,
      description: courseGlossary.description,
      className: 'is-glossary',
      drawerOrder: courseGlossary._drawerOrder || 0
    };
    drawer.addItem(drawerObject, 'glossary:showGlossary');
    setupGlossary(courseGlossary, courseGlossary._glossaryItems);
  }

  Adapt$1.on('app:dataReady', initGlossary);

  var NavigationView = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerNavigationView", function (_Backbone$View) {
    _inherits(NavigationView, _Backbone$View);

    var _super = _createSuper(NavigationView);

    function NavigationView() {
      _classCallCheck(this, NavigationView);

      return _super.apply(this, arguments);
    }

    _createClass(NavigationView, [{
      key: "className",
      value: function className() {
        return 'nav';
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          role: 'navigation'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.template = 'languagePickerNavigation';
        this.setupHelpers();
        this.preRender();
      }
    }, {
      key: "preRender",
      value: function preRender() {
        Adapt$1.trigger('navigationView:preRender', this);
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var template = Handlebars.templates[this.template];
        this.$el.html(template({
          _config: this.model.get('_accessibility'),
          _accessibility: Adapt$1.config.get('_accessibility')
        })).insertBefore('#app');

        _.defer(function () {
          return Adapt$1.trigger('navigationView:postRender', _this);
        });

        return this;
      }
    }, {
      key: "setupHelpers",
      value: function setupHelpers() {
        Handlebars.registerHelper('a11y_aria_label', function (text) {
          return "<div class=\"aria-label\">".concat(text, "</div>");
        });
      }
    }]);

    return NavigationView;
  }(Backbone.View));

  var LanguagePickerView = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerView", function (_Backbone$View) {
    _inherits(LanguagePickerView, _Backbone$View);

    var _super = _createSuper(LanguagePickerView);

    function LanguagePickerView() {
      _classCallCheck(this, LanguagePickerView);

      return _super.apply(this, arguments);
    }

    _createClass(LanguagePickerView, [{
      key: "template",
      get: function () {
        return 'languagePickerView';
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-languagepicker-btn-click': 'onLanguageClick'
        };
      }
    }, {
      key: "className",
      value: function className() {
        return 'languagepicker';
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.initializeNavigation();
        $('html').addClass('in-languagepicker');
        this.listenTo(Adapt$1, 'remove', this.remove);
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates[this.template];
        this.$el.html(template(data));
        this.$el.addClass(data._classes);
        document.title = this.model.get('title') || '';

        _.defer(this.postRender.bind(this));
      }
    }, {
      key: "postRender",
      value: function postRender() {
        $('.js-loading').hide();
      }
    }, {
      key: "onLanguageClick",
      value: function onLanguageClick(event) {
        this.destroyNavigation();
        var lang = event.currentTarget.value;
        this.model.setLanguage(lang);
      }
    }, {
      key: "initializeNavigation",
      value: function initializeNavigation() {
        this.navigationView = new NavigationView({
          model: this.model
        });
      }
    }, {
      key: "destroyNavigation",
      value: function destroyNavigation() {
        this.navigationView.remove();
      }
    }, {
      key: "remove",
      value: function remove() {
        $('html').removeClass('in-languagepicker');

        _get(_getPrototypeOf(LanguagePickerView.prototype), "remove", this).call(this);
      }
    }]);

    return LanguagePickerView;
  }(Backbone.View));

  var LanguagePickerDrawerView = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerDrawerView", function (_Backbone$View) {
    _inherits(LanguagePickerDrawerView, _Backbone$View);

    var _super = _createSuper(LanguagePickerDrawerView);

    function LanguagePickerDrawerView() {
      _classCallCheck(this, LanguagePickerDrawerView);

      return _super.apply(this, arguments);
    }

    _createClass(LanguagePickerDrawerView, [{
      key: "template",
      get: function () {
        return 'languagePickerDrawerView';
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-languagepicker-item-btn': 'onButtonClick'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt$1, 'remove', this.remove);
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates[this.template];
        this.$el.html(template(data));
      }
    }, {
      key: "onButtonClick",
      value: function onButtonClick(event) {
        var newLanguage = this.$(event.currentTarget).attr('data-language');
        this.model.set('newLanguage', newLanguage);
        this.promptObject = this.getPromptObject(newLanguage);
        this.listenToOnce(Adapt$1, 'drawer:closed', this.onDrawerClosed);
        Adapt$1.trigger('drawer:closeDrawer');
      }
    }, {
      key: "onDrawerClosed",
      value: function onDrawerClosed() {
        var _this = this;

        _.delay(function () {
          _this.listenToOnce(Adapt$1, {
            'popup:opened': _this.onPopupOpened,
            'languagepicker:changelanguage:yes': _this.onDoChangeLanguage,
            'languagepicker:changelanguage:no': _this.onDontChangeLanguage
          });

          notify$1.prompt(_this.promptObject);
        }, 250);
      }
    }, {
      key: "onPopupOpened",
      value: function onPopupOpened() {
        this.$finishFocus = a11y$1.setPopupCloseTo($('#a11y-focuser'));
      }
    }, {
      key: "onDoChangeLanguage",
      value: function onDoChangeLanguage() {
        var newLanguage = this.model.get('newLanguage');
        this.model.setTrackedData();
        this.model.setLanguage(newLanguage);
        this.remove();
      }
    }, {
      key: "onDontChangeLanguage",
      value: function onDontChangeLanguage() {
        var _this2 = this;

        this.remove();

        _.delay(function () {
          return a11y$1.focusFirst(_this2.$finishFocus);
        }, 500);
      }
    }, {
      key: "getPromptObject",
      value: function getPromptObject(newLanguage) {
        var data = this.model.getLanguageDetails(newLanguage);
        return {
          _attributes: {
            lang: newLanguage
          },
          _classes: "is-lang-".concat(newLanguage, " ").concat(data._direction === 'rtl' ? 'is-rtl' : 'is-ltr'),
          title: data.warningTitle,
          body: data.warningMessage,
          _prompts: [{
            promptText: data._buttons.yes,
            _callbackEvent: 'languagepicker:changelanguage:yes'
          }, {
            promptText: data._buttons.no,
            _callbackEvent: 'languagepicker:changelanguage:no'
          }],
          _showIcon: true
        };
      }
    }]);

    return LanguagePickerDrawerView;
  }(Backbone.View));

  var LanguagePickerNavView = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerNavView", function (_Backbone$View) {
    _inherits(LanguagePickerNavView, _Backbone$View);

    var _super = _createSuper(LanguagePickerNavView);

    function LanguagePickerNavView() {
      _classCallCheck(this, LanguagePickerNavView);

      return _super.apply(this, arguments);
    }

    _createClass(LanguagePickerNavView, [{
      key: "tagName",
      value: function tagName() {
        return 'button';
      }
    }, {
      key: "className",
      value: function className() {
        var classNames = 'btn-icon nav__btn nav__languagepicker-btn js-languagepicker-nav-btn icon';
        var customClass = this.model.get('_languagePickerIconClass') || 'icon-language-2';
        return "".concat(classNames, " ").concat(customClass);
      }
    }, {
      key: "events",
      value: function events() {
        return {
          click: 'onClick'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt$1, 'remove', this.remove);
      }
    }, {
      key: "onClick",
      value: function onClick(event) {
        drawer.triggerCustomView(new LanguagePickerDrawerView({
          model: this.model
        }).$el, false);
      }
    }]);

    return LanguagePickerNavView;
  }(Backbone.View));

  var LanguagePickerModel = __AMD("extensions/adapt-contrib-languagePicker/js/languagePickerModel", function (_Backbone$Model) {
    _inherits(LanguagePickerModel, _Backbone$Model);

    var _super = _createSuper(LanguagePickerModel);

    function LanguagePickerModel() {
      _classCallCheck(this, LanguagePickerModel);

      return _super.apply(this, arguments);
    }

    _createClass(LanguagePickerModel, [{
      key: "preinitialize",
      value: function preinitialize() {
        this.trackedData = {
          components: [],
          blocks: []
        };
        this.locationId = null;
      }
    }, {
      key: "defaults",
      value: function defaults() {
        return {
          _isEnabled: false,
          displayTitle: '',
          body: '',
          _languages: []
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt$1.config, 'change:_activeLanguage', this.markLanguageAsSelected);
        this.listenTo(Adapt$1, 'app:dataLoaded', this.onDataLoaded);
      }
    }, {
      key: "getLanguageDetails",
      value: function getLanguageDetails(language) {
        return this.get('_languages').find(function (_ref) {
          var _language = _ref._language;
          return _language === language;
        });
      }
    }, {
      key: "setLanguage",
      value: function setLanguage(language) {
        Adapt$1.config.set({
          _activeLanguage: language,
          _defaultDirection: this.getLanguageDetails(language)._direction
        });
      }
    }, {
      key: "markLanguageAsSelected",
      value: function markLanguageAsSelected(model, language) {
        this.get('_languages').forEach(function (item) {
          item._isSelected = item._language === language;
        });
      }
    }, {
      key: "onDataLoaded",
      value: function onDataLoaded() {
        var _this = this;

        if (!this.get('_restoreStateOnLanguageChange')) {
          return;
        }

        _.defer(function () {
          _this.locationId = offlineStorage$1.get('location') || null;

          _this.restoreState();
        });
      }
    }, {
      key: "restoreLocation",
      value: function restoreLocation() {
        var _this2 = this;

        if (!data$1.findById(this.locationId)) return;

        _.defer(function () {
          return router$1.navigateToElement('.' + _this2.locationId);
        });
      }
    }, {
      key: "restoreState",
      value: function restoreState() {
        var _this$trackedData$com, _this$trackedData$blo;

        if (this.isTrackedDataEmpty()) return;
        (_this$trackedData$com = this.trackedData.components) === null || _this$trackedData$com === void 0 ? void 0 : _this$trackedData$com.forEach(this.setTrackableState);
        (_this$trackedData$blo = this.trackedData.blocks) === null || _this$trackedData$blo === void 0 ? void 0 : _this$trackedData$blo.forEach(this.setTrackableState);
      }
    }, {
      key: "isTrackedDataEmpty",
      value: function isTrackedDataEmpty() {
        return _.isEqual(this.trackedData, {
          components: [],
          blocks: []
        });
      }
    }, {
      key: "getTrackableState",
      value: function getTrackableState() {
        return {
          components: this.getState(Adapt$1.components.models).filter(Boolean),
          blocks: this.getState(Adapt$1.blocks.models).filter(Boolean)
        };
      }
    }, {
      key: "getState",
      value: function getState(models) {
        return models.map(function (model) {
          return model.get('_isComplete') && model.getTrackableState();
        });
      }
    }, {
      key: "setTrackedData",
      value: function setTrackedData() {
        if (!this.get('_restoreStateOnLanguageChange')) {
          return;
        }

        this.listenToOnce(Adapt$1, 'contentObjectView:ready', this.restoreLocation);
        this.trackedData = this.getTrackableState();
      }
    }, {
      key: "setTrackableState",
      value: function setTrackableState(stateObject) {
        var restoreModel = data$1.findById(stateObject._id);

        if (!restoreModel) {
          logging$1.warn('LanguagePicker unable to restore state for: ' + stateObject._id);
          return;
        }

        restoreModel.setTrackableState(stateObject);
      }
    }]);

    return LanguagePickerModel;
  }(Backbone.Model));

  var LanguagePicker = function (_Backbone$Controller) {
    _inherits(LanguagePicker, _Backbone$Controller);

    var _super = _createSuper(LanguagePicker);

    function LanguagePicker() {
      _classCallCheck(this, LanguagePicker);

      return _super.apply(this, arguments);
    }

    _createClass(LanguagePicker, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt$1, 'configModel:dataLoaded', this.onConfigLoaded);
      }
    }, {
      key: "onConfigLoaded",
      value: function onConfigLoaded() {
        var config = Adapt$1.config.get('_languagePicker');
        if (!(config !== null && config !== void 0 && config._isEnabled)) return;
        this.languagePickerModel = new LanguagePickerModel(config);
        this.listenTo(Adapt$1, 'router:menu router:page', this.setupNavigationView);
        var params = new URLSearchParams(window.location.search);
        var paramLang = params.get('lang');
        if (paramLang && Adapt$1.build.get('availableLanguageNames').includes(paramLang)) return;
        Adapt$1.config.set('_canLoadData', false);

        if (offlineStorage$1.ready) {
          this.onOfflineStorageReady();
          return;
        }

        this.listenToOnce(Adapt$1, 'offlineStorage:ready', this.onOfflineStorageReady);
      }
    }, {
      key: "onOfflineStorageReady",
      value: function onOfflineStorageReady() {
        var storedLanguage = offlineStorage$1.get('lang');

        if (storedLanguage) {
          this.languagePickerModel.setLanguage(storedLanguage);
          return;
        }

        if (this.languagePickerModel.get('_showOnCourseLoad') === false) {
          this.languagePickerModel.setLanguage(Adapt$1.config.get('_defaultLanguage'));
          return;
        }

        this.showLanguagePickerView();
      }
    }, {
      key: "showLanguagePickerView",
      value: function showLanguagePickerView() {
        var languagePickerView = new LanguagePickerView({
          model: this.languagePickerModel
        });
        languagePickerView.$el.appendTo('#wrapper');
      }
    }, {
      key: "setupNavigationView",
      value: function setupNavigationView() {
        var courseGlobals = Adapt$1.course.get('_globals')._extensions;

        var navigationBarLabel = '';

        if (courseGlobals._languagePicker) {
          navigationBarLabel = courseGlobals._languagePicker.navigationBarLabel;
        }

        var languagePickerNavView = new LanguagePickerNavView({
          model: this.languagePickerModel,
          attributes: {
            'aria-label': navigationBarLabel
          }
        });
        languagePickerNavView.$el.appendTo('.nav__inner');
      }
    }]);

    return LanguagePicker;
  }(Backbone.Controller);

  __AMD("extensions/adapt-contrib-languagePicker/js/adapt-languagePicker", new LanguagePicker());

  var Completion = function (_Backbone$Controller) {
    _inherits(Completion, _Backbone$Controller);

    var _super = _createSuper(Completion);

    function Completion() {
      _classCallCheck(this, Completion);

      return _super.apply(this, arguments);
    }

    _createClass(Completion, [{
      key: "initialize",
      value: function initialize() {
        this.subProgressCompleted = 0;
        this.subProgressTotal = 0;
        this.nonAssessmentCompleted = 0;
        this.nonAssessmentTotal = 0;
        this.assessmentCompleted = 0;
        this.assessmentTotal = 0;
      }
    }, {
      key: "calculateCompletion",
      value: function calculateCompletion(contentObjectModel) {
        var completion = Adapt$1.completion;
        var viewType = contentObjectModel.get('_type');
        var isComplete = contentObjectModel.get('_isComplete') ? 1 : 0;
        var children;

        switch (viewType) {
          case 'page':
            {
              var _Adapt$course$get, _contentObjectModel$g;

              children = contentObjectModel.getAllDescendantModels().filter(function (model) {
                return model.get('_isAvailable') && !model.get('_isOptional');
              });
              var availableChildren = this.filterAvailableChildren(children);
              var components = this.getPageLevelProgressEnabledModels(availableChildren);
              var nonAssessmentComponents = this.getNonAssessmentComponents(components);
              completion.nonAssessmentTotal = nonAssessmentComponents.length;
              completion.nonAssessmentCompleted = this.getComponentsCompleted(nonAssessmentComponents).length;
              var assessmentComponents = this.getAssessmentComponents(components);
              completion.assessmentTotal = assessmentComponents.length;
              completion.assessmentCompleted = this.getComponentsInteractionCompleted(assessmentComponents).length;

              if (contentObjectModel.get('_pageLevelProgress')._excludeAssessments !== true) {
                completion.subProgressCompleted = contentObjectModel.get('_subProgressComplete') || 0;
                completion.subProgressTotal = contentObjectModel.get('_subProgressTotal') || 0;
              }

              var showPageCompletionCourse = ((_Adapt$course$get = Adapt$1.course.get('_pageLevelProgress')) === null || _Adapt$course$get === void 0 ? void 0 : _Adapt$course$get._showPageCompletion) !== false;
              var showPageCompletionPage = ((_contentObjectModel$g = contentObjectModel.get('_pageLevelProgress')) === null || _contentObjectModel$g === void 0 ? void 0 : _contentObjectModel$g._showPageCompletion) !== false;

              if (showPageCompletionCourse && showPageCompletionPage) {
                completion.nonAssessmentCompleted += isComplete;
                completion.nonAssessmentTotal += 1;
              }

              break;
            }

          case 'menu':
          case 'course':
            {
              children = contentObjectModel.getChildren().models;
              children.forEach(function (contentObject) {
                var completionObject = Adapt$1.completion.calculateCompletion(contentObject);
                completion.subProgressCompleted += completionObject.subProgressCompleted || 0;
                completion.subProgressTotal += completionObject.subProgressTotal || 0;
                completion.nonAssessmentTotal += completionObject.nonAssessmentTotal;
                completion.nonAssessmentCompleted += completionObject.nonAssessmentCompleted;
                completion.assessmentTotal += completionObject.assessmentTotal;
                completion.assessmentCompleted += completionObject.assessmentCompleted;
              });
              break;
            }
        }

        return completion;
      }
    }, {
      key: "getNonAssessmentComponents",
      value: function getNonAssessmentComponents(models) {
        return models.filter(function (model) {
          return !model.get('_isPartOfAssessment');
        });
      }
    }, {
      key: "getAssessmentComponents",
      value: function getAssessmentComponents(models) {
        return models.filter(function (model) {
          return model.get('_isPartOfAssessment');
        });
      }
    }, {
      key: "getComponentsCompleted",
      value: function getComponentsCompleted(models) {
        return models.filter(function (item) {
          return item.get('_isComplete');
        });
      }
    }, {
      key: "getComponentsInteractionCompleted",
      value: function getComponentsInteractionCompleted(models) {
        return models.filter(function (item) {
          return item.get('_isComplete');
        });
      }
    }, {
      key: "getPageLevelProgressEnabledModels",
      value: function getPageLevelProgressEnabledModels(models) {
        return models.filter(function (model) {
          var config = model.get('_pageLevelProgress');
          return config === null || config === void 0 ? void 0 : config._isEnabled;
        });
      }
    }, {
      key: "unavailableInHierarchy",
      value: function unavailableInHierarchy(parents) {
        if (!parents) return;
        return parents.some(function (parent) {
          return !parent.get('_isAvailable');
        });
      }
    }, {
      key: "filterAvailableChildren",
      value: function filterAvailableChildren(children) {
        var availableChildren = [];

        for (var i = 0, count = children.length; i < count; i++) {
          var parents = children[i].getAncestorModels();
          if (this.unavailableInHierarchy(parents)) continue;
          availableChildren.push(children[i]);
        }

        return availableChildren;
      }
    }, {
      key: "calculatePercentageComplete",
      value: function calculatePercentageComplete(model) {
        var completionObject = this.calculateCompletion(model);
        var completed = completionObject.nonAssessmentCompleted + completionObject.assessmentCompleted + completionObject.subProgressCompleted;
        var total = completionObject.nonAssessmentTotal + completionObject.assessmentTotal + completionObject.subProgressTotal;
        var percentageComplete = Math.floor(completed / total * 100);
        return percentageComplete;
      }
    }]);

    return Completion;
  }(Backbone.Controller);

  var completionCalculations = __AMD("extensions/adapt-contrib-pageLevelProgress/js/completionCalculations", Adapt$1.completion = new Completion());

  var PageLevelProgressIndicatorView = function (_Backbone$View) {
    _inherits(PageLevelProgressIndicatorView, _Backbone$View);

    var _super = _createSuper(PageLevelProgressIndicatorView);

    function PageLevelProgressIndicatorView() {
      _classCallCheck(this, PageLevelProgressIndicatorView);

      return _super.apply(this, arguments);
    }

    _createClass(PageLevelProgressIndicatorView, [{
      key: "initialize",
      value: function initialize(options) {
        options = options || {};
        this.parent = options.parent;
        this.calculatePercentage = options.calculatePercentage || this.calculatePercentage;
        this.ariaLabel = options.ariaLabel || '';
        this.type = options.type || this.model.get('_type');
        this.addClasses();
        this.setUpEventListeners();
        this.setPercentageComplete();
        this.render();
        this.refresh();
      }
    }, {
      key: "addClasses",
      value: function addClasses() {
        this.$el.addClass(['pagelevelprogress__indicator', 'is-' + this.type].join(' '));
      }
    }, {
      key: "checkAria",
      value: function checkAria() {
        if (!this.ariaLabel) {
          this.$el.attr('aria-hidden', true);
          return;
        }

        var data = this.getRenderData();
        this.$('.js-indicator-aria-label').html(Handlebars.compile(this.ariaLabel)(data));
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        if (this.parent) {
          this.listenToOnce(this.parent, 'postRemove', this.remove);
        } else {
          this.listenTo(Adapt$1, 'remove', this.remove);
        }

        this.listenTo(this.model, 'change:_isComplete', this.refresh);
        if (!this.collection) return;
        this.listenTo(this.collection, 'change:_isComplete', this.refresh);
      }
    }, {
      key: "setPercentageComplete",
      value: function setPercentageComplete() {
        var percentage = this.calculatePercentage();
        this.model.set('percentageComplete', percentage);
        return percentage;
      }
    }, {
      key: "calculatePercentage",
      value: function calculatePercentage() {
        return this.model.get('_isComplete') ? 100 : 0;
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.getRenderData();
        var template = Handlebars.templates[this.constructor.template];
        this.$el.html(template(data));
      }
    }, {
      key: "getRenderData",
      value: function getRenderData() {
        var data = this.model.toJSON();
        data.ariaLabel = this.ariaLabel;
        data.type = this.type;
        return data;
      }
    }, {
      key: "refresh",
      value: function refresh() {
        this.checkCompletion();
        this.checkAria();
        this.$('.js-indicator-bar').css({
          width: this.calculatePercentage() + '%'
        });
      }
    }, {
      key: "checkCompletion",
      value: function checkCompletion() {
        var percentage = this.setPercentageComplete();
        this.$el.toggleClass('is-complete', percentage === 100).toggleClass('is-incomplete', percentage !== 100);
      }
    }]);

    return PageLevelProgressIndicatorView;
  }(Backbone.View);

  PageLevelProgressIndicatorView.template = 'pageLevelProgressIndicator';
  var PageLevelProgressIndicatorView$1 = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressIndicatorView", PageLevelProgressIndicatorView);

  var PageLevelProgressItemView = function (_Backbone$View) {
    _inherits(PageLevelProgressItemView, _Backbone$View);

    var _super = _createSuper(PageLevelProgressItemView);

    function PageLevelProgressItemView() {
      _classCallCheck(this, PageLevelProgressItemView);

      return _super.apply(this, arguments);
    }

    _createClass(PageLevelProgressItemView, [{
      key: "className",
      value: function className() {
        return ['pagelevelprogress__item drawer__item', this.model.get('_type') + '__indicator'].join(' ');
      }
    }, {
      key: "attributes",
      value: function attributes() {
        return {
          role: 'listitem'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt$1, 'remove', this.remove);
        this.render();
        this.addIndicator();
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        var template = Handlebars.templates[this.constructor.template];
        this.$el.html(template(data));
      }
    }, {
      key: "addIndicator",
      value: function addIndicator() {
        if (this.model.get('_isOptional')) return;
        var item = new PageLevelProgressIndicatorView$1({
          model: this.model
        });
        this.$('.js-indicator').append(item.$el);
      }
    }]);

    return PageLevelProgressItemView;
  }(Backbone.View);

  PageLevelProgressItemView.template = 'pageLevelProgressItem';
  var PageLevelProgressItemView$1 = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressItemView", PageLevelProgressItemView);

  var PageLevelProgressView = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView", function (_Backbone$View) {
    _inherits(PageLevelProgressView, _Backbone$View);

    var _super = _createSuper(PageLevelProgressView);

    function PageLevelProgressView() {
      _classCallCheck(this, PageLevelProgressView);

      return _super.apply(this, arguments);
    }

    _createClass(PageLevelProgressView, [{
      key: "className",
      value: function className() {
        return 'pagelevelprogress';
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-pagelevelprogress-item-click': 'scrollToPageElement'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt$1, 'remove', this.remove);
        this.render();
        this.addChildren();
      }
    }, {
      key: "scrollToPageElement",
      value: function () {
        var _scrollToPageElement = _asyncToGenerator(regeneratorRuntime.mark(function _callee(event) {
          var $target, id, model, currentComponentSelector;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (event && event.preventDefault) event.preventDefault();
                  $target = $(event.currentTarget);

                  if (!$target.is('.is-disabled')) {
                    _context.next = 4;
                    break;
                  }

                  return _context.abrupt("return");

                case 4:
                  id = $target.attr('data-pagelevelprogress-id');
                  model = data$1.findById(id);

                  if (model.get('_isRendered')) {
                    _context.next = 15;
                    break;
                  }

                  _context.prev = 7;
                  _context.next = 10;
                  return Adapt$1.parentView.renderTo(id);

                case 10:
                  _context.next = 15;
                  break;

                case 12:
                  _context.prev = 12;
                  _context.t0 = _context["catch"](7);
                  return _context.abrupt("return");

                case 15:
                  currentComponentSelector = ".".concat(id);
                  Adapt$1.once('drawer:closed', function () {
                    router$1.navigateToElement(currentComponentSelector, {
                      duration: 400
                    });
                  }).trigger('drawer:closeDrawer', $(currentComponentSelector));

                case 17:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[7, 12]]);
        }));

        function scrollToPageElement(_x) {
          return _scrollToPageElement.apply(this, arguments);
        }

        return scrollToPageElement;
      }()
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates.pageLevelProgress;
        this.$el.html(template({}));
      }
    }, {
      key: "addChildren",
      value: function addChildren() {
        var $children = this.$('.js-children');
        this.collection.each(function (model) {
          $children.append(new PageLevelProgressItemView$1({
            model: model
          }).$el);
        });
      }
    }]);

    return PageLevelProgressView;
  }(Backbone.View));

  var PageLevelProgressNavigationView = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView", function (_Backbone$View) {
    _inherits(PageLevelProgressNavigationView, _Backbone$View);

    var _super = _createSuper(PageLevelProgressNavigationView);

    function PageLevelProgressNavigationView() {
      _classCallCheck(this, PageLevelProgressNavigationView);

      return _super.apply(this, arguments);
    }

    _createClass(PageLevelProgressNavigationView, [{
      key: "tagName",
      value: function tagName() {
        return 'button';
      }
    }, {
      key: "className",
      value: function className() {
        return 'btn-icon nav__btn nav__pagelevelprogress-btn pagelevelprogress__nav-btn';
      }
    }, {
      key: "attributes",
      value: function attributes() {
        var _Adapt$course$get, _Adapt$course$get$_ex, _Adapt$course$get$_ex2;

        return {
          'data-order': ((_Adapt$course$get = Adapt$1.course.get('_globals')) === null || _Adapt$course$get === void 0 ? void 0 : (_Adapt$course$get$_ex = _Adapt$course$get._extensions) === null || _Adapt$course$get$_ex === void 0 ? void 0 : (_Adapt$course$get$_ex2 = _Adapt$course$get$_ex._pageLevelProgress) === null || _Adapt$course$get$_ex2 === void 0 ? void 0 : _Adapt$course$get$_ex2._navOrder) || 0
        };
      }
    }, {
      key: "events",
      value: function events() {
        return {
          click: 'onProgressClicked'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        _.bindAll(this, 'updateProgressBar');

        this.setUpEventListeners();
        this.render();
        this.addIndicator();
        this.deferredUpdate();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        this.listenTo(Adapt$1, {
          remove: this.remove,
          'router:location': this.updateProgressBar,
          'view:childAdded pageLevelProgress:update': this.refreshProgressBar
        });
      }
    }, {
      key: "render",
      value: function render() {
        var template = Handlebars.templates.pageLevelProgressNavigation;
        this.$el.html(template({}));
      }
    }, {
      key: "addIndicator",
      value: function addIndicator() {
        this.indicatorView = new PageLevelProgressIndicatorView$1({
          model: this.model,
          collection: this.collection,
          calculatePercentage: this._getPageCompletionPercentage,
          ariaLabel: Adapt$1.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressIndicatorBar
        });
        this.$el.prepend(this.indicatorView.$el);
      }
    }, {
      key: "_getPageCompletionPercentage",
      value: function _getPageCompletionPercentage() {
        return completionCalculations.calculatePercentageComplete(this.model);
      }
    }, {
      key: "deferredUpdate",
      value: function deferredUpdate() {
        _.defer(this.updateProgressBar);
      }
    }, {
      key: "updateProgressBar",
      value: function updateProgressBar() {
        this.indicatorView.refresh();
      }
    }, {
      key: "refreshProgressBar",
      value: function refreshProgressBar() {
        this.collection.repopulate();
        this.updateProgressBar();
      }
    }, {
      key: "onProgressClicked",
      value: function onProgressClicked(event) {
        if (event && event.preventDefault) event.preventDefault();
        drawer.triggerCustomView(new PageLevelProgressView({
          collection: this.collection
        }).$el, false);
      }
    }, {
      key: "remove",
      value: function remove() {
        _get(_getPrototypeOf(PageLevelProgressNavigationView.prototype), "remove", this).call(this);

        this.collection.reset();
      }
    }]);

    return PageLevelProgressNavigationView;
  }(Backbone.View));

  var PageLevelProgressCollection = __AMD("extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressCollection", function (_Backbone$Collection) {
    _inherits(PageLevelProgressCollection, _Backbone$Collection);

    var _super = _createSuper(PageLevelProgressCollection);

    function PageLevelProgressCollection() {
      _classCallCheck(this, PageLevelProgressCollection);

      return _super.apply(this, arguments);
    }

    _createClass(PageLevelProgressCollection, [{
      key: "initialize",
      value: function initialize(models, options) {
        this.listenTo(Adapt$1, 'remove', this.reset);
        if (!(options !== null && options !== void 0 && options.pageModel)) return;
        this._pageModel = options.pageModel;
        this.repopulate();
      }
    }, {
      key: "repopulate",
      value: function repopulate() {
        this.reset();
        if (!this._pageModel) return;

        var allDescendants = this._pageModel.getAllDescendantModels(true);

        var currentPageItems = allDescendants.filter(function (item) {
          return item.get('_isAvailable') === true;
        });
        var availableItems = completionCalculations.filterAvailableChildren(currentPageItems);
        var enabledProgressItems = completionCalculations.getPageLevelProgressEnabledModels(availableItems);
        this.add(enabledProgressItems);
      }
    }]);

    return PageLevelProgressCollection;
  }(Backbone.Collection));

  var PageLevelProgress = function (_Backbone$Controller) {
    _inherits(PageLevelProgress, _Backbone$Controller);

    var _super = _createSuper(PageLevelProgress);

    function PageLevelProgress() {
      _classCallCheck(this, PageLevelProgress);

      return _super.apply(this, arguments);
    }

    _createClass(PageLevelProgress, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt$1, {
          'app:dataReady': this.onDataReady,
          'app:languageChanged': this.onLanguageChange
        });
      }
    }, {
      key: "getCourseConfig",
      value: function getCourseConfig() {
        return Adapt$1.course.get('_pageLevelProgress');
      }
    }, {
      key: "onDataReady",
      value: function onDataReady() {
        var coursePLPConfig = this.getCourseConfig();
        if (!(coursePLPConfig !== null && coursePLPConfig !== void 0 && coursePLPConfig._isEnabled)) return;
        this.setUpEventListeners();
      }
    }, {
      key: "onLanguageChange",
      value: function onLanguageChange() {
        this.stopListening();
        this.initialize();
      }
    }, {
      key: "setUpEventListeners",
      value: function setUpEventListeners() {
        var headerIndicatorTypes = ['menu', 'menuItem', 'page', 'article', 'block', 'component'];
        var headerIndicatorEventNames = headerIndicatorTypes.concat(['']).join('View:render ');
        this.listenTo(Adapt$1, headerIndicatorEventNames, this.renderHeaderIndicatorView);
        this.listenTo(Adapt$1, {
          'menuItemView:postRender': this.renderMenuItemIndicatorView,
          'router:page': this.renderNavigationView
        });
        this.listenTo(Adapt$1.course, 'bubble:change:_isComplete', this.onCompletionChange);
      }
    }, {
      key: "onCompletionChange",
      value: function onCompletionChange(event) {
        if (!location$1._currentId) return;
        var currentModel = data$1.findById(location$1._currentId);
        var completionState = {
          currentLocation: completionCalculations.calculatePercentageComplete(currentModel),
          course: completionCalculations.calculatePercentageComplete(Adapt$1.course)
        };
        var hasChanged = !_.isMatch(this._previousCompletionState, completionState);
        if (!hasChanged) return;
        this._previousCompletionState = completionState;
        Adapt$1.trigger('pageLevelProgress:percentageCompleteChange', completionState);
      }
    }, {
      key: "renderHeaderIndicatorView",
      value: function renderHeaderIndicatorView(view) {
        var model = view.model;
        var config = model.get('_pageLevelProgress');
        if (!(config !== null && config !== void 0 && config._isEnabled) || !(config !== null && config !== void 0 && config._isCompletionIndicatorEnabled)) return;
        var pageModel = model.findAncestor('contentobject');
        var pageConfig = pageModel && pageModel.get('_pageLevelProgress');
        if (!(pageConfig !== null && pageConfig !== void 0 && pageConfig._isEnabled)) return;
        var $headings = view.$('.js-heading');
        $headings.each(function (index, el) {
          var $el = $(el);
          var indicatorView = new PageLevelProgressIndicatorView$1({
            parent: view,
            model: model
          });
          indicatorView.$el.insertAfter($el);
        });
      }
    }, {
      key: "renderMenuItemIndicatorView",
      value: function renderMenuItemIndicatorView(view) {
        if (view.model.get('_id') === location$1._currentId) return;
        var viewType = view.model.get('_type');
        if (viewType === 'course') return;
        var pageLevelProgress = view.model.get('_pageLevelProgress');
        if (!(pageLevelProgress !== null && pageLevelProgress !== void 0 && pageLevelProgress._isEnabled)) return;
        view.$el.find('.js-menu-item-progress').append(new PageLevelProgressIndicatorView$1({
          parent: view,
          model: view.model,
          type: 'menu-item',
          calculatePercentage: this._getMenuItemCompletionPercentage.bind(view),
          ariaLabel: Adapt$1.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressMenuBar
        }).$el);
      }
    }, {
      key: "_getMenuItemCompletionPercentage",
      value: function _getMenuItemCompletionPercentage() {
        return completionCalculations.calculatePercentageComplete(this.model);
      }
    }, {
      key: "renderNavigationView",
      value: function renderNavigationView(pageModel) {
        var coursePLPConfig = this.getCourseConfig();
        if ((coursePLPConfig === null || coursePLPConfig === void 0 ? void 0 : coursePLPConfig._isShownInNavigationBar) === false) return;
        var pagePLPConfig = pageModel.get('_pageLevelProgress');
        if (!(pagePLPConfig !== null && pagePLPConfig !== void 0 && pagePLPConfig._isEnabled)) return;
        var collection = new PageLevelProgressCollection(null, {
          pageModel: pageModel
        });
        if (collection.length === 0) return;
        $('.nav__drawer-btn').after(new PageLevelProgressNavigationView({
          model: pageModel,
          collection: collection
        }).$el);
      }
    }]);

    return PageLevelProgress;
  }(Backbone.Controller);

  __AMD("extensions/adapt-contrib-pageLevelProgress/js/adapt-contrib-pageLevelProgress", Adapt$1.pageLevelProgress = new PageLevelProgress());

  var ResourcesView = __AMD("extensions/adapt-contrib-resources/js/ResourcesView", function (_Backbone$View) {
    _inherits(ResourcesView, _Backbone$View);

    var _super = _createSuper(ResourcesView);

    function ResourcesView() {
      _classCallCheck(this, ResourcesView);

      return _super.apply(this, arguments);
    }

    _createClass(ResourcesView, [{
      key: "className",
      value: function className() {
        return 'resources';
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt$1, 'remove', this.remove);
        this.render();
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-resources-filter-btn-click': 'onFilterClicked'
        };
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        this.$el.html(Handlebars.templates.resources({
          model: this.model.toJSON(),
          resources: this.collection.toJSON()
        }));

        _.defer(function () {
          _this.listenTo(Adapt$1, 'drawer:triggerCustomView', _this.remove);
        });

        return this;
      }
    }, {
      key: "onFilterClicked",
      value: function onFilterClicked(e) {
        if (e && e.preventDefault) e.preventDefault();
        this.$('.js-resources-filter-btn-click').removeClass('is-selected');
        var items;
        var filter = $(e.currentTarget).addClass('is-selected').attr('data-filter');

        if (filter === 'all') {
          items = this.$('.js-resources-item').removeClass('u-display-none');
        } else {
          this.$('.js-resources-item').removeClass('u-display-none').not('.is-' + filter).addClass('u-display-none');
          items = this.$('.js-resources-item.is-' + filter);
        }

        if (items.length < 0) return;
        a11y$1.focusFirst($(items[0]));
      }
    }]);

    return ResourcesView;
  }(Backbone.View));

  var helpers = {
    resources_has_type: function (resources, type, block) {
      var hasType = resources.some(_.matcher({
        _type: type
      }));
      return hasType ? block.fn(this) : block.inverse(this);
    },
    resources_has_multiple_types: function (resources, block) {
      if (resources.length === 1) return block.inverse(this);
      var allSameType = resources.every(_.matcher({
        _type: resources[0]._type
      }));
      return allSameType ? block.inverse(this) : block.fn(this);
    },
    resources_get_column_count: function (resources) {
      return _.uniq(_.pluck(resources, '_type')).length + 1;
    },
    resources_force_download: function (resource, block) {
      if (device$1.browser === 'internet explorer' || device$1.OS === 'ios') {
        return block.inverse(this);
      }

      return resource._forceDownload || resource.filename ? block.fn(this) : block.inverse(this);
    }
  };

  for (var name in helpers) {
    Handlebars__default["default"].registerHelper(name, helpers[name]);
  }

  __AMD("extensions/adapt-contrib-resources/js/ResourcesHelpers", helpers);

  var Resources = function (_Backbone$Controller) {
    _inherits(Resources, _Backbone$Controller);

    var _super = _createSuper(Resources);

    function Resources() {
      _classCallCheck(this, Resources);

      return _super.apply(this, arguments);
    }

    _createClass(Resources, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt$1, 'adapt:start', this.initResources);
      }
    }, {
      key: "initResources",
      value: function initResources() {
        var courseResources = Adapt$1.course.get('_resources');
        if (!courseResources || courseResources._isEnabled === false) return;
        var drawerObject = {
          title: courseResources.title,
          description: courseResources.description,
          className: 'is-resources',
          drawerOrder: courseResources._drawerOrder || 0
        };
        drawer.addItem(drawerObject, 'resources:showResources');
        this.setupResources(courseResources);
      }
    }, {
      key: "setupResources",
      value: function setupResources(resourcesData) {
        var model = new Backbone.Model(resourcesData);
        var collection = new Backbone.Collection(model.get('_resourcesItems'));
        this.listenTo(Adapt$1, 'resources:showResources', function () {
          drawer.triggerCustomView(new ResourcesView({
            model: model,
            collection: collection
          }).$el);
        });
      }
    }]);

    return Resources;
  }(Backbone.Controller);

  __AMD("extensions/adapt-contrib-resources/js/adapt-contrib-resources", new Resources());

  function _deepDefaults(original) {
    for (var _len = arguments.length, defaultObjects = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      defaultObjects[_key - 1] = arguments[_key];
    }

    defaultObjects.reverse();
    defaultObjects.forEach(function (defaults) {
      var keyValuePairs = Object.entries(defaults);
      keyValuePairs.forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            defaultValue = _ref2[1];

        var isRecursiveObject = _typeof(defaultValue) === 'object' && !Array.isArray(defaultValue) && defaultValue !== null;

        if (isRecursiveObject) {
          original[key] = _deepDefaults(original[key] || {}, defaultValue);
          return;
        }

        var isValueAlreadySet = Object.prototype.hasOwnProperty.call(original, key);
        if (isValueAlreadySet) return;
        original[key] = defaultValue;
      });
    });
    return original;
  }
  var configDefaults = {
    _isEnabled: false,
    _isInherited: false,
    _autoScroll: true,
    _scrollTo: '@block +1',
    _onChildren: false,
    _button: {
      _isEnabled: true,
      _isFullWidth: true,
      _autoHide: false,
      _hasIcon: false,
      _styleBeforeCompletion: 'hidden',
      _styleAfterClick: 'hidden',
      _component: 'trickle-button',
      _className: '',
      text: 'Continue',
      ariaLabel: '',
      startText: '',
      startAriaLabel: '',
      finalText: '',
      finalAriaLabel: ''
    },
    _stepLocking: {
      _isEnabled: true,
      _isCompletionRequired: true,
      _isLockedOnRevisit: false
    }
  };
  function isModelArticleWithOnChildren(model) {
    var type = model.get('_type');
    var trickleConfig = model.get('_trickle');
    return type === 'article' && trickleConfig && trickleConfig._onChildren !== false;
  }
  function getModelConfigDefaults(model) {
    var type = model.get('_type');
    var config = {};

    _deepDefaults(config, configDefaults, {
      _onChildren: type === 'article'
    });

    if (config._onChildren) {
      var _config$_button$start, _config$_button$start2, _config$_button$final, _config$_button$final2;

      config._button.startText = (_config$_button$start = config._button.startText) !== null && _config$_button$start !== void 0 ? _config$_button$start : 'Begin';
      config._button.startAriaLabel = (_config$_button$start2 = config._button.startAriaLabel) !== null && _config$_button$start2 !== void 0 ? _config$_button$start2 : '';
      config._button.finalText = (_config$_button$final = config._button.finalText) !== null && _config$_button$final !== void 0 ? _config$_button$final : 'Finish';
      config._button.finalAriaLabel = (_config$_button$final2 = config._button.finalAriaLabel) !== null && _config$_button$final2 !== void 0 ? _config$_button$final2 : '';
    }

    if (config._button._isFullWidth) {
      config._stepLocking._isEnabled = true;
    }

    return config;
  }
  function getModelInheritanceChain(configModel) {
    if (!data$1.isReady) throw new Error('Trickle cannot resolve inheritance chains until data is ready');
    var type = configModel.get('_type');

    if (type === 'block') {
      var parentModel = configModel.getParent();
      var parentConfig = parentModel.get('_trickle');
      var blockConfig = configModel.get('_trickle');
      var isParentEnabledNotOnChildren = (parentConfig === null || parentConfig === void 0 ? void 0 : parentConfig._isEnabled) && parentConfig._onChildren === false;
      var isNoChildConfig = !(blockConfig !== null && blockConfig !== void 0 && blockConfig._isEnabled);

      if (isParentEnabledNotOnChildren && isNoChildConfig) {
        return null;
      }

      return [configModel, parentModel].filter(function (ancestor) {
        var config = ancestor.get('_trickle');
        return config && !config._isInherited;
      });
    }

    if (type === 'article') {
      return [configModel];
    }

    return null;
  }
  function getModelConfig(model) {
    var _$;

    var inheritance = getModelInheritanceChain(model);
    if (!(inheritance !== null && inheritance !== void 0 && inheritance.length) || isModelArticleWithOnChildren(model)) return null;

    var config = (_$ = $).extend.apply(_$, [true, {}].concat(_toConsumableArray(inheritance.reverse().map(function (inheritModel, index, arr) {
      var isLast = index === arr.length - 1;
      var defaults = isLast ? getModelConfigDefaults(inheritModel) : null;
      return $.extend(true, {}, defaults, inheritModel.get('_trickle'));
    }))));

    if (!config._isEnabled) return null;
    return config;
  }
  function getModelContainer(model) {
    var inheritance = getModelInheritanceChain(model);
    return inheritance === null || inheritance === void 0 ? void 0 : inheritance.find(function (inheritModel) {
      var defaults = getModelConfigDefaults(inheritModel);
      var config = $.extend(true, {}, defaults, inheritModel.get('_trickle'));
      return config._onChildren;
    });
  }
  function getCompletionAttribute() {
    var _Adapt$config$get;

    return ((_Adapt$config$get = Adapt$1.config.get('_trickle')) === null || _Adapt$config$get === void 0 ? void 0 : _Adapt$config$get._completionAttribute) || '_isComplete';
  }
  function checkApplyLocks(model) {
    var completionAttribute = getCompletionAttribute();
    if (!Object.prototype.hasOwnProperty.call(model.changed, completionAttribute)) return;
    debouncedApplyLocks();
  }
  function applyLocks() {
    if (!data$1.isReady) return;
    var completionAttribute = getCompletionAttribute();
    var locks = {};
    var modelsById = {};
    var TrickleButtonModel = components$1.getModelClass('trickle-button');
    Adapt$1.course.getAllDescendantModels(true).filter(function (model) {
      return model.get('_isAvailable');
    }).forEach(function (siteModel) {
      var _trickleConfig$_stepL;

      var trickleConfig = getModelConfig(siteModel);
      if (!trickleConfig || !trickleConfig._isEnabled) return;
      var isStepLocked = Boolean(trickleConfig === null || trickleConfig === void 0 ? void 0 : (_trickleConfig$_stepL = trickleConfig._stepLocking) === null || _trickleConfig$_stepL === void 0 ? void 0 : _trickleConfig$_stepL._isEnabled);
      var isLocked = isStepLocked && !(siteModel !== null && siteModel !== void 0 && siteModel.get(completionAttribute)) && !(siteModel !== null && siteModel !== void 0 && siteModel.get('_isOptional'));
      var id = siteModel.get('_id');
      modelsById[id] = siteModel;
      locks[id] = locks[id] || false;

      var subsequentLockingModels = _getAncestorNextSiblings(siteModel);

      subsequentLockingModels.forEach(function (model, index) {
        var id = model.get('_id');
        var isButtonModel = model instanceof TrickleButtonModel;
        model.set('_isTrickled', !isButtonModel);
        modelsById[id] = model;
        locks[id] = locks[id] || isLocked;
        model.getAllDescendantModels().forEach(function (descendant) {
          var descendantId = descendant.get('_id');
          modelsById[descendantId] = descendant;
          locks[descendantId] = locks[id];
        });
      });
    });
    Object.entries(locks).forEach(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          id = _ref4[0],
          isLocked = _ref4[1];

      var model = modelsById[id];
      var wasLocked = model.get('_isLocked');
      if (wasLocked === isLocked) return;
      model.set('_isLocked', isLocked);
    });
    logTrickleState();
  }
  var debouncedApplyLocks = _.debounce(applyLocks, 1);
  function _getAncestorNextSiblings(fromModel) {
    if (!fromModel) return [];
    var allSiblings = fromModel.getParent().getAvailableChildModels();
    var subsequentSiblings = allSiblings.slice(allSiblings.findIndex(function (sibling) {
      return sibling === fromModel;
    }) + 1);
    var allAncestors = fromModel.getAncestorModels();
    var inPageAncestors = allAncestors.slice(0, allAncestors.findIndex(function (parent) {
      return parent instanceof ContentObjectModel;
    }) + 1);
    var subsequentInPageAncestors = [];
    inPageAncestors.slice(1).forEach(function (grandParent, previousIndex) {
      var parent = inPageAncestors[previousIndex];
      var allGrandParentChildren = grandParent.getAvailableChildModels();
      var subsequentAncestorSiblings = allGrandParentChildren.slice(allGrandParentChildren.findIndex(function (child) {
        return child === parent;
      }) + 1);
      subsequentInPageAncestors.push.apply(subsequentInPageAncestors, _toConsumableArray(subsequentAncestorSiblings));
    });
    var subsequentContentObjectDescendantModels = subsequentSiblings.concat(subsequentInPageAncestors);
    return subsequentContentObjectDescendantModels;
  }
  function addButtonComponents() {
    var TrickleButtonModel = components$1.getModelClass('trickle-button');
    var uid = 0;
    data$1.forEach(function (buttonModelSite) {
      if (buttonModelSite instanceof CourseModel$1) return;
      var trickleConfig = getModelConfig(buttonModelSite);
      if (!trickleConfig || !(trickleConfig !== null && trickleConfig !== void 0 && trickleConfig._isEnabled) || buttonModelSite.get('_isTrickleSiteConfigured')) return;
      buttonModelSite.set('_isTrickleSiteConfigured', true);
      var parentId = buttonModelSite.get('_id');
      var trickleButtonModel = new TrickleButtonModel({
        _id: "trickle-".concat(uid++),
        _type: 'component',
        _component: 'trickle-button',
        _parentId: parentId,
        _isAvailable: true,
        _layout: 'full',
        _trickle: {
          _isEnabled: true
        },
        _renderPosition: 'outer-append',
        _isTrackable: false
      });
      trickleButtonModel.setupModel();
      buttonModelSite.getChildren().add(trickleButtonModel);
    });
  }
  function logTrickleState() {
    var _logging$_config, _Adapt$parentView, _Adapt$parentView$mod;

    if (((_logging$_config = logging$1._config) === null || _logging$_config === void 0 ? void 0 : _logging$_config._level) !== 'debug') return;

    if (!((_Adapt$parentView = Adapt$1.parentView) !== null && _Adapt$parentView !== void 0 && (_Adapt$parentView$mod = _Adapt$parentView.model) !== null && _Adapt$parentView$mod !== void 0 && _Adapt$parentView$mod.isTypeGroup('page'))) {
      logging$1.debug('TRICKLE GLOBAL STATE');
      Adapt$1.course.getAllDescendantModels(true).filter(function (model) {
        return model.get('_isAvailable');
      }).forEach(function (model) {
        var isLocked = model.get('_isLocked');
        var isTrickled = model.get('_isTrickled');
        logging$1.debug("".concat(' '.repeat(model.getAncestorModels().length)).concat(model.get('_type'), " ").concat(model.get('_id'), " isLocked: ").concat(isLocked, " isTrickled: ").concat(isTrickled));
      });
      return;
    }

    logging$1.debug('TRICKLE STATE');
    Adapt$1.parentView.model.getAllDescendantModels(true).filter(function (model) {
      return model.get('_isAvailable');
    }).forEach(function (model) {
      var isLocked = model.get('_isLocked');
      var isTrickled = model.get('_isTrickled');
      logging$1.debug("".concat(' '.repeat(model.getAncestorModels().length)).concat(model.get('_type'), " ").concat(model.get('_id'), " isLocked: ").concat(isLocked, " isTrickled: ").concat(isTrickled));
    });
  }
  __AMD("extensions/adapt-contrib-trickle/js/models", {
    _deepDefaults: _deepDefaults,
    configDefaults: configDefaults,
    getModelConfigDefaults: getModelConfigDefaults,
    getModelInheritanceChain: getModelInheritanceChain,
    getModelConfig: getModelConfig,
    getModelContainer: getModelContainer,
    getCompletionAttribute: getCompletionAttribute,
    checkApplyLocks: checkApplyLocks,
    applyLocks: applyLocks,
    debouncedApplyLocks: debouncedApplyLocks,
    _getAncestorNextSiblings: _getAncestorNextSiblings,
    addButtonComponents: addButtonComponents,
    logTrickleState: logTrickleState
  });

  var TrickleController = function (_Backbone$Controller) {
    _inherits(TrickleController, _Backbone$Controller);

    var _super = _createSuper(TrickleController);

    function TrickleController() {
      _classCallCheck(this, TrickleController);

      return _super.apply(this, arguments);
    }

    _createClass(TrickleController, [{
      key: "initialize",
      value: function initialize() {
        this.checkIsFinished = _.debounce(this.checkIsFinished, 1);
        this.listenTo(data$1, {
          ready: this.onDataReady,
          'change:_isInteractionComplete change:_isComplete change:_isAvailable add remove': checkApplyLocks,
          'change:_isLocked': this.checkIsFinished
        });
        this.listenTo(Adapt$1, {
          'assessments:reset': this.onAssessmentReset,
          'contentObjectView:preRender': this.reset,
          'view:addChild': this.onAddChildView,
          'trickle:kill': this.kill
        });
      }
    }, {
      key: "onAssessmentReset",
      value: function onAssessmentReset() {
        var _Adapt$parentView;

        var isMidRender = !((_Adapt$parentView = Adapt$1.parentView) !== null && _Adapt$parentView !== void 0 && _Adapt$parentView.model.get('_isReady'));
        if (isMidRender) return applyLocks();
        debouncedApplyLocks();
      }
    }, {
      key: "onDataReady",
      value: function () {
        var _onDataReady = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  wait$1.for(function (done) {
                    addButtonComponents();
                    applyLocks();
                    done();
                  });

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function onDataReady() {
          return _onDataReady.apply(this, arguments);
        }

        return onDataReady;
      }()
    }, {
      key: "isStarted",
      get: function () {
        var _Adapt$parentView2;

        return Boolean((_Adapt$parentView2 = Adapt$1.parentView) === null || _Adapt$parentView2 === void 0 ? void 0 : _Adapt$parentView2.model.get('_isTrickleStarted'));
      },
      set: function (value) {
        if (!Adapt$1.parentView) return;
        Adapt$1.parentView.model.set('_isTrickleStarted', value);
        if (!value) return;
        Adapt$1.trigger('trickle:started');
      }
    }, {
      key: "onAddChildView",
      value: function onAddChildView(event) {
        if (this.isKilled) return;
        if (event.hasRequestChild) applyLocks();
        var isManagedByTrickleAndLocked = event.model.get('_isTrickled') && event.model.get('_isLocked');
        if (!isManagedByTrickleAndLocked) return;
        event.stop();
      }
    }, {
      key: "isTrickling",
      get: function () {
        var isTrickling = Adapt$1.parentView.model.getAllDescendantModels().some(function (model) {
          return model.get('_isAvailable') && model.get('_isTrickled') && model.get('_isLocked');
        });
        return isTrickling;
      }
    }, {
      key: "continue",
      value: function () {
        var _continue2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  applyLocks();
                  _context2.next = 3;
                  return Adapt$1.parentView.addChildren();

                case 3:
                  _context2.next = 5;
                  return Adapt$1.parentView.whenReady();

                case 5:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        function _continue() {
          return _continue2.apply(this, arguments);
        }

        return _continue;
      }()
    }, {
      key: "scroll",
      value: function () {
        var _scroll = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(fromModel) {
          var trickleConfig, isAutoScrollOff, hasTrickleButton, getScrollToId, scrollToId, isDescendant, model, contentObject, duration;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  trickleConfig = getModelConfig(fromModel);

                  if (trickleConfig !== null && trickleConfig !== void 0 && trickleConfig._isEnabled) {
                    _context3.next = 3;
                    break;
                  }

                  return _context3.abrupt("return", false);

                case 3:
                  if (!isModelArticleWithOnChildren(fromModel)) {
                    _context3.next = 5;
                    break;
                  }

                  return _context3.abrupt("return", false);

                case 5:
                  isAutoScrollOff = !trickleConfig._autoScroll;
                  hasTrickleButton = trickleConfig._button._isEnabled;

                  if (!(isAutoScrollOff && !hasTrickleButton)) {
                    _context3.next = 9;
                    break;
                  }

                  return _context3.abrupt("return");

                case 9:
                  getScrollToId = function () {
                    var scrollTo = trickleConfig._scrollTo;
                    var firstCharacter = scrollTo.substr(0, 1);

                    switch (firstCharacter) {
                      case '@':
                        {
                          var relativeModel = fromModel.findRelativeModel(scrollTo, {
                            filter: function (model) {
                              return model.get('_isAvailable');
                            }
                          });
                          if (relativeModel === undefined) return;
                          return relativeModel.get('_id');
                        }

                      case '.':
                        return scrollTo.substr(1, scrollTo.length - 1);

                      default:
                        return scrollTo;
                    }
                  };

                  scrollToId = getScrollToId();

                  if (!(scrollToId === '')) {
                    _context3.next = 13;
                    break;
                  }

                  return _context3.abrupt("return");

                case 13:
                  isDescendant = Adapt$1.parentView.model.getAllDescendantModels().some(function (model) {
                    return model.get('_id') === scrollToId;
                  });

                  if (isDescendant) {
                    _context3.next = 24;
                    break;
                  }

                  applyLocks();
                  model = data$1.findById(scrollToId);
                  contentObject = model.isTypeGroup('contentobject') ? model : model.findAncestor('contentobject');
                  _context3.next = 20;
                  return router$1.navigateToElement(contentObject.get('_id'));

                case 20:
                  scrollToId = getScrollToId();
                  _context3.next = 23;
                  return router$1.navigateToElement(scrollToId);

                case 23:
                  return _context3.abrupt("return");

                case 24:
                  _context3.next = 26;
                  return Adapt$1.parentView.renderTo(scrollToId);

                case 26:
                  if (hasTrickleButton) {
                    a11y$1.focusFirst($('.' + scrollToId), {
                      preventScroll: true
                    });
                  }

                  if (!isAutoScrollOff) {
                    _context3.next = 29;
                    break;
                  }

                  return _context3.abrupt("return", false);

                case 29:
                  duration = trickleConfig._scrollDuration || 500;
                  router$1.navigateToElement('.' + scrollToId, {
                    duration: duration
                  });

                case 31:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));

        function scroll(_x) {
          return _scroll.apply(this, arguments);
        }

        return scroll;
      }()
    }, {
      key: "isFinished",
      get: function () {
        if (!Adapt$1.parentView) return false;
        return Boolean(!this.isStarted || Adapt$1.parentView.model.get('_isTrickleFinished') || this.isKilled);
      },
      set: function (value) {
        if (!Adapt$1.parentView) return;
        Adapt$1.parentView.model.set('_isTrickleFinished', value);
        if (!value) return;
        Adapt$1.trigger('trickle:finished');
      }
    }, {
      key: "checkIsFinished",
      value: function checkIsFinished() {
        if (!this.isStarted) return;
        if (this.isKilled || this.isFinished) return;
        if (this.isTrickling) return;
        this.isFinished = true;
      }
    }, {
      key: "kill",
      value: function () {
        var _kill = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
          var TrickleModel;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  TrickleModel = components$1.getModelClass('trickle-button');
                  this.isKilled = true;
                  Adapt$1.parentView.model.getAllDescendantModels().forEach(function (model) {
                    var isButtonModel = model instanceof TrickleModel;

                    if (isButtonModel) {
                      model.setCompletionStatus();
                    }

                    if (!model.get('_isTrickled')) return;
                    model.set('_isLocked', false);
                  });
                  _context4.next = 5;
                  return this.continue();

                case 5:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function kill() {
          return _kill.apply(this, arguments);
        }

        return kill;
      }()
    }, {
      key: "isKilled",
      get: function () {
        if (!Adapt$1.parentView) return false;
        return !this.isStarted || Adapt$1.parentView.model.get('_isTrickleKilled');
      },
      set: function (value) {
        if (!Adapt$1.parentView) return;
        Adapt$1.parentView.model.set('_isTrickleKilled', value);
        if (!value) return;
        Adapt$1.trigger('trickle:killed');
      }
    }, {
      key: "reset",
      value: function reset() {
        this.isKilled = false;

        if (!this.isTrickling) {
          this.isStarted = false;
          this.isFinished = false;
          return;
        }

        this.isStarted = true;
        this.isFinished = false;
      }
    }]);

    return TrickleController;
  }(Backbone.Controller);

  var controller = __AMD("extensions/adapt-contrib-trickle/js/controller", new TrickleController());

  var TrickleButtonView = function (_ComponentView) {
    _inherits(TrickleButtonView, _ComponentView);

    var _super = _createSuper(TrickleButtonView);

    function TrickleButtonView() {
      _classCallCheck(this, TrickleButtonView);

      return _super.apply(this, arguments);
    }

    _createClass(TrickleButtonView, [{
      key: "className",
      value: function className() {
        var config = getModelConfig(this.model.getParent());
        return ['trickle', this.model.get('_id'), config._button._component, config._button._isFullWidth && 'is-full-width', config._button._className].filter(Boolean).join(' ');
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-trickle-btn': 'onButtonClick'
        };
      }
    }, {
      key: "initialize",
      value: function initialize() {
        this.openPopupCount = 0;
        this.isAwaitingPopupClose = false;
        this.wasButtonClicked = false;
        this.model.calculateButtonText();
        this.calculateButtonState();
        this.setupEventListeners();
        this.render();

        if (!this.model.isEnabled()) {
          this.setCompletionStatus();
        }

        _.defer(this.setReadyStatus.bind(this));
      }
    }, {
      key: "calculateButtonState",
      value: function calculateButtonState() {
        var isDisabledByPopups = this.openPopupCount > 0;
        this.model.calculateButtonState(isDisabledByPopups, this.wasButtonClicked);
      }
    }, {
      key: "render",
      value: function render() {
        var data = this.model.toJSON();
        data._globals = Adapt$1.course.get('_globals');
        data._trickle = getModelConfig(this.model.getParent());
        this.$el.html(Handlebars.templates[TrickleButtonView.template](data));
      }
    }, {
      key: "setupEventListeners",
      value: function setupEventListeners() {
        var _this$listenTo;

        this.tryButtonAutoHide = this.tryButtonAutoHide.bind(this);
        var onParentComplete = this.onParentComplete.bind(this);

        this.onParentComplete = function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return _.delay(function () {
            return onParentComplete.apply(void 0, args);
          }, 100);
        };

        this.listenTo(Adapt$1.parentView, 'postRemove', this.onRemove);
        this.listenTo(Adapt$1, 'trickle:killed', this.updateButtonState);

        if (this.model.isStepUnlocked() && this.model.isFinished()) {
          return;
        }

        this.$el.on('onscreen', this.tryButtonAutoHide);
        this.listenTo(Adapt$1, {
          'popup:opened': this.onPopupOpened,
          'popup:closed': this.onPopupClosed
        });
        var parentModel = this.model.getParent();
        var completionAttribute = getCompletionAttribute();
        this.listenTo(parentModel, (_this$listenTo = {
          'change:_requireCompletionOf': this.onStepUnlocked
        }, _defineProperty(_this$listenTo, "bubble:change:".concat(completionAttribute), this.onStepUnlocked), _defineProperty(_this$listenTo, "change:".concat(completionAttribute), this.onParentComplete), _this$listenTo));
      }
    }, {
      key: "onPopupOpened",
      value: function onPopupOpened() {
        this.openPopupCount++;
        var shouldUserInteractWithButton = this.model.isStepUnlocked() && !this.model.isFinished();
        if (!shouldUserInteractWithButton) return;
        this.updateButtonState();
      }
    }, {
      key: "onPopupClosed",
      value: function () {
        var _onPopupClosed = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          var shouldUserInteractWithButton;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.openPopupCount--;

                  if (!this.openPopupCount) {
                    _context.next = 3;
                    break;
                  }

                  return _context.abrupt("return");

                case 3:
                  if (!this.isAwaitingPopupClose) {
                    _context.next = 5;
                    break;
                  }

                  return _context.abrupt("return", this.finish());

                case 5:
                  shouldUserInteractWithButton = this.model.isStepUnlocked() && !this.model.isFinished();

                  if (shouldUserInteractWithButton) {
                    _context.next = 8;
                    break;
                  }

                  return _context.abrupt("return");

                case 8:
                  this.updateButtonState();
                  _context.next = 11;
                  return Adapt$1.parentView.addChildren();

                case 11:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function onPopupClosed() {
          return _onPopupClosed.apply(this, arguments);
        }

        return onPopupClosed;
      }()
    }, {
      key: "updateButtonState",
      value: function updateButtonState() {
        this.calculateButtonState();
        var isButtonHidden = !(this.model.get('_isButtonVisible') && !this.model.get('_isButtonAutoHidden'));
        this.$('.js-trickle-btn-container').toggleClass('u-display-none', isButtonHidden);
        var isButtonDisabled = this.model.get('_isButtonDisabled');
        var $button = this.$('.js-trickle-btn');
        var $ariaLabel = this.$('.aria-label');
        a11y$1.toggleEnabled($button, !isButtonDisabled);

        if (!isButtonDisabled) {
          if (document.activeElement instanceof HTMLElement && document.activeElement.isSameNode($ariaLabel[0])) {
            a11y$1.focusNext($ariaLabel);
          }

          a11y$1.toggleAccessibleEnabled($ariaLabel, false);
        }

        var $buttonText = this.$('.js-trickle-btn-text');
        var text = this.model.get('buttonText');
        var ariaLabel = this.model.get('buttonAriaLabel');
        $buttonText.html(text);
        $button.attr('aria-label', ariaLabel);
      }
    }, {
      key: "onStepUnlocked",
      value: function () {
        var _onStepUnlocked = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(event) {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!(event.value === false)) {
                    _context2.next = 2;
                    break;
                  }

                  return _context2.abrupt("return");

                case 2:
                  _.defer(this.updateButtonState.bind(this));

                case 3:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function onStepUnlocked(_x) {
          return _onStepUnlocked.apply(this, arguments);
        }

        return onStepUnlocked;
      }()
    }, {
      key: "onButtonClick",
      value: function () {
        var _onButtonClick = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
          var wasComplete, isStepLockingCompletionRequired;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  wasComplete = this.model.get('_isComplete');
                  this.model.setCompletionStatus();
                  this.wasButtonClicked = true;
                  isStepLockingCompletionRequired = this.model.isStepLockingCompletionRequired();

                  if (!(isStepLockingCompletionRequired && !wasComplete)) {
                    _context3.next = 6;
                    break;
                  }

                  return _context3.abrupt("return");

                case 6:
                  _context3.next = 8;
                  return this.continue();

                case 8:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function onButtonClick() {
          return _onButtonClick.apply(this, arguments);
        }

        return onButtonClick;
      }()
    }, {
      key: "onParentComplete",
      value: function () {
        var _onParentComplete = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(model, value) {
          var _this$stopListening;

          var parentModel, completionAttribute;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  if (value) {
                    _context4.next = 2;
                    break;
                  }

                  return _context4.abrupt("return");

                case 2:
                  parentModel = this.model.getParent();
                  completionAttribute = getCompletionAttribute();
                  this.stopListening(parentModel, (_this$stopListening = {}, _defineProperty(_this$stopListening, "bubble:change:".concat(completionAttribute), this.onStepUnlocked), _defineProperty(_this$stopListening, "change:".concat(completionAttribute), this.onParentComplete), _this$stopListening));

                  if (!controller.isKilled) {
                    _context4.next = 7;
                    break;
                  }

                  return _context4.abrupt("return");

                case 7:
                  if (!(this.openPopupCount > 0)) {
                    _context4.next = 10;
                    break;
                  }

                  this.isAwaitingPopupClose = true;
                  return _context4.abrupt("return");

                case 10:
                  _context4.next = 12;
                  return this.finish();

                case 12:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function onParentComplete(_x2, _x3) {
          return _onParentComplete.apply(this, arguments);
        }

        return onParentComplete;
      }()
    }, {
      key: "finish",
      value: function () {
        var _finish = _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {
          var isStepLockingCompletionRequired;
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  this.stopListening(Adapt$1, {
                    'popup:opened': this.onPopupOpened,
                    'popup:closed': this.onPopupClosed
                  });
                  this.updateButtonState();
                  isStepLockingCompletionRequired = this.model.isStepLockingCompletionRequired();

                  if (isStepLockingCompletionRequired) {
                    _context5.next = 5;
                    break;
                  }

                  return _context5.abrupt("return");

                case 5:
                  _context5.next = 7;
                  return this.continue();

                case 7:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function finish() {
          return _finish.apply(this, arguments);
        }

        return finish;
      }()
    }, {
      key: "continue",
      value: function () {
        var _continue2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6() {
          var parent;
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  parent = this.model.getParent();
                  _context6.next = 3;
                  return controller.continue();

                case 3:
                  _context6.next = 5;
                  return controller.scroll(parent);

                case 5:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function _continue() {
          return _continue2.apply(this, arguments);
        }

        return _continue;
      }()
    }, {
      key: "tryButtonAutoHide",
      value: function tryButtonAutoHide() {
        if (!this.model.get('_isButtonVisible')) return;
        var trickleConfig = getModelConfig(this.model.getParent());

        if (!trickleConfig._button._autoHide) {
          this.model.set('_isButtonAutoHidden', false);
          return;
        }

        var measurements = this.$el.onscreen();
        var isJustOffscreen = measurements.bottom > -100;
        var isButtonAutoHidden = !measurements.onscreen && !isJustOffscreen;
        this.model.set('_isButtonAutoHidden', isButtonAutoHidden);
        this.updateButtonState();
      }
    }, {
      key: "onRemove",
      value: function onRemove() {
        this.$el.off('onscreen', this.tryButtonAutoHide);
        this.remove();
      }
    }]);

    return TrickleButtonView;
  }(ComponentView$1);

  TrickleButtonView.template = 'trickle-button';
  var TrickleButtonView$1 = __AMD("extensions/adapt-contrib-trickle/js/TrickleButtonView", TrickleButtonView);

  var TrickleButtonModel = __AMD("extensions/adapt-contrib-trickle/js/TrickleButtonModel", function (_ComponentModel) {
    _inherits(TrickleButtonModel, _ComponentModel);

    var _super = _createSuper(TrickleButtonModel);

    function TrickleButtonModel() {
      _classCallCheck(this, TrickleButtonModel);

      return _super.apply(this, arguments);
    }

    _createClass(TrickleButtonModel, [{
      key: "init",
      value: function init() {
        _get(_getPrototypeOf(TrickleButtonModel.prototype), "init", this).call(this);

        if (!this.isStepComplete()) return;
        this.setCompletionStatus();
      }
    }, {
      key: "isEnabled",
      value: function isEnabled() {
        var _trickleConfig$_butto;

        var trickleConfig = getModelConfig(this.getParent());
        var isEnabled = trickleConfig._isEnabled && ((_trickleConfig$_butto = trickleConfig._button) === null || _trickleConfig$_butto === void 0 ? void 0 : _trickleConfig$_butto._isEnabled);
        return isEnabled;
      }
    }, {
      key: "isStepLocking",
      value: function isStepLocking() {
        var _config$_stepLocking;

        var config = getModelConfig(this.getParent());
        var isStepLocking = (_config$_stepLocking = config._stepLocking) === null || _config$_stepLocking === void 0 ? void 0 : _config$_stepLocking._isEnabled;
        return isStepLocking;
      }
    }, {
      key: "isStepLockingCompletionRequired",
      value: function isStepLockingCompletionRequired() {
        var config = getModelConfig(this.getParent());
        var isStepLockingCompletionRequired = config._stepLocking && config._stepLocking._isEnabled && config._stepLocking._isCompletionRequired;
        return isStepLockingCompletionRequired;
      }
    }, {
      key: "isStepUnlocked",
      value: function isStepUnlocked() {
        var _this = this;

        var completionAttribute = getCompletionAttribute();
        var isCompletionBlocked = this.getParent().get('_requireCompletionOf') === Number.POSITIVE_INFINITY;
        if (isCompletionBlocked) return;
        return this.getSiblings().every(function (sibling) {
          if (sibling === _this) {
            return true;
          }

          return sibling.get(completionAttribute) || sibling.get('_isOptional') || !sibling.get('_isAvailable');
        });
      }
    }, {
      key: "isStepComplete",
      value: function isStepComplete() {
        var completionAttribute = getCompletionAttribute();
        var isParentComplete = this.getParent().get(completionAttribute);
        return isParentComplete;
      }
    }, {
      key: "isStepLockedOnRevisit",
      value: function isStepLockedOnRevisit() {
        var trickleConfig = getModelConfig(this.getParent());
        return Boolean(trickleConfig._stepLocking._isLockedOnRevisit);
      }
    }, {
      key: "isFinished",
      value: function isFinished() {
        var isStepUnlocked = this.isStepUnlocked();
        var isStepLockingCompletionRequired = this.isStepLockingCompletionRequired();
        var isButtonComplete = this.get('_isComplete');
        var isFinished = (isStepUnlocked || !isStepLockingCompletionRequired) && isButtonComplete;
        return isFinished;
      }
    }, {
      key: "isLastInContentObject",
      value: function isLastInContentObject() {
        var contentObject = this.findAncestor('contentobject');
        var allDescendants = contentObject.getAllDescendantModels(true);
        var lastDescendant = allDescendants[allDescendants.length - 1];
        return this === lastDescendant;
      }
    }, {
      key: "calculateButtonText",
      value: function calculateButtonText() {
        var parentModel = this.getParent();
        var trickleConfig = getModelConfig(parentModel);
        var isStart = false;
        var isFinal = false;

        if (trickleConfig._onChildren) {
          var parentId = parentModel.get('_id');
          var trickleParent = getModelContainer(parentModel);
          var trickleSiblings = trickleParent.getAllDescendantModels(true).filter(function (model) {
            return model.get('_isAvailable') && model.get('_isTrickled');
          });
          var index = trickleSiblings.findIndex(function (model) {
            return model.get('_id') === parentId;
          });
          isStart = index === 0;
          isFinal = index === trickleSiblings.length - 1 && !trickleParent.get('_canRequestChild');
        }

        var text = isStart && trickleConfig._button.startText ? trickleConfig._button.startText : isFinal && trickleConfig._button.finalText ? trickleConfig._button.finalText : trickleConfig._button.text;
        var ariaLabel = isStart && trickleConfig._button.startAriaLabel ? trickleConfig._button.startAriaLabel : isFinal && trickleConfig._button.finalAriaLabel ? trickleConfig._button.finalAriaLabel : trickleConfig._button.ariaLabel;
        this.set({
          buttonText: text,
          buttonAriaLabel: ariaLabel
        });
      }
    }, {
      key: "checkIfResetOnRevisit",
      value: function checkIfResetOnRevisit() {
        if (this.isStepUnlocked() && !this.isStepLockedOnRevisit()) return;
        this.set({
          _isComplete: false,
          _isInteractionComplete: false
        });
      }
    }, {
      key: "calculateButtonState",
      value: function calculateButtonState() {
        var isButtonDisableForced = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var isButtonHiddenForced = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (!this.isEnabled()) {
          this.set({
            _isButtonVisible: false,
            _isButtonDisabled: !this.isStepUnlocked()
          });
          return;
        }
        var trickleConfig = getModelConfig(this.getParent());

        if (this.isLastInContentObject() && trickleConfig._button._showEndOfPage === false) {
          return this.set({
            _isButtonVisible: false,
            _isButtonDisabled: true
          });
        }

        var isTrickleKilled = controller.isKilled;
        var isStepUnlocked = this.isStepUnlocked() || isTrickleKilled;
        var isFinished = this.isFinished() || isTrickleKilled;
        var isButtonVisibleBeforeCompletion = trickleConfig._button._styleBeforeCompletion !== 'hidden';
        var isButtonVisibleAfterCompletion = trickleConfig._button._styleAfterClick !== 'hidden' && !trickleConfig._button._isFullWidth;
        var isStepLockingCompletionRequired = this.isStepLockingCompletionRequired();
        var isNoCompletionRequiredAndLockedVisible = !isStepLockingCompletionRequired && !isFinished && isButtonVisibleBeforeCompletion;
        var isNoCompletionRequiredAndUnlockedVisible = !isStepLockingCompletionRequired && isStepUnlocked && !isFinished;
        var isNoCompletionRequiredAndFinishedVisible = !isStepLockingCompletionRequired && isFinished && isButtonVisibleAfterCompletion;
        var isStepLockedAndVisibleBeforeCompletion = isStepLockingCompletionRequired && !isStepUnlocked && isButtonVisibleBeforeCompletion && !isButtonHiddenForced;
        var isFinishedAndVisibleAfterCompletion = isStepLockingCompletionRequired && isFinished && isButtonVisibleAfterCompletion;
        var isStepUnlockedAndButtonIncomplete = isStepLockingCompletionRequired && isStepUnlocked && !isFinished;
        var isButtonVisible = isNoCompletionRequiredAndLockedVisible || isNoCompletionRequiredAndUnlockedVisible || isNoCompletionRequiredAndFinishedVisible || isStepLockedAndVisibleBeforeCompletion || isFinishedAndVisibleAfterCompletion || isStepUnlockedAndButtonIncomplete;
        var isButtonEnabledBeforeCompletion = trickleConfig._button._styleBeforeCompletion !== 'disabled';
        var isButtonEnabledAfterCompletion = trickleConfig._button._styleAfterClick !== 'disabled';
        var isNoCompletionRequiredAndLockedEnabled = !isStepLockingCompletionRequired && !isFinished && isButtonEnabledBeforeCompletion;
        var isNoCompletionRequiredAndUnlockedEnabled = !isStepLockingCompletionRequired && isStepUnlocked && !isFinished;
        var isNoCompletionRequiredAndFinishedEnabled = !isStepLockingCompletionRequired && isFinished && isButtonEnabledAfterCompletion;
        var isStepUnlockedAndButtonIncompleteWithoutButtonDisabledForced = isStepLockingCompletionRequired && isStepUnlockedAndButtonIncomplete && !isButtonDisableForced;
        var isFinishedAndEnabledAfterCompletion = isStepLockingCompletionRequired && isFinished && isButtonEnabledAfterCompletion;
        var isButtonEnabled = isNoCompletionRequiredAndLockedEnabled || isNoCompletionRequiredAndUnlockedEnabled || isNoCompletionRequiredAndFinishedEnabled || isStepUnlockedAndButtonIncompleteWithoutButtonDisabledForced || isFinishedAndEnabledAfterCompletion || false;
        this.set({
          _isButtonVisible: isButtonVisible,
          _isButtonDisabled: !isButtonEnabled
        });
      }
    }]);

    return TrickleButtonModel;
  }(ComponentModel$1));

  __AMD("extensions/adapt-contrib-trickle/js/trickleButton", components$1.register('trickle-button', {
    view: TrickleButtonView$1,
    model: TrickleButtonModel
  }));

  __AMD("extensions/adapt-contrib-trickle/js/adapt-contrib-trickle", Adapt$1.trickle = controller);

  var TUTOR_TYPE = ENUM(['NOTIFY', 'INLINE', 'OVERLAY', 'NONE']);
  var TUTOR_TYPE$1 = __AMD("extensions/adapt-contrib-tutor/js/TUTOR_TYPE", TUTOR_TYPE);

  var TutorModel = __AMD("extensions/adapt-contrib-tutor/js/TutorModel", function (_Backbone$Model) {
    _inherits(TutorModel, _Backbone$Model);

    var _super = _createSuper(TutorModel);

    function TutorModel() {
      _classCallCheck(this, TutorModel);

      return _super.apply(this, arguments);
    }

    _createClass(TutorModel, [{
      key: "defaults",
      value: function defaults() {
        return {
          _type: TUTOR_TYPE$1.NOTIFY.asLowerCase,
          _classes: '',
          _hasNotifyBottomButton: false,
          _button: {
            text: '{{_globals._extensions._tutor.hideFeedback}}',
            ariaLabel: '{{_globals._extensions._tutor.hideFeedback}}'
          }
        };
      }
    }, {
      key: "initialize",
      value: function initialize(data, parentModel) {
        data = $.extend(true, this.defaults(), _objectSpread2(_objectSpread2({}, data), {}, {
          _attributes: {
            'data-adapt-id': parentModel.get('_id')
          },
          title: parentModel.get('feedbackTitle'),
          body: parentModel.get('feedbackMessage')
        }));
        data._classes += " tutor ".concat(this.getOriginClasses(parentModel));
        this.set(data);
      }
    }, {
      key: "getOriginClasses",
      value: function getOriginClasses(model) {
        var component = model.get('_component');
        var extension = model.get('_extension');
        return [model.get('_isCorrect') ? 'is-correct' : model.get('_isAtLeastOneCorrectSelection') ? 'is-partially-correct' : 'is-incorrect', component && "is-component is-".concat(component), extension && "is-extension is-".concat(extension)].filter(Boolean).join(' ');
      }
    }]);

    return TutorModel;
  }(Backbone.Model));

  var TutorNotify = __AMD("extensions/adapt-contrib-tutor/js/TutorNotify", function (_Backbone$Controller) {
    _inherits(TutorNotify, _Backbone$Controller);

    var _super = _createSuper(TutorNotify);

    function TutorNotify() {
      _classCallCheck(this, TutorNotify);

      return _super.apply(this, arguments);
    }

    _createClass(TutorNotify, [{
      key: "initialize",
      value: function initialize(options) {
        this.parentView = options.parentView;
        this.listenToOnce(Adapt$1, 'notify:closed', this.onNotifyClosed);
        this.triggerNotify();
      }
    }, {
      key: "triggerNotify",
      value: function triggerNotify() {
        var _this$model$toJSON = this.model.toJSON(),
            isButtonEnabled = _this$model$toJSON._hasNotifyBottomButton,
            promptText = _this$model$toJSON._button.text;

        this.notifyOptions = _objectSpread2(_objectSpread2({}, this.model.toJSON()), {}, {
          _prompts: isButtonEnabled && [{
            promptText: Handlebars.compile(promptText)({
              _globals: Adapt$1.course.get('_globals')
            })
          }],
          _type: isButtonEnabled ? 'prompt' : 'popup'
        });
        notify$1.create(this.notifyOptions);
        Adapt$1.trigger('tutor:opened', this.parentView, this.notifyOptions);
      }
    }, {
      key: "onNotifyClosed",
      value: function onNotifyClosed() {
        Adapt$1.trigger('tutor:closed', this.parentView, this.notifyOptions);
      }
    }]);

    return TutorNotify;
  }(Backbone.Controller));

  var TutorView = __AMD("extensions/adapt-contrib-tutor/js/TutorView", function (_Backbone$View) {
    _inherits(TutorView, _Backbone$View);

    var _super = _createSuper(TutorView);

    function TutorView() {
      _classCallCheck(this, TutorView);

      return _super.apply(this, arguments);
    }

    _createClass(TutorView, [{
      key: "className",
      value: function className() {
        return ['tutor', "tutor-type-".concat(this.model.get('_type')), this.model.get('_classes')].join(' ');
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-tutor-btn': 'onCloseClick'
        };
      }
    }, {
      key: "initialize",
      value: function initialize(options) {
        this.parentView = options.parentView;
        this.buttonsView = this.parentView.buttonsView;
        this.listenTo(this.parentView, 'postRemove', this.onTutorClosed);
        this.listenTo(this.buttonsView, 'buttons:stateUpdate', this.onButtonsStateUpdate);
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        this.$el.html(Handlebars.templates.tutor(this.model.toJSON()));

        _.defer(this.postRender.bind(this));
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.toggleFeedback({
          shouldOpen: true
        });
      }
    }, {
      key: "toggleFeedback",
      value: function toggleFeedback() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            shouldOpen = _ref.shouldOpen,
            _ref$shouldManageFocu = _ref.shouldManageFocus,
            shouldManageFocus = _ref$shouldManageFocu === void 0 ? true : _ref$shouldManageFocu;

        var animation = this.model.get('_type') === 'inline' ? 'slide' : 'fade';
        var onAnimationEnd = shouldOpen ? this.onTutorOpened.bind(this, shouldManageFocus) : this.onTutorClosed.bind(this, shouldManageFocus);

        if (shouldManageFocus) {
          a11y$1.toggleEnabled(this.buttonsView.$('.js-btn-feedback'), !shouldOpen);
        }

        this.$('.tutor__inner').stop()["".concat(animation, "Toggle")](200, onAnimationEnd);
      }
    }, {
      key: "onCloseClick",
      value: function onCloseClick() {
        this.toggleFeedback({
          shouldOpen: false
        });
      }
    }, {
      key: "onTutorOpened",
      value: function onTutorOpened(shouldManageFocus) {
        if (shouldManageFocus) {
          a11y$1.focus(this.$('.tutor__inner'), {
            defer: true,
            preventScroll: true
          });
        }

        Adapt$1.trigger('tutor:opened', this.parentView, this.model.toJSON());
      }
    }, {
      key: "onTutorClosed",
      value: function onTutorClosed(shouldManageFocus) {
        if (shouldManageFocus) {
          var $showFeedbackButton = this.buttonsView.$('.js-btn-feedback');
          a11y$1.focus($showFeedbackButton, {
            defer: true,
            preventScroll: true
          });
        }

        Adapt$1.trigger('tutor:closed', this.parentView, this.model.toJSON());
        this.remove();
      }
    }, {
      key: "onButtonsStateUpdate",
      value: function onButtonsStateUpdate(state) {
        if (state !== BUTTON_STATE$1.RESET) return;
        this.toggleFeedback({
          shouldOpen: false,
          shouldManageFocus: false
        });
      }
    }]);

    return TutorView;
  }(Backbone.View));

  var Tutor = function (_Backbone$Controller) {
    _inherits(Tutor, _Backbone$Controller);

    var _super = _createSuper(Tutor);

    function Tutor() {
      _classCallCheck(this, Tutor);

      return _super.apply(this, arguments);
    }

    _createClass(Tutor, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt$1, 'questionView:showFeedback', this.onQuestionViewShowFeedback);
      }
    }, {
      key: "onQuestionViewShowFeedback",
      value: function onQuestionViewShowFeedback(view) {
        var parentModel = view.model;
        var tutorModel = new TutorModel(parentModel.get('_tutor'), parentModel);
        var options = {
          model: tutorModel,
          parentView: view
        };

        switch (TUTOR_TYPE$1(tutorModel.get('_type').toUpperCase())) {
          case TUTOR_TYPE$1.NOTIFY:
            new TutorNotify(options);
            break;

          case TUTOR_TYPE$1.INLINE:
          case TUTOR_TYPE$1.OVERLAY:
            view.$('.component__inner').append(new TutorView(options).$el);
            break;

          case TUTOR_TYPE$1.NONE:
        }
      }
    }]);

    return Tutor;
  }(Backbone.Controller);

  __AMD("extensions/adapt-contrib-tutor/js/adapt-contrib-tutor", Adapt$1.tutor = new Tutor());

  var MenuItemView = function (_AdaptView) {
    _inherits(MenuItemView, _AdaptView);

    var _super = _createSuper(MenuItemView);

    function MenuItemView() {
      _classCallCheck(this, MenuItemView);

      return _super.apply(this, arguments);
    }

    _createClass(MenuItemView, [{
      key: "attributes",
      value: function attributes() {
        return AdaptView$1.resultExtend('attributes', {
          'role': 'listitem',
          'aria-labelledby': this.model.get('_id') + '-heading'
        }, this);
      }
    }, {
      key: "className",
      value: function className() {
        return ['menu-item', this.constructor.className, this.model.get('_id'), this.model.get('_classes'), this.setVisibility(), this.setHidden(), this.model.get('_isVisited') ? 'is-visited' : '', this.model.get('_isComplete') ? 'is-complete' : '', this.model.get('_isLocked') ? 'is-locked' : '', this.model.get('_isOptional') ? 'is-optional' : ''].join(' ');
      }
    }, {
      key: "preRender",
      value: function preRender() {
        this.model.checkCompletionStatus();
        this.model.checkInteractionCompletionStatus();
      }
    }, {
      key: "postRender",
      value: function postRender() {
        this.$el.imageready(this.setReadyStatus.bind(this));
      }
    }]);

    return MenuItemView;
  }(AdaptView$1);

  MenuItemView.type = 'menuItem';
  var MenuItemView$1 = __AMD("core/js/views/menuItemView", MenuItemView);

  var MenuView = function (_ContentObjectView) {
    _inherits(MenuView, _ContentObjectView);

    var _super = _createSuper(MenuView);

    function MenuView() {
      _classCallCheck(this, MenuView);

      return _super.apply(this, arguments);
    }

    return _createClass(MenuView);
  }(ContentObjectView);

  Object.assign(MenuView, {
    childContainer: '.js-children',
    childView: MenuItemView$1,
    type: 'menu',
    template: 'menu'
  });
  var MenuView$1 = __AMD("core/js/views/menuView", MenuView);

  var BoxMenuItemView = function (_MenuItemView) {
    _inherits(BoxMenuItemView, _MenuItemView);

    var _super = _createSuper(BoxMenuItemView);

    function BoxMenuItemView() {
      _classCallCheck(this, BoxMenuItemView);

      return _super.apply(this, arguments);
    }

    _createClass(BoxMenuItemView, [{
      key: "className",
      value: function className() {
        return "".concat(_get(_getPrototypeOf(BoxMenuItemView.prototype), "className", this).call(this), " boxmenu-item");
      }
    }, {
      key: "events",
      value: function events() {
        return {
          'click .js-btn-click': 'onClickMenuItemButton'
        };
      }
    }, {
      key: "onClickMenuItemButton",
      value: function onClickMenuItemButton(event) {
        if (event && event.preventDefault) event.preventDefault();
        if (this.model.get('_isLocked')) return;
        router$1.navigateToElement(this.model.get('_id'));
      }
    }]);

    return BoxMenuItemView;
  }(MenuItemView$1);

  BoxMenuItemView.template = 'boxMenuItem';
  var BoxMenuItemView$1 = __AMD("menu/adapt-contrib-boxMenu/js/BoxMenuItemView", BoxMenuItemView);

  var BoxMenuGroupView = function (_MenuItemView) {
    _inherits(BoxMenuGroupView, _MenuItemView);

    var _super = _createSuper(BoxMenuGroupView);

    function BoxMenuGroupView() {
      _classCallCheck(this, BoxMenuGroupView);

      return _super.apply(this, arguments);
    }

    _createClass(BoxMenuGroupView, [{
      key: "className",
      value: function className() {
        return "".concat(_get(_getPrototypeOf(BoxMenuGroupView.prototype), "className", this).call(this), " boxmenu-group");
      }
    }, {
      key: "postRender",
      value: function postRender() {
        _.defer(this.addChildren.bind(this));

        this.$el.imageready(this.setReadyStatus.bind(this));
        this.$el.parents('.boxmenu__item-container').addClass('has-groups');
      }
    }]);

    return BoxMenuGroupView;
  }(MenuItemView$1);

  BoxMenuGroupView.template = 'boxMenuGroup';
  BoxMenuGroupView.childContainer = '.js-group-children';
  BoxMenuGroupView.childView = BoxMenuItemView$1;
  var BoxMenuGroupView$1 = __AMD("menu/adapt-contrib-boxMenu/js/BoxMenuGroupView", BoxMenuGroupView);

  var BoxMenuView = function (_MenuView) {
    _inherits(BoxMenuView, _MenuView);

    var _super = _createSuper(BoxMenuView);

    function BoxMenuView() {
      _classCallCheck(this, BoxMenuView);

      return _super.apply(this, arguments);
    }

    _createClass(BoxMenuView, [{
      key: "className",
      value: function className() {
        return "".concat(_get(_getPrototypeOf(BoxMenuView.prototype), "className", this).call(this), " boxmenu");
      }
    }, {
      key: "initialize",
      value: function initialize() {
        _get(_getPrototypeOf(BoxMenuView.prototype), "initialize", this).call(this);

        this.setStyles();
        this.listenTo(Adapt$1, 'device:changed', this.onDeviceResize);
      }
    }, {
      key: "onDeviceResize",
      value: function onDeviceResize() {
        this.setStyles();
      }
    }, {
      key: "addChildren",
      value: function addChildren() {
        var _this = this;

        var nthChild = 0;
        var models = this.model.getChildren().models;
        var childViews = [];
        models.forEach(function (model) {
          if (!model.get('_isAvailable')) return;

          if (model.get('_isHidden')) {
            model.set('_isReady', true);
            return;
          }

          nthChild++;
          model.set('_nthChild', nthChild);
          var ChildView = model.get('_type') === 'menu' && model.get('_boxMenu') && model.get('_boxMenu')._renderAsGroup ? BoxMenuGroupView$1 : BoxMenuItemView$1;

          var $parentContainer = _this.$(_this.constructor.childContainer);

          var childView = new ChildView({
            model: model
          });
          childViews.push(childView);
          $parentContainer.append(childView.$el);
        });
        this.setChildViews(childViews);
      }
    }, {
      key: "setStyles",
      value: function setStyles() {
        this.setBackgroundImage();
        this.setBackgroundStyles();
        this.processHeader();
      }
    }, {
      key: "setBackgroundImage",
      value: function setBackgroundImage() {
        var _backgroundImages$;

        var config = this.model.get('_boxMenu');
        var backgroundImages = config === null || config === void 0 ? void 0 : config._backgroundImage;
        if (!backgroundImages) return;
        var backgroundImage = (_backgroundImages$ = backgroundImages["_".concat(Adapt$1.device.screenSize)]) !== null && _backgroundImages$ !== void 0 ? _backgroundImages$ : backgroundImages._small;
        this.$el.toggleClass('has-bg-image', Boolean(backgroundImage)).css('background-image', backgroundImage ? 'url(' + backgroundImage + ')' : '');
      }
    }, {
      key: "setBackgroundStyles",
      value: function setBackgroundStyles() {
        var config = this.model.get('_boxMenu');
        var styles = config === null || config === void 0 ? void 0 : config._backgroundStyles;
        if (!styles) return;
        this.$el.css({
          'background-repeat': styles._backgroundRepeat,
          'background-size': styles._backgroundSize,
          'background-position': styles._backgroundPosition
        });
      }
    }, {
      key: "processHeader",
      value: function processHeader() {
        var config = this.model.get('_boxMenu');
        var header = config === null || config === void 0 ? void 0 : config._menuHeader;
        if (!header) return;
        var $header = this.$('.menu__header');
        this.setHeaderBackgroundImage(header, $header);
        this.setHeaderBackgroundStyles(header, $header);
        this.setHeaderMinimumHeight(header, $header);
      }
    }, {
      key: "setHeaderBackgroundImage",
      value: function setHeaderBackgroundImage(config, $header) {
        var _backgroundImages$2;

        var backgroundImages = config._backgroundImage;
        if (!backgroundImages) return;
        var backgroundImage = (_backgroundImages$2 = backgroundImages["_".concat(Adapt$1.device.screenSize)]) !== null && _backgroundImages$2 !== void 0 ? _backgroundImages$2 : backgroundImages._small;
        $header.toggleClass('has-bg-image', Boolean(backgroundImage)).css('background-image', backgroundImage ? 'url(' + backgroundImage + ')' : '');
      }
    }, {
      key: "setHeaderBackgroundStyles",
      value: function setHeaderBackgroundStyles(config, $header) {
        var styles = config._backgroundStyles;
        if (!styles) return;
        $header.css({
          'background-repeat': styles._backgroundRepeat,
          'background-size': styles._backgroundSize,
          'background-position': styles._backgroundPosition
        });
      }
    }, {
      key: "setHeaderMinimumHeight",
      value: function setHeaderMinimumHeight(config, $header) {
        var _minimumHeights$;

        var minimumHeights = config._minimumHeights;
        if (!minimumHeights) return;
        var minimumHeight = (_minimumHeights$ = minimumHeights["_".concat(Adapt$1.device.screenSize)]) !== null && _minimumHeights$ !== void 0 ? _minimumHeights$ : minimumHeights._small;
        $header.toggleClass('has-min-height', Boolean(minimumHeight)).css('min-height', minimumHeight ? minimumHeight + 'px' : '');
      }
    }]);

    return BoxMenuView;
  }(MenuView$1);

  BoxMenuView.template = 'boxMenu';
  var BoxMenuView$1 = __AMD("menu/adapt-contrib-boxMenu/js/BoxMenuView", BoxMenuView);

  Adapt$1.register('course menu', {
    view: BoxMenuView$1
  });
  Adapt$1.register('boxMenu', {
    view: BoxMenuView$1,
    model: MenuModel$1.extend({})
  });

  var ThemeView = __AMD("theme/adapt-contrib-vanilla/js/themeView", function (_Backbone$View) {
    _inherits(ThemeView, _Backbone$View);

    var _super = _createSuper(ThemeView);

    function ThemeView() {
      _classCallCheck(this, ThemeView);

      return _super.apply(this, arguments);
    }

    _createClass(ThemeView, [{
      key: "className",
      value: function className() {}
    }, {
      key: "initialize",
      value: function initialize() {
        this.setStyles();
        this.listenTo(Adapt$1, {
          'device:changed': this.onDeviceResize,
          remove: this.remove
        });
      }
    }, {
      key: "onDeviceResize",
      value: function onDeviceResize() {
        this.setStyles();
      }
    }, {
      key: "remove",
      value: function remove() {
        _get(_getPrototypeOf(ThemeView.prototype), "remove", this).call(this);

        this.onRemove();
      }
    }, {
      key: "setStyles",
      value: function setStyles() {
        this.setClasses();
        this.setBackgroundImage();
        this.setBackgroundStyles();
        this.setMinimumHeight();
        this.setResponsiveClasses();
        this.setCustomStyles();
      }
    }, {
      key: "setClasses",
      value: function setClasses() {
        this.$el.addClass(this.className());
      }
    }, {
      key: "setBackgroundImage",
      value: function setBackgroundImage() {
        var backgroundImages = this.model.get('_backgroundImage');
        if (!backgroundImages) return;
        var backgroundImage;

        switch (Adapt$1.device.screenSize) {
          case 'large':
            backgroundImage = backgroundImages._large;
            break;

          case 'medium':
            backgroundImage = backgroundImages._medium;
            break;

          default:
            backgroundImage = backgroundImages._small;
        }

        if (backgroundImage) {
          this.$el.addClass('has-bg-image').css('background-image', 'url(' + backgroundImage + ')');
          return;
        }

        this.$el.removeClass('has-bg-image').css('background-image', '');
      }
    }, {
      key: "setBackgroundStyles",
      value: function setBackgroundStyles() {
        var styles = this.model.get('_backgroundStyles');
        if (!styles) return;
        this.$el.css({
          'background-repeat': styles._backgroundRepeat,
          'background-size': styles._backgroundSize,
          'background-position': styles._backgroundPosition
        });
      }
    }, {
      key: "setMinimumHeight",
      value: function setMinimumHeight() {
        var minimumHeights = this.model.get('_minimumHeights');
        if (!minimumHeights) return;
        var minimumHeight;

        switch (Adapt$1.device.screenSize) {
          case 'large':
            minimumHeight = minimumHeights._large;
            break;

          case 'medium':
            minimumHeight = minimumHeights._medium;
            break;

          default:
            minimumHeight = minimumHeights._small;
        }

        if (minimumHeight) {
          this.$el.addClass('has-min-height').css('min-height', minimumHeight + 'px');
          return;
        }

        this.$el.removeClass('has-min-height').css('min-height', '');
      }
    }, {
      key: "setResponsiveClasses",
      value: function setResponsiveClasses() {
        var responsiveClasses = this.model.get('_responsiveClasses');
        if (!responsiveClasses) return;
        this.$el.removeClass(Object.values(responsiveClasses)).addClass(responsiveClasses["_".concat(Adapt$1.device.screenSize)]);
      }
    }, {
      key: "setCustomStyles",
      value: function setCustomStyles() {}
    }, {
      key: "onRemove",
      value: function onRemove() {}
    }]);

    return ThemeView;
  }(Backbone.View));

  var ThemePageView = __AMD("theme/adapt-contrib-vanilla/js/themePageView", function (_ThemeView) {
    _inherits(ThemePageView, _ThemeView);

    var _super = _createSuper(ThemePageView);

    function ThemePageView() {
      _classCallCheck(this, ThemePageView);

      return _super.apply(this, arguments);
    }

    _createClass(ThemePageView, [{
      key: "className",
      value: function className() {}
    }, {
      key: "setCustomStyles",
      value: function setCustomStyles() {
        this.processHeader();
      }
    }, {
      key: "processHeader",
      value: function processHeader() {
        var header = this.model.get('_pageHeader');
        if (!header) return;
        var $header = this.$('.page__header');
        this.setHeaderBackgroundImage(header, $header);
        this.setHeaderBackgroundStyles(header, $header);
        this.setHeaderMinimumHeight(header, $header);
      }
    }, {
      key: "setHeaderBackgroundImage",
      value: function setHeaderBackgroundImage(config, $header) {
        var backgroundImages = config._backgroundImage;
        if (!backgroundImages) return;
        var backgroundImage;

        switch (Adapt$1.device.screenSize) {
          case 'large':
            backgroundImage = backgroundImages._large;
            break;

          case 'medium':
            backgroundImage = backgroundImages._medium;
            break;

          default:
            backgroundImage = backgroundImages._small;
        }

        if (backgroundImage) {
          $header.addClass('has-bg-image').css('background-image', 'url(' + backgroundImage + ')');
          return;
        }

        $header.removeClass('has-bg-image').css('background-image', '');
      }
    }, {
      key: "setHeaderBackgroundStyles",
      value: function setHeaderBackgroundStyles(config, $header) {
        var styles = config._backgroundStyles;
        if (!styles) return;
        $header.css({
          'background-repeat': styles._backgroundRepeat,
          'background-size': styles._backgroundSize,
          'background-position': styles._backgroundPosition
        });
      }
    }, {
      key: "setHeaderMinimumHeight",
      value: function setHeaderMinimumHeight(config, $header) {
        var minimumHeights = config._minimumHeights;
        if (!minimumHeights) return;
        var minimumHeight;

        switch (Adapt$1.device.screenSize) {
          case 'large':
            minimumHeight = minimumHeights._large;
            break;

          case 'medium':
            minimumHeight = minimumHeights._medium;
            break;

          default:
            minimumHeight = minimumHeights._small;
        }

        if (minimumHeight) {
          $header.addClass('has-min-height').css('min-height', minimumHeight + 'px');
          return;
        }

        $header.removeClass('has-min-height').css('min-height', '');
      }
    }, {
      key: "onRemove",
      value: function onRemove() {}
    }]);

    return ThemePageView;
  }(ThemeView));

  var ThemeArticleView = __AMD("theme/adapt-contrib-vanilla/js/themeArticleView", function (_ThemeView) {
    _inherits(ThemeArticleView, _ThemeView);

    var _super = _createSuper(ThemeArticleView);

    function ThemeArticleView() {
      _classCallCheck(this, ThemeArticleView);

      return _super.apply(this, arguments);
    }

    _createClass(ThemeArticleView, [{
      key: "className",
      value: function className() {}
    }, {
      key: "setCustomStyles",
      value: function setCustomStyles() {}
    }, {
      key: "onRemove",
      value: function onRemove() {}
    }]);

    return ThemeArticleView;
  }(ThemeView));

  var ThemeBlockView = __AMD("theme/adapt-contrib-vanilla/js/themeBlockView", function (_ThemeView) {
    _inherits(ThemeBlockView, _ThemeView);

    var _super = _createSuper(ThemeBlockView);

    function ThemeBlockView() {
      _classCallCheck(this, ThemeBlockView);

      return _super.apply(this, arguments);
    }

    _createClass(ThemeBlockView, [{
      key: "className",
      value: function className() {
        return this.model.get('_isDividerBlock') ? 'is-divider-block' : '';
      }
    }, {
      key: "setCustomStyles",
      value: function setCustomStyles() {}
    }, {
      key: "onRemove",
      value: function onRemove() {}
    }]);

    return ThemeBlockView;
  }(ThemeView));

  var Theme = function (_Backbone$Controller) {
    _inherits(Theme, _Backbone$Controller);

    var _super = _createSuper(Theme);

    function Theme() {
      _classCallCheck(this, Theme);

      return _super.apply(this, arguments);
    }

    _createClass(Theme, [{
      key: "initialize",
      value: function initialize() {
        this.listenTo(Adapt$1, {
          'app:dataReady': this.onDataReady,
          'pageView:postRender articleView:postRender blockView:postRender': this.onPostRender
        });
      }
    }, {
      key: "onDataReady",
      value: function onDataReady() {
        $('html').addClass(Adapt$1.course.get('_courseStyle'));
      }
    }, {
      key: "onPostRender",
      value: function onPostRender(view) {
        var viewModel = view.model;
        var theme = viewModel.get('_vanilla');
        var model = new Backbone.Model(theme);
        var el = view.$el;
        if (!theme) return;

        switch (viewModel.get('_type')) {
          case 'page':
            new ThemePageView({
              model: model,
              el: el
            });
            break;

          case 'article':
            new ThemeArticleView({
              model: model,
              el: el
            });
            break;

          case 'block':
            new ThemeBlockView({
              model: model,
              el: el
            });
            break;

          default:
            new ThemeView({
              model: model,
              el: el
            });
        }
      }
    }]);

    return Theme;
  }(Backbone.Controller);

  __AMD("theme/adapt-contrib-vanilla/js/theme", new Theme());

  register("header", function Header(props) {
    var _globals$_components, _globals$_components$;

    var jsxHeading = React.useRef(null);
    var _id = props._id,
        displayTitle = props.displayTitle,
        body = props.body,
        instruction = props.instruction,
        mobileInstruction = props.mobileInstruction,
        _type = props._type,
        _component = props._component,
        _disableAccessibilityState = props._disableAccessibilityState,
        _isA11yComponentDescriptionEnabled = props._isA11yComponentDescriptionEnabled,
        _props$classNamePrefi = props.classNamePrefixes,
        classNamePrefixes = _props$classNamePrefi === void 0 ? [_type && _type.toLowerCase(), _component && _component.toLowerCase()].filter(Boolean) : _props$classNamePrefi;
    var sizedInstruction = mobileInstruction && device$1.screenSize !== 'large' ? mobileInstruction : instruction;

    var _globals = Adapt$1.course.get('_globals');

    var ariaRegion = _globals === null || _globals === void 0 ? void 0 : (_globals$_components = _globals._components) === null || _globals$_components === void 0 ? void 0 : (_globals$_components$ = _globals$_components["_".concat(_component)]) === null || _globals$_components$ === void 0 ? void 0 : _globals$_components$.ariaRegion;
    var isSet = displayTitle || body || sizedInstruction;

    if (!isSet && _isA11yComponentDescriptionEnabled && ariaRegion) {
      return React__default["default"].createElement("div", {
        className: "aria-label"
      }, html(compile(ariaRegion)));
    }

    if (!isSet) return null;
    return React__default["default"].createElement("div", {
      id: "".concat(_id, "-header"),
      className: prefixClasses(classNamePrefixes, ['__header'])
    }, React__default["default"].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__header-inner'])
    }, displayTitle && React__default["default"].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__title'])
    }, !_disableAccessibilityState && React__default["default"].createElement("div", {
      className: "js-heading",
      ref: jsxHeading
    }), React__default["default"].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__title-inner']),
      "aria-hidden": !_disableAccessibilityState,
      dangerouslySetInnerHTML: {
        __html: compile(displayTitle, props)
      }
    })), _isA11yComponentDescriptionEnabled && ariaRegion && React__default["default"].createElement("div", {
      className: "aria-label",
      dangerouslySetInnerHTML: {
        __html: compile(ariaRegion, props)
      }
    }), body && React__default["default"].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__body'])
    }, React__default["default"].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__body-inner']),
      dangerouslySetInnerHTML: {
        __html: compile(body, props)
      }
    })), sizedInstruction && React__default["default"].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__instruction'])
    }, React__default["default"].createElement("div", {
      className: prefixClasses(classNamePrefixes, ['__instruction-inner']),
      dangerouslySetInnerHTML: {
        __html: compile(sizedInstruction, props)
      }
    }))));
  });

  register("image", function Image(props) {
    var hasMediumSetting = Object.prototype.hasOwnProperty.call(props, '_medium') || Object.prototype.hasOwnProperty.call(props, 'medium');
    var screenSize = hasMediumSetting ? device$1.screenSize : device$1.screenSize === 'large' ? 'large' : 'small';
    var src = props["_".concat(screenSize)] || props["".concat(screenSize)] || props._src || props.src;
    var hasSource = Boolean(src);
    if (!hasSource) return null;
    var attributionClassNamePrefixes = props.attributionClassNamePrefixes || props.classNamePrefixes;
    return React__default["default"].createElement("div", {
      className: classes([prefixClasses(props.classNamePrefixes, ['__image-container']), props.attribution && 'has-attribution'])
    }, React__default["default"].createElement("img", {
      className: prefixClasses(props.classNamePrefixes, ['__image']),
      src: src,
      "aria-label": a11y$1.normalize(props.alt),
      "aria-hidden": !props.alt,
      loading: "eager"
    }), props.attribution && React__default["default"].createElement("div", {
      className: prefixClasses(attributionClassNamePrefixes, ['__attribution'])
    }, React__default["default"].createElement("div", {
      className: prefixClasses(attributionClassNamePrefixes, ['__attribution-inner'])
    }, html$1(props.attribution))));
  });

  register("accordion", function Accordion(props) {
    var _Adapt$course$get, _Adapt$course$get$_ac2;

    var _Adapt$course$get$_ac = (_Adapt$course$get = Adapt$1.course.get('_globals')) === null || _Adapt$course$get === void 0 ? void 0 : (_Adapt$course$get$_ac2 = _Adapt$course$get._accessibility) === null || _Adapt$course$get$_ac2 === void 0 ? void 0 : _Adapt$course$get$_ac2._ariaLabels,
        complete = _Adapt$course$get$_ac.complete,
        incomplete = _Adapt$course$get$_ac.incomplete;

    var _id = props._id,
        _ariaLevel = props._ariaLevel,
        onClick = props.onClick;
    var itemAriaLevel = _.isNumber(_ariaLevel) ? _ariaLevel + 1 : _ariaLevel;
    return React__default["default"].createElement("div", {
      className: "component__inner accordion__inner"
    }, React__default["default"].createElement(templates.header, props), React__default["default"].createElement("div", {
      className: "component__widget accordion__widget"
    }, props._items.map(function (_ref, index) {
      var _graphic = _ref._graphic,
          _classes = _ref._classes,
          title = _ref.title,
          body = _ref.body,
          _index = _ref._index,
          _isVisited = _ref._isVisited,
          _isActive = _ref._isActive;
      return React__default["default"].createElement("div", {
        className: classes(['accordion-item', 'js-accordion-item', (_graphic === null || _graphic === void 0 ? void 0 : _graphic.src) && 'has-image', _classes]),
        key: _index,
        "data-index": _index
      }, React__default["default"].createElement("div", {
        role: "heading",
        "aria-level": a11y$1.ariaLevel('componentItem', itemAriaLevel)
      }, React__default["default"].createElement("button", {
        id: "".concat(_id, "-").concat(index, "-accordion-button"),
        className: classes(['accordion-item__btn', 'js-toggle-item', _isVisited && 'is-visited', _isActive ? 'is-open is-selected' : 'is-closed']),
        onClick: onClick,
        "aria-expanded": _isActive.toString(),
        "aria-controls": "".concat(_id, "-").concat(index, "-accordion-button-panel")
      }, React__default["default"].createElement("div", {
        className: "accordion-item__btn-inner"
      }, React__default["default"].createElement("div", {
        className: "accordion-item__icon"
      }, React__default["default"].createElement("div", {
        className: "icon",
        "aria-hidden": "true"
      })), React__default["default"].createElement("div", {
        className: "accordion-item__title"
      }, React__default["default"].createElement("span", {
        className: "aria-label"
      }, "".concat(_isVisited ? complete : incomplete, " ").concat(compile(title))), React__default["default"].createElement("div", {
        className: "accordion-item__title-inner",
        "aria-hidden": "true",
        dangerouslySetInnerHTML: {
          __html: compile(title)
        }
      }))))), React__default["default"].createElement("div", {
        id: "".concat(_id, "-").concat(index, "-accordion-button-panel"),
        className: "accordion-item__content js-accordion-item-content",
        role: "region",
        "aria-labelledby": "".concat(_id, "-").concat(index, "-accordion-button")
      }, React__default["default"].createElement("div", {
        className: "accordion-item__content-inner"
      }, body && React__default["default"].createElement("div", {
        className: "accordion-item__body"
      }, React__default["default"].createElement("div", {
        className: "accordion-item__body-inner",
        dangerouslySetInnerHTML: {
          __html: compile(body)
        }
      })), React__default["default"].createElement(templates.image, _extends({}, _graphic, {
        classNamePrefixes: ['component-item', 'accordion-item'],
        attributionClassNamePrefixes: ['component', 'accordion']
      })))));
    })));
  });

  register("gmcq", function Gmcq(props) {
    var ariaLabels = Adapt$1.course.get('_globals')._accessibility._ariaLabels;

    var _id = props._id,
        _isEnabled = props._isEnabled,
        _isInteractionComplete = props._isInteractionComplete,
        _isCorrect = props._isCorrect,
        _isCorrectAnswerShown = props._isCorrectAnswerShown,
        _shouldShowMarking = props._shouldShowMarking,
        _isRadio = props._isRadio,
        _columns = props._columns,
        displayTitle = props.displayTitle,
        body = props.body,
        instruction = props.instruction,
        onKeyPress = props.onKeyPress,
        onItemSelect = props.onItemSelect,
        onItemFocus = props.onItemFocus,
        onItemBlur = props.onItemBlur;
    var screenSize = device$1.screenSize;
    return React__default["default"].createElement("div", {
      className: "component__inner gmcq__inner"
    }, React__default["default"].createElement(templates.header, props), React__default["default"].createElement("div", {
      className: classes(['component__widget', 'gmcq__widget', !_isEnabled && 'is-disabled', _isInteractionComplete && 'is-complete is-submitted show-user-answer', _isCorrect && 'is-correct', _columns && screenSize === 'large' && 'has-column-layout']),
      role: _isRadio ? 'radiogroup' : 'group',
      "aria-labelledby": (displayTitle || body || instruction) && "".concat(_id, "-header")
    }, props._items.map(function (_ref, index) {
      var text = _ref.text,
          _index = _ref._index,
          _isActive = _ref._isActive,
          _shouldBeSelected = _ref._shouldBeSelected,
          _graphic = _ref._graphic;
      return React__default["default"].createElement("div", {
        className: classes(["gmcq-item item-".concat(index), _shouldShowMarking && _shouldBeSelected ? 'is-correct' : null, _shouldShowMarking && !_shouldBeSelected ? 'is-incorrect' : null]),
        style: _columns && screenSize === 'large' ? {
          width: "".concat(100 / _columns, "%")
        } : null,
        key: _index
      }, React__default["default"].createElement("input", {
        className: "gmcq-item__input",
        id: "".concat(_id, "-").concat(index, "-input"),
        name: _isRadio ? "".concat(_id, "-item") : null,
        type: _isRadio ? 'radio' : 'checkbox',
        disabled: !_isEnabled,
        defaultChecked: _isActive,
        "aria-label": !_shouldShowMarking ? "".concat(a11y$1.normalize(text), " ").concat((_graphic === null || _graphic === void 0 ? void 0 : _graphic.alt) || '') : "".concat(_shouldBeSelected ? ariaLabels.correct : ariaLabels.incorrect, ", ").concat(_isActive ? ariaLabels.selectedAnswer : ariaLabels.unselectedAnswer, ". ").concat(a11y$1.normalize(text), " ").concat((_graphic === null || _graphic === void 0 ? void 0 : _graphic.alt) || ''),
        "data-adapt-index": _index,
        onKeyPress: onKeyPress,
        onChange: onItemSelect,
        onFocus: onItemFocus,
        onBlur: onItemBlur
      }), React__default["default"].createElement("label", {
        className: classes(['gmcq-item__label', 'js-item-label', !_isEnabled && 'is-disabled', (_isCorrectAnswerShown ? _shouldBeSelected : _isActive) && 'is-selected']),
        "aria-hidden": true,
        htmlFor: "".concat(_id, "-").concat(index, "-input"),
        "data-adapt-index": _index
      }, React__default["default"].createElement(templates.image, _extends({}, _graphic, {
        classNamePrefixes: ['gmcq-item'],
        attributionClassNamePrefixes: ['component', 'gmcq']
      })), React__default["default"].createElement("div", {
        className: "gmcq-item__option"
      }, React__default["default"].createElement("div", {
        className: "gmcq-item__state"
      }, React__default["default"].createElement("div", {
        className: classes(['gmcq-item__icon', 'gmcq-item__answer-icon', _isRadio ? 'is-radio' : 'is-checkbox'])
      }, React__default["default"].createElement("div", {
        className: "icon"
      })), React__default["default"].createElement("div", {
        className: "gmcq-item__icon gmcq-item__correct-icon"
      }, React__default["default"].createElement("div", {
        className: "icon"
      })), React__default["default"].createElement("div", {
        className: "gmcq-item__icon gmcq-item__incorrect-icon"
      }, React__default["default"].createElement("div", {
        className: "icon"
      }))), text && React__default["default"].createElement("div", {
        className: "gmcq-item__text"
      }, React__default["default"].createElement("div", {
        className: "gmcq-item__text-inner",
        dangerouslySetInnerHTML: {
          __html: compile(text)
        }
      })))));
    })), React__default["default"].createElement("div", {
      className: "btn__container"
    }));
  });

  var LinkWrapper = function (_ref) {
    var href = _ref.href,
        children = _ref.children,
        target = _ref.target,
        className = _ref.className,
        role = _ref.role;
    return href ? React__default["default"].createElement("a", {
      href: href,
      target: target,
      className: className,
      role: role
    }, children) : children;
  };

  register("graphic", function Graphic(props) {
    var _graphic = props._graphic;
    return React__default["default"].createElement("div", {
      className: "component__inner graphic__inner"
    }, React__default["default"].createElement(templates.header, props), React__default["default"].createElement("div", {
      className: "component__widget graphic__widget"
    }, React__default["default"].createElement(LinkWrapper, {
      href: _graphic._url,
      target: _graphic._target,
      className: "graphic__link js-graphic-link",
      role: "link"
    }, React__default["default"].createElement(templates.image, _extends({}, _graphic, {
      classNamePrefixes: ['component', 'graphic']
    })))));
  });

  register("matching", function Matching(props) {
    var _isEnabled = props._isEnabled,
        _isInteractionComplete = props._isInteractionComplete,
        _isCorrect = props._isCorrect,
        _shouldShowMarking = props._shouldShowMarking,
        _isCorrectAnswerShown = props._isCorrectAnswerShown,
        _items = props._items,
        _options = props._options;
    var displayAsCorrect = _isInteractionComplete && (_isCorrectAnswerShown || _isCorrect);
    return React__default["default"].createElement("div", {
      className: "component__inner matching__inner"
    }, React__default["default"].createElement(templates.header, props), React__default["default"].createElement("div", {
      className: classes(['component__widget matching__widget', !_isEnabled && 'is-disabled', _isInteractionComplete && 'is-complete is-submitted show-user-answer', displayAsCorrect && 'is-correct'])
    }, _items.map(function (_ref, index) {
      var text = _ref.text,
          _index = _ref._index;

      var activeOption = _options.find(function (option) {
        return option._itemIndex === _index && option._isActive;
      });

      var displayItemAsCorrect = !_isEnabled && _shouldShowMarking && (_isCorrectAnswerShown || (activeOption === null || activeOption === void 0 ? void 0 : activeOption._shouldBeSelected));
      return React__default["default"].createElement("div", {
        key: _index,
        className: classes(['matching-item', 'item', "item-".concat(index), 'js-matching-item', _shouldShowMarking && (displayItemAsCorrect ? 'is-correct' : 'is-incorrect')])
      }, text && React__default["default"].createElement("div", {
        className: "matching-item__title"
      }, React__default["default"].createElement("div", {
        className: "matching-item__title_inner",
        dangerouslySetInnerHTML: {
          __html: text
        }
      })), React__default["default"].createElement("div", {
        className: "matching-item__select-container js-matching-item-select-container"
      }, React__default["default"].createElement(templates.matchingDropDown, _extends({}, props, {
        _itemIndex: _index
      })), React__default["default"].createElement("div", {
        className: "matching-item__select-state"
      }, React__default["default"].createElement("div", {
        className: "matching-item__select-icon matching-item__select-correct-icon"
      }, React__default["default"].createElement("div", {
        className: "icon"
      })), React__default["default"].createElement("div", {
        className: "matching-item__select-icon matching-item__select-incorrect-icon"
      }, React__default["default"].createElement("div", {
        className: "icon"
      })))));
    })), React__default["default"].createElement("div", {
      className: "btn__container"
    }));
  });

  register("matchingDropDown", function MatchingDropDown(props) {
    var button = React.useRef(null);
    var list = React.useRef(null);

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        wasOpen = _useState2[0],
        setWasOpen = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isOpen = _useState4[0],
        setIsOpen = _useState4[1];

    var _useState5 = React.useState(false),
        _useState6 = _slicedToArray(_useState5, 2),
        isShown = _useState6[0],
        setIsShown = _useState6[1];

    var _useState7 = React.useState(null),
        _useState8 = _slicedToArray(_useState7, 2),
        blurTimeoutHandle = _useState8[0],
        setBlurTimeoutHandle = _useState8[1];

    var _useState9 = React.useState(false),
        _useState10 = _slicedToArray(_useState9, 2),
        isListOffScreen = _useState10[0],
        setIsListOffScreen = _useState10[1];

    var _useState11 = React.useState(null),
        _useState12 = _slicedToArray(_useState11, 2),
        listHeight = _useState12[0],
        setListHeight = _useState12[1];

    var _useState13 = React.useState(null),
        _useState14 = _slicedToArray(_useState13, 2),
        buttonWidth = _useState14[0],
        setButtonWidth = _useState14[1];

    var _useState15 = React.useState(null),
        _useState16 = _slicedToArray(_useState15, 2),
        buttonOffsetLeft = _useState16[0],
        setButtonOffsetLeft = _useState16[1];

    var onStartInteraction = function () {
      return setWasOpen(isOpen);
    };

    var onButtonClick = function () {
      if (wasOpen || isOpen) {
        setIsOpen(false);
        return;
      }

      if (blurTimeoutHandle) {
        clearTimeout(blurTimeoutHandle);
        setBlurTimeoutHandle(null);
      }

      setIsShown(false);
      setIsOpen(true);
      setTimeout(function () {
        var offset = list === null || list === void 0 ? void 0 : list.current.getBoundingClientRect();
        var height = $(list === null || list === void 0 ? void 0 : list.current).height();
        var windowHeight = $(window).height();
        setIsListOffScreen(offset.top + height > windowHeight);
        setListHeight(height);
        setButtonOffsetLeft(button === null || button === void 0 ? void 0 : button.current.offsetLeft);
        setButtonWidth($(button === null || button === void 0 ? void 0 : button.current).outerWidth());
        setIsShown(true);
        list === null || list === void 0 ? void 0 : list.current.focus();
        scrollToHighlightedListItem();
      }, 100);
    };

    var scrollToHighlightedListItem = function () {
      if (!(list !== null && list !== void 0 && list.current)) return;
      var highlighted = $('li[aria-selected]', list.current)[0];
      if (!highlighted) return;
      var height = list.current.clientHeight;
      var pos = highlighted.offsetTop - height / 2;
      list.current.scrollTop = pos;
    };

    var onOptionClicked = function (event) {
      var li = $(event.target).closest('li');
      var optionIndex = $(li).val();
      var option = options.find(function (option) {
        return option._index === optionIndex;
      });
      chooseOption(option);
    };

    var chooseOption = function (option) {
      setActiveOption(option._index);
      button === null || button === void 0 ? void 0 : button.current.focus();
    };

    var onListBlur = function () {
      if (!isOpen) return;

      var handleBlur = function () {
        setIsShown(false);
        setIsOpen(false);
      };

      setBlurTimeoutHandle(setTimeout(handleBlur, 100));
    };

    var onDocumentClick = function (event) {
      if (!isOpen) return;
      var parents = [document.activeElement].concat(_toConsumableArray($(document.activeElement).parents().toArray()));
      if (parents.includes(list === null || list === void 0 ? void 0 : list.current)) return;
      onListBlur();
    };

    var KEYCODE = {
      UP: 38,
      DOWN: 40,
      ENTER: 13,
      SPACE: 32,
      ESCAPE: 27
    };
    var validKeyCodes = Object.values(KEYCODE);

    var onDocumentKeyDown = function (event) {
      if (!isOpen || !validKeyCodes.includes(event.keyCode)) return;

      switch (event.keyCode) {
        case KEYCODE.UP:
          {
            event.preventDefault();
            var option = getPreviousOption() || getLastOption();
            highlightOption(option);
            break;
          }

        case KEYCODE.DOWN:
          {
            event.preventDefault();

            var _option = getNextOption() || getFirstOption();

            highlightOption(_option);
            break;
          }

        case KEYCODE.ENTER:
        case KEYCODE.SPACE:
          event.preventDefault();
          chooseOption(highlightedOption);
          break;

        case KEYCODE.ESCAPE:
          event.preventDefault();
          button === null || button === void 0 ? void 0 : button.current.focus();
      }
    };

    var getCurrentOptionIndex = function () {
      return options.findIndex(function (option) {
        return option === highlightedOption;
      });
    };

    var getPreviousOption = function () {
      return options[getCurrentOptionIndex() - 1];
    };

    var getLastOption = function () {
      return options[options.length - 1];
    };

    var getNextOption = function () {
      return options[getCurrentOptionIndex() + 1];
    };

    var getFirstOption = function () {
      return options[0];
    };

    var highlightOption = function (option) {
      setHighlightedOption(option._index);
      scrollToHighlightedListItem();
    };

    React.useEffect(function () {
      document.addEventListener('click', onDocumentClick, {
        capture: true
      });
      document.addEventListener('keydown', onDocumentKeyDown);
      return function () {
        document.removeEventListener('click', onDocumentClick, {
          capture: true
        });
        document.removeEventListener('keydown', onDocumentKeyDown);
      };
    }, [onDocumentKeyDown, onDocumentClick]);
    var _id = props._id,
        _isEnabled = props._isEnabled,
        placeholder = props.placeholder,
        _itemIndex = props._itemIndex,
        _options = props._options,
        _isCorrectAnswerShown = props._isCorrectAnswerShown,
        setActiveOption = props.setActiveOption,
        setHighlightedOption = props.setHighlightedOption;

    var options = _options.filter(function (_ref) {
      var itemIndex = _ref._itemIndex;
      return itemIndex === _itemIndex || itemIndex === -1;
    });

    var activeOption = options.find(function (option) {
      return option._itemIndex === _itemIndex && option._isActive;
    }) || {
      text: placeholder
    };
    var highlightedOption = options.find(function (option) {
      return option._itemIndex === _itemIndex && option._isHighlighted;
    }) || {
      text: placeholder
    };
    var correctActiveOption = activeOption !== null && activeOption !== void 0 && activeOption._shouldBeSelected ? activeOption : options.find(function (option) {
      return option._shouldBeSelected;
    });
    var displayActiveOption = _isCorrectAnswerShown ? correctActiveOption : activeOption;
    return React__default["default"].createElement("div", {
      className: "dropdown",
      disabled: !_isEnabled
    }, React__default["default"].createElement("button", {
      disabled: !_isEnabled,
      className: classes(['dropdown__btn js-dropdown-btn', !_isEnabled && 'is-disabled']),
      "aria-haspopup": "listbox",
      "aria-expanded": isOpen,
      onMouseDown: onStartInteraction,
      onTouchStart: onStartInteraction,
      onClick: onButtonClick,
      ref: button
    }, React__default["default"].createElement("div", {
      className: "dropdown__inner js-dropdown-inner",
      dangerouslySetInnerHTML: {
        __html: displayActiveOption === null || displayActiveOption === void 0 ? void 0 : displayActiveOption.text
      }
    }), React__default["default"].createElement("div", {
      className: "dropdown__icon"
    }, React__default["default"].createElement("div", {
      className: "icon"
    }))), React__default["default"].createElement("ul", {
      className: classes(['dropdown__list js-dropdown-list', !isOpen && 'u-display-none', isOpen && !isShown && 'u-visibility-hidden']),
      style: {
        top: !isShown || !isListOffScreen ? '' : -listHeight,
        left: buttonOffsetLeft,
        width: buttonWidth
      },
      role: "listbox",
      tabIndex: "-1",
      onBlur: onListBlur,
      ref: list,
      disabled: !_isEnabled,
      "aria-activedescendant": highlightedOption && "dropdown__item__".concat(_id, "__").concat(_itemIndex, "__").concat(highlightedOption._index)
    }, options.map(function (_ref2) {
      var displayText = _ref2.displayText,
          text = _ref2.text,
          _index = _ref2._index,
          _isHighlighted = _ref2._isHighlighted;
      return React__default["default"].createElement("li", {
        key: _index,
        id: "dropdown__item__".concat(_id, "__").concat(_itemIndex, "__").concat(_index),
        className: "dropdown-item js-dropdown-list-item",
        role: "option",
        text: text,
        value: _index,
        "aria-selected": _isHighlighted || null,
        selected: _isHighlighted || null,
        onClick: onOptionClicked
      }, React__default["default"].createElement("div", {
        className: "dropdown-item__inner js-dropdown-list-item-inner",
        dangerouslySetInnerHTML: {
          __html: displayText || text
        }
      }));
    })));
  });

  register("mcq", function Mcq(props) {
    var ariaLabels = Adapt$1.course.get('_globals')._accessibility._ariaLabels;

    var _id = props._id,
        _isEnabled = props._isEnabled,
        _isInteractionComplete = props._isInteractionComplete,
        _isCorrect = props._isCorrect,
        _isCorrectAnswerShown = props._isCorrectAnswerShown,
        _canShowMarking = props._canShowMarking,
        _isRadio = props._isRadio,
        displayTitle = props.displayTitle,
        body = props.body,
        instruction = props.instruction,
        onKeyPress = props.onKeyPress,
        onItemSelect = props.onItemSelect,
        onItemFocus = props.onItemFocus,
        onItemBlur = props.onItemBlur,
        isInteractive = props.isInteractive;
    var shouldShowMarking = !isInteractive() && _canShowMarking;
    return React__default["default"].createElement("div", {
      className: "component__inner mcq__inner"
    }, React__default["default"].createElement(templates.header, props), React__default["default"].createElement("div", {
      className: classes(['component__widget', 'mcq__widget', !_isEnabled && 'is-disabled', _isInteractionComplete && 'is-complete is-submitted show-user-answer', _isCorrect && 'is-correct']),
      role: _isRadio ? 'radiogroup' : 'group',
      "aria-labelledby": (displayTitle || body || instruction) && "".concat(_id, "-header")
    }, props._items.map(function (_ref, index) {
      var text = _ref.text,
          _index = _ref._index,
          _isActive = _ref._isActive,
          _shouldBeSelected = _ref._shouldBeSelected,
          _isHighlighted = _ref._isHighlighted;
      return React__default["default"].createElement("div", {
        className: classes(["mcq-item item-".concat(index), shouldShowMarking && _shouldBeSelected && 'is-correct', shouldShowMarking && !_shouldBeSelected && 'is-incorrect']),
        key: _index
      }, React__default["default"].createElement("input", {
        className: "mcq-item__input",
        id: "".concat(_id, "-").concat(index, "-input"),
        name: _isRadio ? "".concat(_id, "-item") : null,
        type: _isRadio ? 'radio' : 'checkbox',
        disabled: !_isEnabled,
        defaultChecked: _isActive,
        "aria-label": !shouldShowMarking ? Adapt$1.a11y.normalize(text) : "".concat(_shouldBeSelected ? ariaLabels.correct : ariaLabels.incorrect, ", ").concat(_isActive ? ariaLabels.selectedAnswer : ariaLabels.unselectedAnswer, ". ").concat(Adapt$1.a11y.normalize(text)),
        "data-adapt-index": _index,
        onKeyPress: onKeyPress,
        onChange: onItemSelect,
        onFocus: onItemFocus,
        onBlur: onItemBlur
      }), React__default["default"].createElement("label", {
        className: classes(['mcq-item__label', !_isEnabled && 'is-disabled', _isHighlighted && 'is-highlighted', (_isCorrectAnswerShown ? _shouldBeSelected : _isActive) && 'is-selected']),
        "aria-hidden": true,
        htmlFor: "".concat(_id, "-").concat(index, "-input"),
        "data-adapt-index": _index
      }, React__default["default"].createElement("div", {
        className: "mcq-item__state"
      }, React__default["default"].createElement("div", {
        className: classes(['mcq-item__icon', 'mcq-item__answer-icon', _isRadio ? 'is-radio' : 'is-checkbox'])
      }, React__default["default"].createElement("div", {
        className: "icon"
      })), React__default["default"].createElement("div", {
        className: "mcq-item__icon mcq-item__correct-icon"
      }, React__default["default"].createElement("div", {
        className: "icon"
      })), React__default["default"].createElement("div", {
        className: "mcq-item__icon mcq-item__incorrect-icon"
      }, React__default["default"].createElement("div", {
        className: "icon"
      }))), React__default["default"].createElement("div", {
        className: "mcq-item__text"
      }, React__default["default"].createElement("div", {
        className: "mcq-item__text-inner"
      }, html$1(compile(text))))));
    })), React__default["default"].createElement("div", {
      className: "btn__container"
    }));
  });

  register("text", function Text(props) {
    return React__default["default"].createElement("div", {
      className: "component__inner text__inner"
    }, React__default["default"].createElement(templates.header, props));
  });

  register("textinput", function TextInput(props) {
    var _isInteractionComplete = props._isInteractionComplete,
        _id = props._id,
        _isEnabled = props._isEnabled,
        _isCorrect = props._isCorrect,
        _shouldShowMarking = props._shouldShowMarking;
    return React__default["default"].createElement("div", {
      className: "component__inner textinput__inner"
    }, React__default["default"].createElement(templates.header, props), React__default["default"].createElement("div", {
      className: classes(['component__widget textinput__widget', !_isEnabled && 'is-disabled', _isInteractionComplete && 'is-complete is-submitted show-user-answer', _isCorrect && 'is-correct'])
    }, props._items.map(function (_ref, index) {
      var prefix = _ref.prefix,
          _index = _ref._index,
          input = _ref.input,
          placeholder = _ref.placeholder,
          userAnswer = _ref.userAnswer,
          suffix = _ref.suffix;
      return React__default["default"].createElement("div", {
        className: classes(['textinput-item js-textinput-item', _shouldShowMarking && _isCorrect && 'is-correct', _shouldShowMarking && !_isCorrect && 'is-incorrect']),
        key: _index
      }, prefix && React__default["default"].createElement("div", {
        className: "textinput-item__prefix-container"
      }, React__default["default"].createElement("label", {
        className: "textinput-item__prefix",
        id: "".concat(_id, "-").concat(index, "-aria"),
        htmlFor: "".concat(_id, "-").concat(index),
        "aria-label": prefix
      }, html$1(compile(prefix)))), React__default["default"].createElement("div", {
        className: "textinput-item__textbox-container"
      }, React__default["default"].createElement("input", {
        className: "textinput-item__textbox js-textinput-textbox",
        type: "text",
        placeholder: placeholder,
        "data-id": "".concat(input, "-").concat(index),
        id: "".concat(_id, "-").concat(index),
        "aria-labelledby": prefix && "".concat(_id, "-").concat(index, "-aria"),
        "aria-label": placeholder,
        defaultValue: userAnswer,
        disabled: !_isEnabled
      }), React__default["default"].createElement("div", {
        className: "textinput-item__state"
      }, React__default["default"].createElement("div", {
        className: "textinput-item__icon textinput-item__correct-icon"
      }, React__default["default"].createElement("div", {
        className: "icon"
      })), React__default["default"].createElement("div", {
        className: "textinput-item__icon textinput-item__incorrect-icon"
      }, React__default["default"].createElement("div", {
        className: "icon"
      })))), suffix && React__default["default"].createElement("div", {
        className: "textinput-item__suffix-container"
      }, React__default["default"].createElement("label", {
        className: "textinput-item__suffix",
        id: "".concat(_id, "-").concat(index, "-aria"),
        htmlFor: "".concat(_id, "-").concat(index),
        "aria-label": suffix
      }, html$1(compile(suffix)))));
    })), React__default["default"].createElement("div", {
      className: "btn__container"
    }));
  });

  $('body').append(Handlebars.templates.loading());
  data$1.on('ready', function () {
    logging$1.debug('Calling Adapt.init');
    Adapt$1.init();
    Adapt$1.off('adaptCollection:dataLoaded courseModel:dataLoaded');
  }).init();

}));
// Allow ES export default to be exported as amd modules
window.__AMD = function(id, value) {
  window.define(id, function() { return value; }); // define for external use
  window.require([id]); // force module to load
  return value; // return for export
};
//# sourceMappingURL=adapt.min.js.map
